var searchIndex = {};
searchIndex["ispc"] = {"doc":"A small library meant to be used as a build dependency with Cargo for easily\nintegrating [ISPC](https://ispc.github.io/) code into Rust projects.","items":[[3,"Config","ispc","Extra configuration to be passed to ISPC",null,null],[5,"compile_library","","Compile the list of ISPC files into a static library and generate bindings\nusing bindgen. The library name should not contain a lib prefix or a lib\nextension like &#39;.a&#39; or &#39;.lib&#39;, the appropriate prefix and suffix will be\nadded based on the compilation target.",null,null],[5,"set_task_system","","If you have implemented your own task system you can provide it for use instead\nof the default threaded one. This must be done prior to calling ISPC code which\nspawns tasks otherwise the task system will have already been initialized to\n`Parallel`, which you can also see as an example for implementing a task system.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"set_instrument","","If you have implemented your own instrument for logging ISPC performance\ndata you can use this function to provide it for use instead of the\ndefault one. This function **must** be called before calling into ISPC code,\notherwise the instrumenter will already be set to the default.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"print_instrumenting_summary","","Print out a summary of performace data gathered from instrumenting ISPC.\nMust enable instrumenting to have this record and print data, see\n`Config::instrument`.",null,{"inputs":[],"output":null}],[0,"task","","Defines structs for operating on ISPC task groups and getting chunks\nof a task to be scheduled on to threads",null,null],[3,"Context","ispc::task","A list of all task groups spawned by a function in some launch context which\nwill be sync&#39;d at an explicit `sync` call or function exit.",null,null],[12,"id","","A unique identifier for this context",0,null],[3,"ContextIter","","An iterator over the **current** groups in the context which have remaining tasks to\nrun on a thread. If more task groups are added before this iterator has returned\nNone those will appear as well.",null,null],[3,"Group","","A group of tasks spawned by a call to `launch` in ISPC",null,null],[12,"total","","Total number of tasks scheduled in this group",1,null],[12,"fcn","","Function to run for this task",1,null],[12,"data","","Data pointer to user params to pass to the function",1,null],[3,"GroupChunks","","An iterator over chunks of tasks to be executed in a Group",null,null],[3,"Chunk","","A chunk of tasks from a Group to be executed",null,null],[6,"ISPCTaskFn","","A pointer to an ISPC task function.",null,null],[11,"fmt","","",0,null],[11,"new","","Create a new list of tasks for some function with id `id`",0,{"inputs":[{"name":"usize"}],"output":{"name":"context"}}],[11,"launch","","Add a task group for execution that was launched in this context",0,null],[11,"current_tasks_done","","Check if all tasks currently in the task list are completed",0,null],[11,"alloc","","Allocate some memory for this Context&#39;s task groups, returns a pointer to the allocated memory.",0,null],[11,"iter","","An iterator over the **current** groups in the context which have remaining tasks to\nrun on a thread. If more task groups are added before this iterator has returned\nNone those will appear as well.",0,null],[11,"drop","","Release memory for all the tasks in this context",0,null],[11,"next","","Get a Group with tasks remaining to be executed, returns None if there\nare no groups left to run in this context.",2,null],[11,"fmt","","",1,null],[11,"new","","Create a new task group for execution of the function",1,null],[11,"chunks","","Get an iterator over `chunk_size` chunks of tasks to be executed for this group",1,null],[11,"is_finished","","Check if all tasks for this group have been completed",1,null],[11,"next","","Get the next chunk of tasks to be executed",3,null],[11,"fmt","","",4,null],[11,"new","","Create a new chunk to execute tasks in the group from [start, end)",4,{"inputs":[{"name":"group"},{"name":"usize"},{"name":"usize"}],"output":{"name":"chunk"}}],[11,"execute","","Execute all tasks in this chunk",4,null],[0,"exec","ispc","Defines the trait that must be implemented by ISPC task execution systems\nand provides a default threaded one for use.",null,null],[3,"Parallel","ispc::exec","A multithreaded execution environment for the tasks launched in ISPC",null,null],[8,"TaskSystem","","Trait to be implemented to provide ISPC task execution functionality.",null,null],[10,"alloc","","Alloc is called when memory must be allocated to store parameters to pass to a task\nand must return a pointer to an allocation of `size` bytes aligned to `align`.",5,null],[10,"launch","","Launch is called when a new group of tasks is being launched and should schedule them to\nbe executed in some way.",5,null],[10,"sync","","Synchronize an execution context with the tasks it&#39;s launched. Use `handle` to determine\nthe task context that&#39;s being synchronized.",5,null],[11,"new","","Create a parallel task execution environment that will use `num_cpus` threads\nto run tasks.",6,{"inputs":[],"output":{"name":"arc"}}],[11,"oversubscribed","","Create an oversubscribued parallel task execution environment that will use\n`oversubscribe * num_cpus` threads to run tasks.",6,{"inputs":[{"name":"f32"}],"output":{"name":"arc"}}],[11,"alloc","","",6,null],[11,"launch","","",6,null],[11,"sync","","",6,null],[0,"opt","ispc","This module has various option flags and configs we can pass to ISPC,\nlocated here for convience and clutter reduction.",null,null],[4,"MathLib","ispc::opt","Different math libraries that ISPC can use for computations.",null,null],[13,"ISPCDefault","","Use ispc&#39;s built-in math functions (the default).",7,null],[13,"Fast","","Use high-performance but lower-accuracy math functions.",7,null],[13,"SVML","","Use the Intel(r) SVML math libraries.",7,null],[13,"System","","Use the system&#39;s math library (**may be quite slow**).",7,null],[4,"Addressing","","Select 32 or 64 bit addressing to be used by ISPC. Note: 32-bit\naddressing calculations are done by default, even on 64 bit target\narchitectures.",null,null],[13,"A32","","Select 32 bit addressing calculations.",8,null],[13,"A64","","Select 64 bit addressing calculations.",8,null],[4,"CPU","","ISPC target CPU type options, if none is set ISPC will\ntarget the machine being compile on.",null,null],[13,"Generic","","",9,null],[13,"Bonnell","","Synonym for Atom target",9,null],[13,"Core2","","",9,null],[13,"Penryn","","",9,null],[13,"Nehalem","","Synonym for corei7 target",9,null],[13,"SandyBridge","","Synonym for corei7-avx",9,null],[13,"IvyBridge","","Synonym for core-avx-i target",9,null],[13,"Haswell","","Synonym for core-avx2 target",9,null],[13,"Broadwell","","",9,null],[13,"Knl","","",9,null],[13,"Skx","","",9,null],[13,"Silvermont","","Synonym for slm target",9,null],[4,"OptimizationOpt","","ISPC optimization options.",null,null],[13,"DisableAssertions","","Remove assertion statements from final code.",10,null],[13,"DisableFMA","","Disable &#39;fused multiply-add&#39; instructions (on targets that support them).",10,null],[13,"DisableLoopUnroll","","Disable loop unrolling.",10,null],[13,"FastMaskedVload","","Faster masked vector loads on SSE (may go past end of array).",10,null],[13,"FastMath","","Perform non-IEEE-compliant optimizations of numeric expressions.",10,null],[13,"ForceAlignedMemory","","Always issue aligned vector load and store instructions.",10,null],[4,"TargetISA","","Target instruction sets and vector widths available to specialize for. The\ndefault if none is set will be the host CPU&#39;s ISA and vector width.",null,null],[13,"Host","","",11,null],[13,"SSE2i32x4","","",11,null],[13,"SSE2i32x8","","",11,null],[13,"SSE4i32x4","","",11,null],[13,"SSE4i32x8","","",11,null],[13,"SSE4i16x8","","",11,null],[13,"SSE4i8x16","","",11,null],[13,"AVX1i32x4","","",11,null],[13,"AVX1i32x8","","",11,null],[13,"AVX1i32x16","","",11,null],[13,"AVX1i64x4","","",11,null],[13,"AVX11i32x8","","",11,null],[13,"AVX11i32x16","","",11,null],[13,"AVX11i64x4","","",11,null],[13,"AVX2i32x8","","",11,null],[13,"AVX2i32x16","","",11,null],[13,"AVX2i64x4","","",11,null],[13,"AVX512KNLi32x16","","",11,null],[13,"Genericx1","","",11,null],[13,"Genericx4","","",11,null],[13,"Genericx8","","",11,null],[13,"Genericx16","","",11,null],[13,"Genericx32","","",11,null],[13,"Genericx64","","",11,null],[13,"AnyGenericx16","","",11,null],[11,"to_string","","",7,null],[11,"to_string","","",8,null],[11,"eq","","",9,null],[11,"to_string","","",9,null],[11,"eq","","",10,null],[11,"partial_cmp","","",10,null],[11,"cmp","","",10,null],[11,"to_string","","",10,null],[11,"to_string","","",11,null],[0,"instrument","ispc","Defines the trait that must be implemented by ISPC instrumentation callbacks structs\nand provides a default one.",null,null],[3,"SimpleInstrument","ispc::instrument","A simple ISPC instrumenter which will print the information passed to it out.",null,null],[8,"Instrument","","Trait to be implemented to provide ISPC instrumentation functionality.",null,null],[10,"instrument","","instrument is called when ISPC calls the `ISPCInstrument` callback. The file\nand note strings are converted `CStr` and the number of active programs is\ncomputed from the mask.",12,null],[11,"print_summary","","Called through `ispc::print_instrumenting_summary`, optionally log out a summary\nof performance information gathered through the `instrument` callback.",12,null],[11,"instrument","","",13,null],[11,"new","ispc","",14,{"inputs":[],"output":{"name":"config"}}],[11,"file","","Add an ISPC file to be compiled",14,null],[11,"out_dir","","Set the output directory to override the default of `env!(&quot;OUT_DIR&quot;)`",14,null],[11,"debug","","Set whether debug symbols should be generated, symbols are generated by\ndefault if `env!(&quot;DEBUG&quot;) == &quot;true&quot;`",14,null],[11,"opt_level","","Set the optimization level to override the default of `env!(&quot;OPT_LEVEL&quot;)`",14,null],[11,"target","","Set the target triple to compile for, overriding the default of `env!(&quot;TARGET&quot;)`",14,null],[11,"cargo_metadata","","Set whether Cargo metadata should be emitted to link to the compiled library",14,null],[11,"add_define","","Add a define to be passed to the ISPC compiler, e.g. `-DFOO`\nor `-DBAR=FOO` if a value should also be set.",14,null],[11,"addressing","","Select the 32 or 64 bit addressing calculations for addressing calculations in ISPC.",14,null],[11,"math_lib","","Set the math library used by ISPC code, defaults to the ISPC math library.",14,null],[11,"optimization_opt","","Set an optimization option.",14,null],[11,"cpu","","Set the cpu target. This overrides the default choice of ISPC which\nis to target the host CPU.",14,null],[11,"force_alignment","","Force ISPC memory allocations to be aligned to `alignment`.",14,null],[11,"include_path","","Add an extra include path for the ispc compiler to search for files.",14,null],[11,"no_omit_frame_pointer","","Disable frame pointer omission. It may be useful for profiling to\ndisable omission.",14,null],[11,"no_stdlib","","Don&#39;t make the ispc standard library available.",14,null],[11,"no_cpp","","Don&#39;t run the C preprocessor",14,null],[11,"quiet","","Enable suppression of all ispc compiler output.",14,null],[11,"werror","","Enable treating warnings as errors.",14,null],[11,"woff","","Disable all warnings.",14,null],[11,"wno_perf","","Don&#39;t issue warnings related to performance issues",14,null],[11,"instrument","","Emit instrumentation code for ISPC to gather performance data such\nas vector utilization.",14,null],[11,"target_isa","","Select the target ISA and vector width. If none is specified ispc will\nchoose the host CPU ISA and vector width.\nRun the compiler, producing the library `lib`. If compilation fails\nthe process will exit with EXIT_FAILURE to log build errors to the console.",14,null],[11,"compile","","The library name should not have any prefix or suffix, e.g. instead of\n`libexample.a` or `example.lib` simply pass `example`",14,null],[11,"ispc_version","","Get the ISPC compiler version.",14,null],[11,"default","","",14,{"inputs":[],"output":{"name":"config"}}],[14,"ispc_module!","","Convenience macro for generating the module to hold the raw/unsafe ISPC bindings.",null,null]],"paths":[[3,"Context"],[3,"Group"],[3,"ContextIter"],[3,"GroupChunks"],[3,"Chunk"],[8,"TaskSystem"],[3,"Parallel"],[4,"MathLib"],[4,"Addressing"],[4,"CPU"],[4,"OptimizationOpt"],[4,"TargetISA"],[8,"Instrument"],[3,"SimpleInstrument"],[3,"Config"]]};
searchIndex["bindgen"] = {"doc":"TODO: add some doc","items":[[3,"Builder","bindgen","A builder to generate bindings.",null,null],[3,"Bindings","","Contains the generated code.",null,null],[4,"LinkType","","Type of the link to the library which binding is generating.",null,null],[13,"Static","","Do a static link to the library.",0,null],[13,"Dynamic","","Do a dynamic link to the library.",0,null],[13,"Framework","","Link to a MacOS Framework.",0,null],[8,"Logger","","Trait used internaly to log things with context like the C file line number.",null,null],[11,"error","","Defaults to `error!()`.",1,null],[11,"warn","","Defaults to `warn!()`.",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"new","","Returns a new builder for the C header to parse.",2,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"match_pat","","Add a pattern to filter which file to generate a binding for.",2,null],[11,"clang_arg","","Add a clang CLI argument.",2,null],[11,"link","","Add a library to link.",2,null],[11,"forbid_unknown_types","","Force bindgen to exit if a type is not recognized.",2,null],[11,"builtins","","Control if we should use the c builtins like `__va_list`.",2,null],[11,"derive_debug","","Control if the generated structs will derive Debug.",2,null],[11,"rust_enums","","Control if bindgen should convert the C enums to rust enums or rust constants.",2,null],[11,"log","","Set the logger to use.",2,null],[11,"override_enum_ty","","Overrides the type used to represent a C enum.",2,null],[11,"remove_prefix","","Set the prefix to remove from all the symbols, like `libfoo_`.",2,null],[11,"emit_ast","","Controls if bindgen should also print the parsed AST (for debug).",2,null],[11,"use_core","","Defines if we should use `std` or `core` for `Option` and such.",2,null],[11,"ctypes_prefix","","Sets the prefix to use for c_void and others.",2,null],[11,"dont_convert_floats","","Defines if we should convert float and double to f32 and f64.",2,null],[11,"convert_macros","","Turn macros definitions into const definitions, when possible",2,null],[11,"macro_int_types","","When converting macros, convert integers that would fit in a `u8`,\n`u16`, `u32`, `u64`, `i8`, `i16`, `i32`, `i64` to the corresponding\nnamed C type the supplied list.",2,null],[11,"generate","","Generate the binding using the options previously set.",2,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"eq","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",3,null],[11,"into_ast","","Get the generated code AST.",3,null],[11,"to_string","","Get the generated code in a String.",3,null],[11,"write_to_file","","Write the generated code in a file.",3,null],[11,"write","","Write the generated code in the provided `Write` object.",3,null]],"paths":[[4,"LinkType"],[8,"Logger"],[3,"Builder"],[3,"Bindings"]]};
searchIndex["syntex_syntax"] = {"doc":"The Rust parser and macro expander.","items":[[0,"diagnostics","syntex_syntax","",null,null],[0,"plugin","syntex_syntax::diagnostics","",null,null],[3,"ErrorInfo","syntex_syntax::diagnostics::plugin","Error information type.",null,null],[12,"description","","",0,null],[12,"use_site","","",0,null],[5,"expand_diagnostic_used","","",null,null],[5,"expand_register_diagnostic","","",null,null],[5,"expand_build_diagnostic_array","","",null,null],[6,"ErrorMap","","Mapping from error codes to metadata.",null,null],[0,"metadata","syntex_syntax::diagnostics","This module contains utilities for outputting metadata for diagnostic errors.",null,null],[3,"ErrorMetadata","syntex_syntax::diagnostics::metadata","JSON encodable/decodable version of `ErrorInfo`.",null,null],[12,"description","","",1,null],[12,"use_site","","",1,null],[3,"ErrorLocation","","JSON encodable error location type with filename and line number.",null,null],[12,"filename","","",2,null],[12,"line","","",2,null],[5,"get_metadata_dir","","Get the directory where metadata for a given `prefix` should be stored.",null,{"inputs":[{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"output_metadata","","Write metadata for the errors in `err_map` to disk, to a file corresponding to `prefix/name`.",null,{"inputs":[{"name":"extctxt"},{"name":"str"},{"name":"str"},{"name":"errormap"}],"output":{"name":"result"}}],[6,"ErrorMetadataMap","","Mapping from error codes to metadata that can be (de)serialized.",null,null],[11,"encode","","",1,null],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"encode","","",2,null],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"from_span","","Create an error location from a span.",2,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"errorlocation"}}],[0,"util","syntex_syntax","",null,null],[3,"ThinVec","syntex_syntax::util","A vector type optimized for cases where this size is usually 0 (c.f. `SmallVector`).\nThe `Option&lt;Box&lt;..&gt;&gt;` wrapping allows us to represent a zero sized vector with `None`,\nwhich uses only a single (null) pointer.",null,null],[0,"interner","","An &quot;interner&quot; is a data structure that associates values with usize tags and\nallows bidirectional lookup; i.e. given a value, one can easily find the\ntype, and vice versa.",null,null],[3,"Interner","syntex_syntax::util::interner","",null,null],[3,"RcStr","","",null,null],[3,"StrInterner","","A StrInterner differs from Interner&lt;String&gt; in that it accepts\n&amp;str rather than RcStr, resulting in less allocation.",null,null],[11,"new","","",3,{"inputs":[],"output":{"name":"interner"}}],[11,"prefill","","",3,null],[11,"intern","","",3,null],[11,"gensym","","",3,null],[11,"get","","",3,null],[11,"len","","",3,null],[11,"find","","",3,null],[11,"clear","","",3,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"hash","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"new","","",4,{"inputs":[{"name":"str"}],"output":{"name":"rcstr"}}],[11,"cmp","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"borrow","","",4,null],[11,"deref","","",4,null],[11,"new","","",5,{"inputs":[],"output":{"name":"strinterner"}}],[11,"prefill","","",5,null],[11,"intern","","",5,null],[11,"gensym","","",5,null],[11,"gensym_copy","","Create a gensym with the same name as an existing\nentry.",5,null],[11,"get","","",5,null],[11,"len","","",5,null],[11,"find","","",5,null],[11,"clear","","",5,null],[11,"reset","","",5,null],[0,"lev_distance","syntex_syntax::util","",null,null],[5,"lev_distance","syntex_syntax::util::lev_distance","To find the Levenshtein distance between two strings",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"find_best_match_for_name","","To find the best match for a given string from an iterator of names\nAs a loose rule to avoid the obviously incorrect suggestions, it takes\nan optional limit for the maximum allowable edit distance, which defaults\nto one-third of the given word",null,{"inputs":[{"name":"t"},{"name":"str"},{"name":"option"}],"output":{"name":"option"}}],[0,"node_count","syntex_syntax::util","",null,null],[3,"NodeCounter","syntex_syntax::util::node_count","",null,null],[12,"count","","",6,null],[11,"new","","",6,{"inputs":[],"output":{"name":"nodecounter"}}],[11,"visit_ident","","",6,null],[11,"visit_mod","","",6,null],[11,"visit_foreign_item","","",6,null],[11,"visit_item","","",6,null],[11,"visit_local","","",6,null],[11,"visit_block","","",6,null],[11,"visit_stmt","","",6,null],[11,"visit_arm","","",6,null],[11,"visit_pat","","",6,null],[11,"visit_expr","","",6,null],[11,"visit_ty","","",6,null],[11,"visit_generics","","",6,null],[11,"visit_fn","","",6,null],[11,"visit_trait_item","","",6,null],[11,"visit_impl_item","","",6,null],[11,"visit_trait_ref","","",6,null],[11,"visit_ty_param_bound","","",6,null],[11,"visit_poly_trait_ref","","",6,null],[11,"visit_variant_data","","",6,null],[11,"visit_struct_field","","",6,null],[11,"visit_enum_def","","",6,null],[11,"visit_variant","","",6,null],[11,"visit_lifetime","","",6,null],[11,"visit_lifetime_def","","",6,null],[11,"visit_mac","","",6,null],[11,"visit_path","","",6,null],[11,"visit_path_list_item","","",6,null],[11,"visit_path_parameters","","",6,null],[11,"visit_assoc_type_binding","","",6,null],[11,"visit_attribute","","",6,null],[11,"visit_macro_def","","",6,null],[0,"parser","syntex_syntax::util","",null,null],[4,"AssocOp","syntex_syntax::util::parser","Associative operator with precedence.",null,null],[13,"Add","","`+`",7,null],[13,"Subtract","","`-`",7,null],[13,"Multiply","","`*`",7,null],[13,"Divide","","`/`",7,null],[13,"Modulus","","`%`",7,null],[13,"LAnd","","`&amp;&amp;`",7,null],[13,"LOr","","`||`",7,null],[13,"BitXor","","`^`",7,null],[13,"BitAnd","","`&amp;`",7,null],[13,"BitOr","","`|`",7,null],[13,"ShiftLeft","","`&lt;&lt;`",7,null],[13,"ShiftRight","","`&gt;&gt;`",7,null],[13,"Equal","","`==`",7,null],[13,"Less","","`&lt;`",7,null],[13,"LessEqual","","`&lt;=`",7,null],[13,"NotEqual","","`!=`",7,null],[13,"Greater","","`&gt;`",7,null],[13,"GreaterEqual","","`&gt;=`",7,null],[13,"Assign","","`=`",7,null],[13,"Inplace","","`&lt;-`",7,null],[13,"AssignOp","","`?=` where ? is one of the BinOpToken",7,null],[13,"As","","`as`",7,null],[13,"DotDot","","`..` range",7,null],[13,"DotDotDot","","`...` range",7,null],[13,"Colon","","`:`",7,null],[4,"Fixity","","",null,null],[13,"Left","","The operator is left-associative",8,null],[13,"Right","","The operator is right-associative",8,null],[13,"None","","The operator is not associative",8,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"fmt","","",7,null],[11,"eq","","",8,null],[11,"fmt","","",8,null],[11,"from_token","","Create a new AssocOP from a token",7,{"inputs":[{"name":"token"}],"output":{"name":"option"}}],[11,"from_ast_binop","","Create a new AssocOp from ast::BinOpKind.",7,{"inputs":[{"name":"binopkind"}],"output":{"name":"self"}}],[11,"precedence","","Gets the precedence of this operator",7,null],[11,"fixity","","Gets the fixity of this operator",7,null],[11,"is_comparison","","",7,null],[11,"is_assign_like","","",7,null],[11,"to_ast_binop","","",7,null],[0,"small_vector","syntex_syntax::util","",null,null],[3,"SmallVector","syntex_syntax::util::small_vector","A vector type optimized for cases where the size is almost always 0 or 1",null,null],[3,"IntoIter","","",null,null],[11,"into","","",9,null],[11,"from_iter","","",9,{"inputs":[{"name":"i"}],"output":{"name":"smallvector"}}],[11,"extend","","",9,null],[11,"zero","","",9,{"inputs":[],"output":{"name":"smallvector"}}],[11,"one","","",9,{"inputs":[{"name":"t"}],"output":{"name":"smallvector"}}],[11,"many","","",9,{"inputs":[{"name":"vec"}],"output":{"name":"smallvector"}}],[11,"as_slice","","",9,null],[11,"pop","","",9,null],[11,"push","","",9,null],[11,"push_all","","",9,null],[11,"get","","",9,null],[11,"expect_one","","",9,null],[11,"len","","",9,null],[11,"is_empty","","",9,null],[11,"map","","",9,null],[11,"into_iter","","",9,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"move_flat_map","","",9,null],[0,"move_map","syntex_syntax::util","",null,null],[8,"MoveMap","syntex_syntax::util::move_map","",null,null],[11,"move_map","","",11,null],[10,"move_flat_map","","",11,null],[11,"fmt","syntex_syntax::util","",12,null],[11,"hash","","",12,null],[11,"decode","","",12,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"new","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",12,null],[11,"deref","","",12,null],[11,"extend","","",12,null],[0,"json","syntex_syntax","A JSON emitter for errors.",null,null],[3,"JsonEmitter","syntex_syntax::json","",null,null],[11,"basic","","",13,{"inputs":[],"output":{"name":"jsonemitter"}}],[11,"stderr","","",13,{"inputs":[{"name":"option"},{"name":"rc"}],"output":{"name":"jsonemitter"}}],[11,"emit","","",13,null],[11,"emit_struct","","",13,null],[0,"syntax","syntex_syntax","",null,null],[0,"abi","","",null,null],[3,"AbiData","syntex_syntax::abi","",null,null],[4,"Os","","",null,null],[13,"Windows","","",14,null],[13,"Macos","","",14,null],[13,"Linux","","",14,null],[13,"Android","","",14,null],[13,"Freebsd","","",14,null],[13,"iOS","","",14,null],[13,"Dragonfly","","",14,null],[13,"Bitrig","","",14,null],[13,"Netbsd","","",14,null],[13,"Openbsd","","",14,null],[13,"NaCl","","",14,null],[13,"Solaris","","",14,null],[4,"Abi","","",null,null],[13,"Cdecl","","",15,null],[13,"Stdcall","","",15,null],[13,"Fastcall","","",15,null],[13,"Vectorcall","","",15,null],[13,"Aapcs","","",15,null],[13,"Win64","","",15,null],[13,"Rust","","",15,null],[13,"C","","",15,null],[13,"System","","",15,null],[13,"RustIntrinsic","","",15,null],[13,"RustCall","","",15,null],[13,"PlatformIntrinsic","","",15,null],[4,"Architecture","","",null,null],[13,"X86","","",16,null],[13,"X86_64","","",16,null],[13,"Arm","","",16,null],[13,"Mips","","",16,null],[13,"Mipsel","","",16,null],[4,"AbiArchitecture","","",null,null],[13,"Rust","","Not a real ABI (e.g., intrinsic)",17,null],[13,"All","","An ABI that specifies cross-platform defaults (e.g., &quot;C&quot;)",17,null],[13,"Archs","","Multiple architectures (bitset)",17,null],[5,"lookup","","Returns the ABI with the given name (if any).",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"all_names","","",null,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",14,null],[11,"eq","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",15,null],[11,"clone","","",15,null],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",15,null],[11,"hash","","",15,null],[11,"eq","","",15,null],[11,"fmt","","",16,null],[11,"eq","","",16,null],[11,"clone","","",16,null],[11,"clone","","",18,null],[11,"clone","","",17,null],[11,"index","","",15,null],[11,"data","","",15,null],[11,"name","","",15,null],[11,"fmt","","",15,null],[11,"fmt","","",14,null],[0,"ast","syntex_syntax","",null,null],[3,"ThinVec","syntex_syntax::ast","A vector type optimized for cases where this size is usually 0 (c.f. `SmallVector`).\nThe `Option&lt;Box&lt;..&gt;&gt;` wrapping allows us to represent a zero sized vector with `None`,\nwhich uses only a single (null) pointer.",null,null],[3,"Name","","A name is a part of an identifier, representing a string or gensym. It&#39;s\nthe result of interning.",null,null],[12,"0","","",19,null],[3,"SyntaxContext","","A SyntaxContext represents a chain of macro-expandings\nand renamings. Each macro expansion corresponds to\na fresh u32. This u32 is a reference to a table stored\nin thread-local storage.\nThe special value EMPTY_CTXT is used to indicate an empty\nsyntax context.",null,null],[12,"0","","",20,null],[3,"Ident","","An identifier contains a Name (index into the interner\ntable) and a SyntaxContext to track renaming and\nmacro expansion per Flatt et al., &quot;Macros That Work Together&quot;",null,null],[12,"name","","",21,null],[12,"ctxt","","",21,null],[3,"Lifetime","","",null,null],[12,"id","","",22,null],[12,"span","","",22,null],[12,"name","","",22,null],[3,"LifetimeDef","","A lifetime definition, e.g. `&#39;a: &#39;b+&#39;c+&#39;d`",null,null],[12,"lifetime","","",23,null],[12,"bounds","","",23,null],[3,"Path","","A &quot;Path&quot; is essentially Rust&#39;s notion of a name.",null,null],[12,"span","","",24,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current\nmodule (like paths in an import).",24,null],[12,"segments","","The segments in the path: the things separated by `::`.",24,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"identifier","","The identifier portion of this path segment.",25,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in\ntwo flavors: `Path&lt;A,B,C&gt;` and `Path(A,B) -&gt; C`. Note that\nthis is more than just simple syntactic sugar; the use of\nparens affects the region binding rules, so we preserve the\ndistinction.",25,null],[3,"AngleBracketedParameterData","","A path like `Foo&lt;&#39;a, T&gt;`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",26,null],[12,"types","","The type parameters for this path segment, if present.",26,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",26,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -&gt; C`",null,null],[12,"span","","Overall span",27,null],[12,"inputs","","`(A,B)`",27,null],[12,"output","","`C`",27,null],[3,"TyParam","","",null,null],[12,"ident","","",28,null],[12,"id","","",28,null],[12,"bounds","","",28,null],[12,"default","","",28,null],[12,"span","","",28,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration\nof a function, enum, trait, etc.",null,null],[12,"lifetimes","","",29,null],[12,"ty_params","","",29,null],[12,"where_clause","","",29,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"id","","",30,null],[12,"predicates","","",30,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"span","","",31,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",31,null],[12,"bounded_ty","","The type being bounded",31,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+&#39;static`)",31,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"span","","",32,null],[12,"lifetime","","",32,null],[12,"bounds","","",32,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"id","","",33,null],[12,"span","","",33,null],[12,"path","","",33,null],[12,"ty","","",33,null],[3,"Crate","","",null,null],[12,"module","","",34,null],[12,"attrs","","",34,null],[12,"config","","",34,null],[12,"span","","",34,null],[12,"exported_macros","","",34,null],[3,"Block","","A Block (`{ .. }`).",null,null],[12,"stmts","","Statements in a block",35,null],[12,"id","","",35,null],[12,"rules","","Distinguishes between `unsafe { ... }` and `{ ... }`",35,null],[12,"span","","",35,null],[3,"Pat","","",null,null],[12,"id","","",36,null],[12,"node","","",36,null],[12,"span","","",36,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"ident","","The identifier for the field",37,null],[12,"pat","","The pattern the field is destructured to",37,null],[12,"is_shorthand","","",37,null],[3,"Stmt","","A statement",null,null],[12,"id","","",38,null],[12,"node","","",38,null],[12,"span","","",38,null],[3,"Local","","Local represents a `let` statement, e.g., `let &lt;pat&gt;:&lt;ty&gt; = &lt;expr&gt;;`",null,null],[12,"pat","","",39,null],[12,"ty","","",39,null],[12,"init","","Initializer expression to set the value, if any",39,null],[12,"id","","",39,null],[12,"span","","",39,null],[12,"attrs","","",39,null],[3,"Arm","","An arm of a &#39;match&#39;.",null,null],[12,"attrs","","",40,null],[12,"pats","","",40,null],[12,"guard","","",40,null],[12,"body","","",40,null],[3,"Field","","",null,null],[12,"ident","","",41,null],[12,"expr","","",41,null],[12,"span","","",41,null],[3,"Expr","","An expression",null,null],[12,"id","","",42,null],[12,"node","","",42,null],[12,"span","","",42,null],[12,"attrs","","",42,null],[3,"QSelf","","The explicit Self type in a &quot;qualified path&quot;. The actual\npath, including the trait and the associated item, is stored\nseparately. `position` represents the index of the associated\nitem qualified with this Self type.",null,null],[12,"ty","","",43,null],[12,"position","","",43,null],[3,"Mac_","","Represents a macro invocation. The Path indicates which macro\nis being invoked, and the vector of token-trees contains the source\nof the macro invocation.",null,null],[12,"path","","",44,null],[12,"tts","","",44,null],[3,"MutTy","","",null,null],[12,"ty","","",45,null],[12,"mutbl","","",45,null],[3,"MethodSig","","Represents a method&#39;s signature in a trait declaration,\nor in an implementation.",null,null],[12,"unsafety","","",46,null],[12,"constness","","",46,null],[12,"abi","","",46,null],[12,"decl","","",46,null],[12,"generics","","",46,null],[3,"TraitItem","","Represents an item declaration within a trait declaration,\npossibly including a default implementation. A trait item is\neither required (meaning it doesn&#39;t have an implementation, just a\nsignature) or provided (meaning it has a default implementation).",null,null],[12,"id","","",47,null],[12,"ident","","",47,null],[12,"attrs","","",47,null],[12,"node","","",47,null],[12,"span","","",47,null],[3,"ImplItem","","",null,null],[12,"id","","",48,null],[12,"ident","","",48,null],[12,"vis","","",48,null],[12,"defaultness","","",48,null],[12,"attrs","","",48,null],[12,"node","","",48,null],[12,"span","","",48,null],[3,"TypeBinding","","",null,null],[12,"id","","",49,null],[12,"ident","","",49,null],[12,"ty","","",49,null],[12,"span","","",49,null],[3,"Ty","","",null,null],[12,"id","","",50,null],[12,"node","","",50,null],[12,"span","","",50,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",51,null],[12,"abi","","",51,null],[12,"lifetimes","","",51,null],[12,"decl","","",51,null],[3,"InlineAsmOutput","","Inline assembly.",null,null],[12,"constraint","","",52,null],[12,"expr","","",52,null],[12,"is_rw","","",52,null],[12,"is_indirect","","",52,null],[3,"InlineAsm","","Inline assembly.",null,null],[12,"asm","","",53,null],[12,"asm_str_style","","",53,null],[12,"outputs","","",53,null],[12,"inputs","","",53,null],[12,"clobbers","","",53,null],[12,"volatile","","",53,null],[12,"alignstack","","",53,null],[12,"dialect","","",53,null],[12,"expn_id","","",53,null],[3,"Arg","","An argument in a function header.",null,null],[12,"ty","","",54,null],[12,"pat","","",54,null],[12,"id","","",54,null],[3,"FnDecl","","Header (not the body) of a function declaration.",null,null],[12,"inputs","","",55,null],[12,"output","","",55,null],[12,"variadic","","",55,null],[3,"Mod","","Module declaration.",null,null],[12,"inner","","A span from the first token past `{` to the last token until `}`.\nFor `mod foo;`, the inner span ranges from the first token\nto the last token in the external file.",56,null],[12,"items","","",56,null],[3,"ForeignMod","","Foreign module declaration.",null,null],[12,"abi","","",57,null],[12,"items","","",57,null],[3,"EnumDef","","",null,null],[12,"variants","","",58,null],[3,"Variant_","","",null,null],[12,"name","","",59,null],[12,"attrs","","",59,null],[12,"data","","",59,null],[12,"disr_expr","","Explicit discriminant, e.g. `Foo = 1`",59,null],[3,"AttrId","","",null,null],[12,"0","","",60,null],[3,"Attribute_","","Doc-comments are promoted to attributes that have is_sugared_doc = true",null,null],[12,"id","","",61,null],[12,"style","","",61,null],[12,"value","","",61,null],[12,"is_sugared_doc","","",61,null],[3,"TraitRef","","TraitRef&#39;s appear in impls.",null,null],[12,"path","","",62,null],[12,"ref_id","","",62,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `&#39;a` in `&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;`",63,null],[12,"trait_ref","","The `Foo&lt;&amp;&#39;a T&gt;` in `&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;`",63,null],[12,"span","","",63,null],[3,"StructField","","Field of a struct.",null,null],[12,"span","","",64,null],[12,"ident","","",64,null],[12,"vis","","",64,null],[12,"id","","",64,null],[12,"ty","","",64,null],[12,"attrs","","",64,null],[3,"Item","","An item",null,null],[12,"ident","","",65,null],[12,"attrs","","",65,null],[12,"id","","",65,null],[12,"node","","",65,null],[12,"vis","","",65,null],[12,"span","","",65,null],[3,"ForeignItem","","",null,null],[12,"ident","","",66,null],[12,"attrs","","",66,null],[12,"node","","",66,null],[12,"id","","",66,null],[12,"span","","",66,null],[12,"vis","","",66,null],[3,"MacroDef","","A macro definition, in this crate or imported from another.",null,null],[12,"ident","","",67,null],[12,"attrs","","",67,null],[12,"id","","",67,null],[12,"span","","",67,null],[12,"imported_from","","",67,null],[12,"export","","",67,null],[12,"use_locally","","",67,null],[12,"allow_internal_unstable","","",67,null],[12,"body","","",67,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `&lt;&#39;a, A,B,C&gt;` in `foo::bar::baz::&lt;&#39;a, A,B,C&gt;`",68,null],[13,"Parenthesized","","The `(A,B)` and `C` in `Foo(A,B) -&gt; C`",68,null],[4,"TyParamBound","","The AST represents all type param bounds as types.\ntypeck::collect::compute_bounds matches these against\nthe &quot;special&quot; built-in traits (see middle::lang_items) and\ndetects Copy, Send and Sync.",null,null],[13,"TraitTyParamBound","","",69,null],[13,"RegionTyParamBound","","",69,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the\nmodifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",70,null],[13,"Maybe","","",70,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for&lt;&#39;c&gt; Foo: Send+Clone+&#39;c`",71,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `&#39;a: &#39;b+&#39;c`",71,null],[13,"EqPredicate","","An equality predicate (unsupported)",71,null],[4,"MetaItemKind","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",72,null],[13,"List","","List meta item.",72,null],[13,"NameValue","","Name value meta item.",72,null],[4,"BindingMode","","",null,null],[13,"ByRef","","",73,null],[13,"ByValue","","",73,null],[4,"PatKind","","",null,null],[13,"Wild","","Represents a wildcard pattern (`_`)",74,null],[13,"Ident","","A `PatKind::Ident` may either be a new bound variable (`ref mut binding @ OPT_SUBPATTERN`),\nor a unit struct/variant pattern, or a const pattern (in the last two cases the third\nfield must be `None`). Disambiguation cannot be done with parser alone, so it happens\nduring name resolution.",74,null],[13,"Struct","","A struct or struct variant pattern, e.g. `Variant {x, y, ..}`.\nThe `bool` is `true` in the presence of a `..`.",74,null],[13,"TupleStruct","","A tuple struct/variant pattern `Variant(x, y, .., z)`.\nIf the `..` pattern fragment is present, then `Option&lt;usize&gt;` denotes its position.\n0 &lt;= position &lt;= subpats.len()",74,null],[13,"Path","","A possibly qualified path pattern.\nUnquailfied path patterns `A::B::C` can legally refer to variants, structs, constants\nor associated constants. Quailfied path patterns `&lt;A&gt;::B::C`/`&lt;A as Trait&gt;::B::C` can\nonly legally refer to associated constants.",74,null],[13,"Tuple","","A tuple pattern `(a, b)`.\nIf the `..` pattern fragment is present, then `Option&lt;usize&gt;` denotes its position.\n0 &lt;= position &lt;= subpats.len()",74,null],[13,"Box","","A `box` pattern",74,null],[13,"Ref","","A reference pattern, e.g. `&amp;mut (a, b)`",74,null],[13,"Lit","","A literal",74,null],[13,"Range","","A range pattern, e.g. `1...2`",74,null],[13,"Vec","","`[a, b, ..i, y, z]` is represented as:\n`PatKind::Vec(box [a, b], Some(i), box [y, z])`",74,null],[13,"Mac","","A macro pattern; pre-expansion",74,null],[4,"Mutability","","",null,null],[13,"Mutable","","",75,null],[13,"Immutable","","",75,null],[4,"BinOpKind","","",null,null],[13,"Add","","The `+` operator (addition)",76,null],[13,"Sub","","The `-` operator (subtraction)",76,null],[13,"Mul","","The `*` operator (multiplication)",76,null],[13,"Div","","The `/` operator (division)",76,null],[13,"Rem","","The `%` operator (modulus)",76,null],[13,"And","","The `&amp;&amp;` operator (logical and)",76,null],[13,"Or","","The `||` operator (logical or)",76,null],[13,"BitXor","","The `^` operator (bitwise xor)",76,null],[13,"BitAnd","","The `&amp;` operator (bitwise and)",76,null],[13,"BitOr","","The `|` operator (bitwise or)",76,null],[13,"Shl","","The `&lt;&lt;` operator (shift left)",76,null],[13,"Shr","","The `&gt;&gt;` operator (shift right)",76,null],[13,"Eq","","The `==` operator (equality)",76,null],[13,"Lt","","The `&lt;` operator (less than)",76,null],[13,"Le","","The `&lt;=` operator (less than or equal to)",76,null],[13,"Ne","","The `!=` operator (not equal to)",76,null],[13,"Ge","","The `&gt;=` operator (greater than or equal to)",76,null],[13,"Gt","","The `&gt;` operator (greater than)",76,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",77,null],[13,"Not","","The `!` operator for logical inversion",77,null],[13,"Neg","","The `-` operator for negation",77,null],[4,"StmtKind","","",null,null],[13,"Local","","A local (let) binding.",78,null],[13,"Item","","An item definition.",78,null],[13,"Expr","","Expr without trailing semi-colon.",78,null],[13,"Semi","","",78,null],[13,"Mac","","",78,null],[4,"MacStmtStyle","","",null,null],[13,"Semicolon","","The macro statement had a trailing semicolon, e.g. `foo! { ... };`\n`foo!(...);`, `foo![...];`",79,null],[13,"Braces","","The macro statement had braces; e.g. foo! { ... }",79,null],[13,"NoBraces","","The macro statement had parentheses or brackets and no semicolon; e.g.\n`foo!(...)`. All of these will end up being converted into macro\nexpressions.",79,null],[4,"BlockCheckMode","","",null,null],[13,"Default","","",80,null],[13,"Unsafe","","",80,null],[4,"UnsafeSource","","",null,null],[13,"CompilerGenerated","","",81,null],[13,"UserProvided","","",81,null],[4,"RangeLimits","","Limit types of a range (inclusive or exclusive)",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end",82,null],[13,"Closed","","Inclusive at the beginning and end",82,null],[4,"ExprKind","","",null,null],[13,"Box","","A `box x` expression.",83,null],[13,"InPlace","","First expr is the place; second expr is the value.",83,null],[13,"Vec","","An array (`[a, b, c, d]`)",83,null],[13,"Call","","A function call",83,null],[13,"MethodCall","","A method call (`x.foo::&lt;Bar, Baz&gt;(a, b, c, d)`)",83,null],[13,"Tup","","A tuple (`(a, b, c ,d)`)",83,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",83,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",83,null],[13,"Lit","","A literal (For example: `1`, `&quot;foo&quot;`)",83,null],[13,"Cast","","A cast (`foo as f64`)",83,null],[13,"Type","","",83,null],[13,"If","","An `if` block, with an optional else block",83,null],[13,"IfLet","","An `if let` expression with an optional else block",83,null],[13,"While","","A while loop, with an optional label",83,null],[13,"WhileLet","","A while-let loop, with an optional label",83,null],[13,"ForLoop","","A for loop, with an optional label",83,null],[13,"Loop","","Conditionless loop (can be exited with break, continue, or return)",83,null],[13,"Match","","A `match` block.",83,null],[13,"Closure","","A closure (for example, `move |a, b, c| {a + b + c}`)",83,null],[13,"Block","","A block (`{ ... }`)",83,null],[13,"Assign","","An assignment (`a = foo()`)",83,null],[13,"AssignOp","","An assignment with an operator",83,null],[13,"Field","","Access of a named struct field (`obj.foo`)",83,null],[13,"TupField","","Access of an unnamed field of a struct or tuple-struct",83,null],[13,"Index","","An indexing operation (`foo[2]`)",83,null],[13,"Range","","A range (`1..2`, `1..`, `..2`, `1...2`, `1...`, `...2`)",83,null],[13,"Path","","Variable reference, possibly containing `::` and/or type\nparameters, e.g. foo::bar::&lt;baz&gt;.",83,null],[13,"AddrOf","","A referencing operation (`&amp;a` or `&amp;mut a`)",83,null],[13,"Break","","A `break`, with an optional label to break",83,null],[13,"Continue","","A `continue`, with an optional label",83,null],[13,"Ret","","A `return`, with an optional value to be returned",83,null],[13,"InlineAsm","","Output of the `asm!()` macro",83,null],[13,"Mac","","A macro invocation; pre-expansion",83,null],[13,"Struct","","A struct literal expression.",83,null],[13,"Repeat","","An array literal constructed from one repeated element.",83,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",83,null],[13,"Try","","`expr?`",83,null],[4,"CaptureBy","","A capture clause",null,null],[13,"Value","","",84,null],[13,"Ref","","",84,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `&quot;foo&quot;`",85,null],[13,"Raw","","A raw string, like `r##&quot;foo&quot;##`",85,null],[4,"LitIntType","","",null,null],[13,"Signed","","",86,null],[13,"Unsigned","","",86,null],[13,"Unsuffixed","","",86,null],[4,"LitKind","","Literal kind.",null,null],[13,"Str","","A string literal (`&quot;foo&quot;`)",87,null],[13,"ByteStr","","A byte string (`b&quot;foo&quot;`)",87,null],[13,"Byte","","A byte char (`b&#39;f&#39;`)",87,null],[13,"Char","","A character literal (`&#39;a&#39;`)",87,null],[13,"Int","","An integer literal (`1`)",87,null],[13,"Float","","A float literal (`1f64` or `1E10f64`)",87,null],[13,"FloatUnsuffixed","","A float literal without a suffix (`1.0 or 1.0E10`)",87,null],[13,"Bool","","A boolean literal",87,null],[4,"TraitItemKind","","",null,null],[13,"Const","","",88,null],[13,"Method","","",88,null],[13,"Type","","",88,null],[13,"Macro","","",88,null],[4,"ImplItemKind","","",null,null],[13,"Const","","",89,null],[13,"Method","","",89,null],[13,"Type","","",89,null],[13,"Macro","","",89,null],[4,"IntTy","","",null,null],[13,"Is","","",90,null],[13,"I8","","",90,null],[13,"I16","","",90,null],[13,"I32","","",90,null],[13,"I64","","",90,null],[4,"UintTy","","",null,null],[13,"Us","","",91,null],[13,"U8","","",91,null],[13,"U16","","",91,null],[13,"U32","","",91,null],[13,"U64","","",91,null],[4,"FloatTy","","",null,null],[13,"F32","","",92,null],[13,"F64","","",92,null],[4,"TyKind","","The different kinds of types recognized by the compiler",null,null],[13,"Vec","","",93,null],[13,"FixedLengthVec","","A fixed length array (`[T; n]`)",93,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",93,null],[13,"Rptr","","A reference (`&amp;&#39;a T` or `&amp;&#39;a mut T`)",93,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -&gt; bool`)",93,null],[13,"Tup","","A tuple (`(A, B, C, D,...)`)",93,null],[13,"Path","","A path (`module::module::...::Type`), optionally\n&quot;qualified&quot;, e.g. `&lt;Vec&lt;T&gt; as SomeTrait&gt;::SomeType`.",93,null],[13,"ObjectSum","","Something like `A+B`. Note that `B` must always be a path.",93,null],[13,"PolyTraitRef","","A type like `for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a Bar&gt;`",93,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",93,null],[13,"Typeof","","Unused for now",93,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been\nspecified. This can appear anywhere in a type.",93,null],[13,"ImplicitSelf","","Inferred type of a `self` or `&amp;self` argument in a method.",93,null],[13,"Mac","","",93,null],[4,"AsmDialect","","Inline assembly dialect.",null,null],[13,"Att","","",94,null],[13,"Intel","","",94,null],[4,"SelfKind","","Alternative representation for `Arg`s describing `self` parameter of methods.",null,null],[13,"Value","","`self`, `mut self`",95,null],[13,"Region","","`&amp;&#39;lt self`, `&amp;&#39;lt mut self`",95,null],[13,"Explicit","","`self: TYPE`, `mut self: TYPE`",95,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",96,null],[13,"Normal","","",96,null],[4,"Constness","","",null,null],[13,"Const","","",97,null],[13,"NotConst","","",97,null],[4,"Defaultness","","",null,null],[13,"Default","","",98,null],[13,"Final","","",98,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",99,null],[13,"Negative","","`impl !Trait for Type`",99,null],[4,"FunctionRetTy","","",null,null],[13,"None","","Functions with return type `!`that always\nraise an error or exit (i.e. never return to the caller)",100,null],[13,"Default","","Return type is not specified.",100,null],[13,"Ty","","Everything else",100,null],[4,"PathListItemKind","","",null,null],[13,"Ident","","",101,null],[12,"name","syntex_syntax::ast::PathListItemKind","",101,null],[12,"rename","","renamed in list, e.g. `use foo::{bar as baz};`",101,null],[12,"id","","",101,null],[13,"Mod","syntex_syntax::ast","",101,null],[12,"rename","syntex_syntax::ast::PathListItemKind","renamed in list, e.g. `use foo::{self as baz};`",101,null],[12,"id","","",101,null],[4,"ViewPath_","syntex_syntax::ast","",null,null],[13,"ViewPathSimple","","`foo::bar::baz as quux`",102,null],[13,"ViewPathGlob","","`foo::bar::*`",102,null],[13,"ViewPathList","","`foo::bar::{a,b,c}`",102,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that\nare contained as statements within items. These two cases need to be\ndistinguished for pretty-printing.",null,null],[13,"Outer","","",103,null],[13,"Inner","","",103,null],[4,"Visibility","","",null,null],[13,"Public","","",104,null],[13,"Crate","","",104,null],[13,"Restricted","","",104,null],[12,"path","syntex_syntax::ast::Visibility","",104,null],[12,"id","","",104,null],[13,"Inherited","syntex_syntax::ast","",104,null],[4,"VariantData","","Fields and Ids of enum variants and structs",null,null],[13,"Struct","","Struct variant.",105,null],[13,"Tuple","","Tuple variant.",105,null],[13,"Unit","","Unit variant.",105,null],[4,"ItemKind","","",null,null],[13,"ExternCrate","","An`extern crate` item, with optional original crate name.",106,null],[13,"Use","","A use declaration (`use` or `pub use`) item.",106,null],[13,"Static","","A static item (`static` or `pub static`).",106,null],[13,"Const","","A constant item (`const` or `pub const`).",106,null],[13,"Fn","","A function declaration (`fn` or `pub fn`).",106,null],[13,"Mod","","A module declaration (`mod` or `pub mod`).",106,null],[13,"ForeignMod","","An external module (`extern` or `pub extern`).",106,null],[13,"Ty","","A type alias (`type` or `pub type`).",106,null],[13,"Enum","","An enum definition (`enum` or `pub enum`).",106,null],[13,"Struct","","A struct definition (`struct` or `pub struct`).",106,null],[13,"Trait","","A Trait declaration (`trait` or `pub trait`).",106,null],[13,"DefaultImpl","","",106,null],[13,"Impl","","An implementation.",106,null],[13,"Mac","","A macro invocation (which includes macro definition).",106,null],[4,"ForeignItemKind","","An item within an `extern` block",null,null],[13,"Fn","","A foreign function",107,null],[13,"Static","","A foreign static item (`static ext: u8`), with optional mutability\n(the boolean is true when mutable)",107,null],[6,"Mrk","","A mark represents a unique id associated with a macro expansion",null,null],[6,"CrateNum","","",null,null],[6,"NodeId","","",null,null],[6,"TyParamBounds","","",null,null],[6,"CrateConfig","","The set of MetaItems that define the compilation environment of the crate,\nused to drive conditional compilation",null,null],[6,"MetaItem","","A spanned compile-time attribute item.",null,null],[6,"BinOp","","",null,null],[6,"SpannedIdent","","",null,null],[6,"Mac","","",null,null],[6,"Lit","","A literal",null,null],[6,"ExplicitSelf","","",null,null],[6,"Variant","","",null,null],[6,"PathListItem","","",null,null],[6,"ViewPath","","",null,null],[6,"Attribute","","Meta-data associated with an item",null,null],[17,"EMPTY_CTXT","","",null,null],[17,"CRATE_NODE_ID","","Node id used to represent the root of the crate.",null,null],[17,"DUMMY_NODE_ID","","When parsing and doing expansions, we initially give all AST nodes this AST\nnode value. Then later, in the renumber pass, we renumber them to have\nsmall, positive ids.",null,null],[11,"hash","","",19,null],[11,"cmp","","",19,null],[11,"partial_cmp","","",19,null],[11,"lt","","",19,null],[11,"le","","",19,null],[11,"gt","","",19,null],[11,"ge","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"clone","","",19,null],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",20,null],[11,"fmt","","",20,null],[11,"hash","","",20,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"as_str","","",19,null],[11,"fmt","","",19,null],[11,"fmt","","",19,null],[11,"encode","","",19,null],[11,"decode","","",19,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","",21,{"inputs":[{"name":"name"},{"name":"syntaxcontext"}],"output":{"name":"ident"}}],[11,"with_empty_ctxt","","",21,{"inputs":[{"name":"name"}],"output":{"name":"ident"}}],[11,"eq","","",21,null],[11,"hash","","",21,null],[11,"fmt","","",21,null],[11,"fmt","","",21,null],[11,"encode","","",21,null],[11,"decode","","",21,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",22,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"clone","","",22,null],[11,"fmt","","",22,null],[11,"fmt","","",23,null],[11,"hash","","",23,null],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",23,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"clone","","",23,null],[11,"hash","","",24,null],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",24,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"fmt","","",24,null],[11,"from_ident","","",24,{"inputs":[{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[11,"fmt","","",25,null],[11,"hash","","",25,null],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",25,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"clone","","",25,null],[11,"fmt","","",68,null],[11,"hash","","",68,null],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"none","","",68,{"inputs":[],"output":{"name":"pathparameters"}}],[11,"is_empty","","",68,null],[11,"has_lifetimes","","",68,null],[11,"has_types","","",68,null],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",68,null],[11,"lifetimes","","",68,null],[11,"bindings","","",68,null],[11,"fmt","","",26,null],[11,"hash","","",26,null],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"clone","","",26,null],[11,"fmt","","",27,null],[11,"hash","","",27,null],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"clone","","",27,null],[11,"fmt","","",69,null],[11,"hash","","",69,null],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",70,null],[11,"hash","","",70,null],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",70,null],[11,"eq","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",28,null],[11,"hash","","",28,null],[11,"decode","","",28,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"clone","","",28,null],[11,"fmt","","",29,null],[11,"hash","","",29,null],[11,"decode","","",29,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",29,null],[11,"eq","","",29,null],[11,"ne","","",29,null],[11,"clone","","",29,null],[11,"is_lt_parameterized","","",29,null],[11,"is_type_parameterized","","",29,null],[11,"is_parameterized","","",29,null],[11,"default","","",29,{"inputs":[],"output":{"name":"generics"}}],[11,"fmt","","",30,null],[11,"hash","","",30,null],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"clone","","",30,null],[11,"fmt","","",71,null],[11,"hash","","",71,null],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",71,null],[11,"eq","","",71,null],[11,"ne","","",71,null],[11,"clone","","",71,null],[11,"fmt","","",31,null],[11,"hash","","",31,null],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"clone","","",31,null],[11,"fmt","","",32,null],[11,"hash","","",32,null],[11,"decode","","",32,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"clone","","",32,null],[11,"fmt","","",33,null],[11,"hash","","",33,null],[11,"decode","","",33,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"clone","","",33,null],[11,"fmt","","",34,null],[11,"hash","","",34,null],[11,"decode","","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",34,null],[11,"eq","","",34,null],[11,"ne","","",34,null],[11,"clone","","",34,null],[11,"fmt","","",72,null],[11,"hash","","",72,null],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",72,null],[11,"clone","","",72,null],[11,"eq","","",72,null],[11,"fmt","","",35,null],[11,"hash","","",35,null],[11,"decode","","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",35,null],[11,"eq","","",35,null],[11,"ne","","",35,null],[11,"clone","","",35,null],[11,"hash","","",36,null],[11,"decode","","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",36,null],[11,"eq","","",36,null],[11,"ne","","",36,null],[11,"clone","","",36,null],[11,"fmt","","",36,null],[11,"walk","","",36,null],[11,"fmt","","",37,null],[11,"hash","","",37,null],[11,"decode","","",37,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",37,null],[11,"eq","","",37,null],[11,"ne","","",37,null],[11,"clone","","",37,null],[11,"fmt","","",73,null],[11,"hash","","",73,null],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",74,null],[11,"hash","","",74,null],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",74,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"clone","","",74,null],[11,"fmt","","",75,null],[11,"hash","","",75,null],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",75,null],[11,"eq","","",75,null],[11,"clone","","",75,null],[11,"fmt","","",76,null],[11,"hash","","",76,null],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",76,null],[11,"eq","","",76,null],[11,"clone","","",76,null],[11,"to_string","","",76,null],[11,"lazy","","",76,null],[11,"is_shift","","",76,null],[11,"is_comparison","","",76,null],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",76,null],[11,"fmt","","",77,null],[11,"hash","","",77,null],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",77,null],[11,"eq","","",77,null],[11,"clone","","",77,null],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",77,{"inputs":[{"name":"unop"}],"output":{"name":"bool"}}],[11,"to_string","","",77,{"inputs":[{"name":"unop"}],"output":{"name":"str"}}],[11,"hash","","",38,null],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",38,null],[11,"eq","","",38,null],[11,"ne","","",38,null],[11,"clone","","",38,null],[11,"fmt","","",38,null],[11,"hash","","",78,null],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",78,null],[11,"eq","","",78,null],[11,"ne","","",78,null],[11,"clone","","",78,null],[11,"fmt","","",79,null],[11,"hash","","",79,null],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",79,null],[11,"eq","","",79,null],[11,"clone","","",79,null],[11,"fmt","","",39,null],[11,"hash","","",39,null],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",39,null],[11,"eq","","",39,null],[11,"ne","","",39,null],[11,"clone","","",39,null],[11,"fmt","","",40,null],[11,"hash","","",40,null],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"clone","","",40,null],[11,"fmt","","",41,null],[11,"hash","","",41,null],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",41,null],[11,"eq","","",41,null],[11,"ne","","",41,null],[11,"clone","","",41,null],[11,"fmt","","",80,null],[11,"hash","","",80,null],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",80,null],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"clone","","",80,null],[11,"fmt","","",81,null],[11,"hash","","",81,null],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",81,null],[11,"eq","","",81,null],[11,"clone","","",81,null],[11,"hash","","",42,null],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",42,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"clone","","",42,null],[11,"fmt","","",42,null],[11,"fmt","","",82,null],[11,"hash","","",82,null],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",82,null],[11,"eq","","",82,null],[11,"clone","","",82,null],[11,"fmt","","",83,null],[11,"hash","","",83,null],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",43,null],[11,"hash","","",43,null],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",43,null],[11,"eq","","",43,null],[11,"ne","","",43,null],[11,"clone","","",43,null],[11,"fmt","","",84,null],[11,"hash","","",84,null],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",84,null],[11,"eq","","",84,null],[11,"clone","","",84,null],[11,"fmt","","",44,null],[11,"hash","","",44,null],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",44,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"clone","","",44,null],[11,"fmt","","",85,null],[11,"hash","","",85,null],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"clone","","",85,null],[11,"fmt","","",86,null],[11,"hash","","",86,null],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"clone","","",86,null],[11,"fmt","","",87,null],[11,"hash","","",87,null],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",87,null],[11,"eq","","",87,null],[11,"ne","","",87,null],[11,"clone","","",87,null],[11,"is_str","","Returns true if this literal is a string and false otherwise.",87,null],[11,"fmt","","",45,null],[11,"hash","","",45,null],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"clone","","",45,null],[11,"fmt","","",46,null],[11,"hash","","",46,null],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"clone","","",46,null],[11,"fmt","","",47,null],[11,"hash","","",47,null],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"clone","","",47,null],[11,"fmt","","",88,null],[11,"hash","","",88,null],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",88,null],[11,"eq","","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",48,null],[11,"hash","","",48,null],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"clone","","",48,null],[11,"fmt","","",89,null],[11,"hash","","",89,null],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"clone","","",89,null],[11,"hash","","",90,null],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",90,null],[11,"eq","","",90,null],[11,"clone","","",90,null],[11,"fmt","","",90,null],[11,"fmt","","",90,null],[11,"ty_to_string","","",90,null],[11,"val_to_string","","",90,null],[11,"ty_max","","",90,null],[11,"bit_width","","",90,null],[11,"hash","","",91,null],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",91,null],[11,"eq","","",91,null],[11,"clone","","",91,null],[11,"ty_to_string","","",91,null],[11,"val_to_string","","",91,null],[11,"ty_max","","",91,null],[11,"bit_width","","",91,null],[11,"fmt","","",91,null],[11,"fmt","","",91,null],[11,"hash","","",92,null],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",92,null],[11,"eq","","",92,null],[11,"clone","","",92,null],[11,"fmt","","",92,null],[11,"fmt","","",92,null],[11,"ty_to_string","","",92,null],[11,"bit_width","","",92,null],[11,"fmt","","",49,null],[11,"hash","","",49,null],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",49,null],[11,"eq","","",49,null],[11,"ne","","",49,null],[11,"clone","","",49,null],[11,"hash","","",50,null],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",50,null],[11,"eq","","",50,null],[11,"ne","","",50,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"fmt","","",51,null],[11,"hash","","",51,null],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",51,null],[11,"eq","","",51,null],[11,"ne","","",51,null],[11,"clone","","",51,null],[11,"fmt","","",93,null],[11,"hash","","",93,null],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",93,null],[11,"eq","","",93,null],[11,"ne","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",94,null],[11,"hash","","",94,null],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",94,null],[11,"eq","","",94,null],[11,"clone","","",94,null],[11,"fmt","","",52,null],[11,"hash","","",52,null],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",52,null],[11,"eq","","",52,null],[11,"ne","","",52,null],[11,"clone","","",52,null],[11,"fmt","","",53,null],[11,"hash","","",53,null],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"clone","","",53,null],[11,"fmt","","",54,null],[11,"hash","","",54,null],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",54,null],[11,"eq","","",54,null],[11,"ne","","",54,null],[11,"clone","","",54,null],[11,"fmt","","",95,null],[11,"hash","","",95,null],[11,"decode","","",95,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",95,null],[11,"eq","","",95,null],[11,"ne","","",95,null],[11,"clone","","",95,null],[11,"to_self","","",54,null],[11,"is_self","","",54,null],[11,"from_self","","",54,{"inputs":[{"name":"explicitself"},{"name":"spannedident"}],"output":{"name":"arg"}}],[11,"fmt","","",55,null],[11,"hash","","",55,null],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"clone","","",55,null],[11,"get_self","","",55,null],[11,"has_self","","",55,null],[11,"fmt","","",96,null],[11,"hash","","",96,null],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",96,null],[11,"eq","","",96,null],[11,"clone","","",96,null],[11,"fmt","","",97,null],[11,"hash","","",97,null],[11,"decode","","",97,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",97,null],[11,"eq","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",98,null],[11,"hash","","",98,null],[11,"decode","","",98,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",98,null],[11,"eq","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",96,null],[11,"hash","","",99,null],[11,"decode","","",99,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",99,null],[11,"eq","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",99,null],[11,"fmt","","",100,null],[11,"hash","","",100,null],[11,"decode","","",100,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",100,null],[11,"eq","","",100,null],[11,"ne","","",100,null],[11,"clone","","",100,null],[11,"span","","",100,null],[11,"fmt","","",56,null],[11,"hash","","",56,null],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",56,null],[11,"eq","","",56,null],[11,"ne","","",56,null],[11,"clone","","",56,null],[11,"fmt","","",57,null],[11,"hash","","",57,null],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"clone","","",57,null],[11,"fmt","","",58,null],[11,"hash","","",58,null],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"clone","","",58,null],[11,"fmt","","",59,null],[11,"hash","","",59,null],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"clone","","",59,null],[11,"fmt","","",101,null],[11,"hash","","",101,null],[11,"decode","","",101,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",101,null],[11,"eq","","",101,null],[11,"ne","","",101,null],[11,"clone","","",101,null],[11,"id","","",101,null],[11,"name","","",101,null],[11,"rename","","",101,null],[11,"fmt","","",102,null],[11,"hash","","",102,null],[11,"decode","","",102,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",102,null],[11,"eq","","",102,null],[11,"ne","","",102,null],[11,"clone","","",102,null],[11,"path","","",102,null],[11,"fmt","","",103,null],[11,"hash","","",103,null],[11,"decode","","",103,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",103,null],[11,"eq","","",103,null],[11,"clone","","",103,null],[11,"fmt","","",60,null],[11,"hash","","",60,null],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"clone","","",60,null],[11,"fmt","","",61,null],[11,"hash","","",61,null],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"clone","","",61,null],[11,"fmt","","",62,null],[11,"hash","","",62,null],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",62,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"clone","","",62,null],[11,"fmt","","",63,null],[11,"hash","","",63,null],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"fmt","","",104,null],[11,"hash","","",104,null],[11,"decode","","",104,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",104,null],[11,"eq","","",104,null],[11,"ne","","",104,null],[11,"clone","","",104,null],[11,"fmt","","",64,null],[11,"hash","","",64,null],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",105,null],[11,"hash","","",105,null],[11,"decode","","",105,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",105,null],[11,"eq","","",105,null],[11,"ne","","",105,null],[11,"clone","","",105,null],[11,"fields","","",105,null],[11,"id","","",105,null],[11,"is_struct","","",105,null],[11,"is_tuple","","",105,null],[11,"is_unit","","",105,null],[11,"fmt","","",65,null],[11,"hash","","",65,null],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",65,null],[11,"eq","","",65,null],[11,"ne","","",65,null],[11,"clone","","",65,null],[11,"fmt","","",106,null],[11,"hash","","",106,null],[11,"decode","","",106,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",106,null],[11,"eq","","",106,null],[11,"ne","","",106,null],[11,"clone","","",106,null],[11,"descriptive_variant","","",106,null],[11,"fmt","","",66,null],[11,"hash","","",66,null],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",66,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"clone","","",66,null],[11,"fmt","","",107,null],[11,"hash","","",107,null],[11,"decode","","",107,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",107,null],[11,"eq","","",107,null],[11,"ne","","",107,null],[11,"clone","","",107,null],[11,"descriptive_variant","","",107,null],[11,"fmt","","",67,null],[11,"hash","","",67,null],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",67,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"clone","","",67,null],[0,"attr","syntex_syntax","",null,null],[3,"Stability","syntex_syntax::attr","Represents the #[stable], #[unstable] and #[rustc_deprecated] attributes.",null,null],[12,"level","","",108,null],[12,"feature","","",108,null],[12,"rustc_depr","","",108,null],[3,"RustcDeprecation","","",null,null],[12,"since","","",109,null],[12,"reason","","",109,null],[3,"Deprecation","","",null,null],[12,"since","","",110,null],[12,"note","","",110,null],[4,"InlineAttr","","",null,null],[13,"None","","",111,null],[13,"Hint","","",111,null],[13,"Always","","",111,null],[13,"Never","","",111,null],[4,"StabilityLevel","","The available stability levels.",null,null],[13,"Unstable","","",112,null],[12,"reason","syntex_syntax::attr::StabilityLevel","",112,null],[12,"issue","","",112,null],[13,"Stable","syntex_syntax::attr","",112,null],[12,"since","syntex_syntax::attr::StabilityLevel","",112,null],[4,"ReprAttr","syntex_syntax::attr","",null,null],[13,"ReprAny","","",113,null],[13,"ReprInt","","",113,null],[13,"ReprExtern","","",113,null],[13,"ReprPacked","","",113,null],[13,"ReprSimd","","",113,null],[4,"IntType","","",null,null],[13,"SignedInt","","",114,null],[13,"UnsignedInt","","",114,null],[5,"mark_used","","",null,{"inputs":[{"name":"attribute"}],"output":null}],[5,"is_used","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[5,"mk_name_value_item_str","","",null,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"p"}}],[5,"mk_name_value_item","","",null,{"inputs":[{"name":"internedstring"},{"name":"lit"}],"output":{"name":"p"}}],[5,"mk_list_item","","",null,{"inputs":[{"name":"internedstring"},{"name":"vec"}],"output":{"name":"p"}}],[5,"mk_word_item","","",null,{"inputs":[{"name":"internedstring"}],"output":{"name":"p"}}],[5,"mk_attr_id","","",null,{"inputs":[],"output":{"name":"attrid"}}],[5,"mk_attr_inner","","Returns an inner attribute with the given value.",null,{"inputs":[{"name":"attrid"},{"name":"p"}],"output":{"name":"attribute"}}],[5,"mk_attr_outer","","Returns an outer attribute with the given value.",null,{"inputs":[{"name":"attrid"},{"name":"p"}],"output":{"name":"attribute"}}],[5,"mk_sugared_doc_attr","","",null,{"inputs":[{"name":"attrid"},{"name":"internedstring"},{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"attribute"}}],[5,"contains","","Check if `needle` occurs in `haystack` by a structural\ncomparison. This is slightly subtle, and relies on ignoring the\nspan included in the `==` comparison a plain MetaItem.",null,null],[5,"contains_name","","",null,null],[5,"first_attr_value_str_by_name","","",null,null],[5,"last_meta_item_value_str_by_name","","",null,null],[5,"sort_meta_items","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[5,"find_crate_name","","",null,null],[5,"find_export_name_attr","","Find the value of #[export_name=*] attribute and check its validity.",null,null],[5,"contains_extern_indicator","","",null,null],[5,"find_inline_attr","","Determine what `#[inline]` attribute is present in `attrs`, if any.",null,null],[5,"requests_inline","","True if `#[inline]` or `#[inline(always)]` is present in `attrs`.",null,null],[5,"cfg_matches","","Tests if a cfg-pattern matches the cfg set",null,null],[5,"find_stability","","Find the first stability attribute. `None` if none exists.",null,null],[5,"find_deprecation","","Find the deprecation attribute. `None` if none exists.",null,null],[5,"require_unique_names","","",null,null],[5,"find_repr_attrs","","Parse #[repr(...)] forms.",null,{"inputs":[{"name":"handler"},{"name":"attribute"}],"output":{"name":"vec"}}],[8,"AttrMetaMethods","","",null,null],[11,"check_name","","",115,null],[10,"name","","Retrieve the name of the meta item, e.g. `foo` in `#[foo]`,\n`#[foo=&quot;bar&quot;]` and `#[foo(bar)]`",115,null],[10,"value_str","","Gets the string value if self is a MetaItemKind::NameValue variant\ncontaining a string, otherwise None.",115,null],[10,"meta_item_list","","Gets a list of inner meta items from a list MetaItem type.",115,null],[10,"span","","",115,null],[8,"AttributeMethods","","",null,null],[10,"meta","","",116,null],[10,"with_desugared_doc","","",116,null],[8,"HasAttrs","","",null,null],[10,"attrs","","",117,null],[10,"map_attrs","","",117,null],[11,"check_name","","",118,null],[11,"name","","",118,null],[11,"value_str","","",118,null],[11,"meta_item_list","","",118,null],[11,"span","","",118,null],[11,"name","","",119,null],[11,"value_str","","",119,null],[11,"meta_item_list","","",119,null],[11,"span","","",119,null],[11,"meta","","Extract the MetaItem from inside this Attribute.",118,null],[11,"with_desugared_doc","","Convert self to a normal #[doc=&quot;foo&quot;] comment, if it is a\ncomment like `///` or `/** */`. (Returns self unchanged for\nnon-sugared doc attributes.)",118,null],[11,"eq","","",111,null],[11,"clone","","",111,null],[11,"hash","","",108,null],[11,"eq","","",108,null],[11,"ne","","",108,null],[11,"fmt","","",108,null],[11,"clone","","",108,null],[11,"decode","","",108,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",108,null],[11,"hash","","",112,null],[11,"fmt","","",112,null],[11,"clone","","",112,null],[11,"partial_cmp","","",112,null],[11,"lt","","",112,null],[11,"le","","",112,null],[11,"gt","","",112,null],[11,"ge","","",112,null],[11,"eq","","",112,null],[11,"ne","","",112,null],[11,"decode","","",112,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",112,null],[11,"hash","","",109,null],[11,"fmt","","",109,null],[11,"clone","","",109,null],[11,"partial_cmp","","",109,null],[11,"lt","","",109,null],[11,"le","","",109,null],[11,"gt","","",109,null],[11,"ge","","",109,null],[11,"eq","","",109,null],[11,"ne","","",109,null],[11,"decode","","",109,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",109,null],[11,"hash","","",110,null],[11,"fmt","","",110,null],[11,"clone","","",110,null],[11,"partial_cmp","","",110,null],[11,"lt","","",110,null],[11,"le","","",110,null],[11,"gt","","",110,null],[11,"ge","","",110,null],[11,"eq","","",110,null],[11,"ne","","",110,null],[11,"decode","","",110,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",110,null],[11,"is_unstable","","",112,null],[11,"is_stable","","",112,null],[11,"clone","","",113,null],[11,"decode","","",113,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",113,null],[11,"fmt","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"is_ffi_safe","","",113,null],[11,"clone","","",114,null],[11,"decode","","",114,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",114,null],[11,"fmt","","",114,null],[11,"eq","","",114,null],[11,"ne","","",114,null],[11,"hash","","",114,null],[11,"is_signed","","",114,null],[11,"attrs","syntex_syntax::util","",12,null],[11,"map_attrs","","",12,null],[11,"attrs","syntex_syntax::ast","",78,null],[11,"map_attrs","","",78,null],[11,"attrs","","",65,null],[11,"map_attrs","","",65,null],[11,"attrs","","",42,null],[11,"map_attrs","","",42,null],[11,"attrs","","",39,null],[11,"map_attrs","","",39,null],[11,"attrs","","",66,null],[11,"map_attrs","","",66,null],[11,"attrs","","",64,null],[11,"map_attrs","","",64,null],[11,"attrs","","",48,null],[11,"map_attrs","","",48,null],[11,"attrs","","",47,null],[11,"map_attrs","","",47,null],[11,"attrs","","",40,null],[11,"map_attrs","","",40,null],[11,"attrs","","",38,null],[11,"map_attrs","","",38,null],[11,"attrs","syntex_syntax::attr","",120,null],[11,"map_attrs","","",120,null],[0,"codemap","syntex_syntax","The CodeMap tracks all the source code used within a single crate, mapping\nfrom integer byte positions to the original source code location. Each bit\nof source parsed during crate parsing (typically files, in-memory strings,\nor various bits of macro expansion) cover a continuous range of bytes in the\nCodeMap and are represented by FileMaps. Byte positions are stored in\n`spans` and used pervasively in the compiler. They are absolute positions\nwithin the CodeMap, which upon request can be converted to line and column\ninformation, source code snippets, etc.",null,null],[3,"Spanned","syntex_syntax::codemap","",null,null],[12,"node","","",121,null],[12,"span","","",121,null],[3,"NameAndSpan","","",null,null],[12,"format","","The format with which the macro was invoked.",122,null],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated\nfeatures internally without forcing the whole crate to opt-in\nto them.",122,null],[12,"span","","The span of the macro definition itself. The macro may not\nhave a sensible definition span (e.g. something defined\ncompletely inside libsyntax) in which case this is None.",122,null],[3,"ExpnInfo","","Extra information for tracking spans of macro and syntax sugar expansion",null,null],[12,"call_site","","The location of the actual macro invocation or syntax sugar , e.g.\n`let x = foo!();` or `if let Some(y) = x {}`",123,null],[12,"callee","","Information about the expansion.",123,null],[3,"RealFileLoader","","A FileLoader that uses std::fs to load real files.",null,null],[3,"CodeMap","","",null,null],[12,"files","","",124,null],[4,"ExpnFormat","","The source of expansion.",null,null],[13,"MacroAttribute","","e.g. #[derive(...)] &lt;item&gt;",125,null],[13,"MacroBang","","e.g. `format!()`",125,null],[5,"original_sp","","Return the span itself if it doesn&#39;t come from a macro expansion,\notherwise return the call site span up to the `enclosing_sp` by\nfollowing the `expn_info` chain.",null,{"inputs":[{"name":"codemap"},{"name":"span"},{"name":"span"}],"output":{"name":"span"}}],[5,"spanned","","",null,{"inputs":[{"name":"bytepos"},{"name":"bytepos"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"respan","","",null,{"inputs":[{"name":"span"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"dummy_spanned","","",null,{"inputs":[{"name":"t"}],"output":{"name":"spanned"}}],[8,"FileLoader","","An abstraction over the fs operations used by the Parser.",null,null],[10,"file_exists","","Query the existence of a file.",126,null],[10,"abs_path","","Return an absolute path to a file, if possible.",126,null],[10,"read_file","","Read the contents of an UTF-8 file into memory.",126,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"fmt","","",125,null],[11,"hash","","",125,null],[11,"clone","","",125,null],[11,"fmt","","",121,null],[11,"hash","","",121,null],[11,"decode","","",121,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",121,null],[11,"eq","","",121,null],[11,"ne","","",121,null],[11,"clone","","",121,null],[11,"fmt","","",122,null],[11,"hash","","",122,null],[11,"clone","","",122,null],[11,"name","","",122,null],[11,"fmt","","",123,null],[11,"hash","","",123,null],[11,"file_exists","","",127,null],[11,"abs_path","","",127,null],[11,"read_file","","",127,null],[11,"new","","",124,{"inputs":[],"output":{"name":"codemap"}}],[11,"with_file_loader","","",124,{"inputs":[{"name":"box"}],"output":{"name":"codemap"}}],[11,"file_exists","","",124,null],[11,"load_file","","",124,null],[11,"new_filemap","","Creates a new filemap without setting its line information. If you don&#39;t\nintend to set the line information yourself, you should use new_filemap_and_lines.",124,null],[11,"new_filemap_and_lines","","Creates a new filemap and sets its line information.",124,null],[11,"new_imported_filemap","","Allocates a new FileMap representing a source file from an external\ncrate. The source code of such an &quot;imported filemap&quot; is not available,\nbut we still know enough to generate accurate debuginfo location\ninformation for things inlined from other crates.",124,null],[11,"mk_substr_filename","","",124,null],[11,"lookup_char_pos","","Lookup source information about a BytePos",124,null],[11,"lookup_char_pos_adj","","",124,null],[11,"span_to_string","","",124,null],[11,"span_to_expanded_string","","Returns a formatted string showing the expansion chain of a span",124,null],[11,"source_callsite","","Return the source span - this is either the supplied span, or the span for\nthe macro callsite that expanded to it.",124,null],[11,"source_callee","","Return the source callee.",124,null],[11,"span_to_filename","","",124,null],[11,"span_to_lines","","",124,null],[11,"span_to_snippet","","",124,null],[11,"get_filemap","","",124,null],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",124,null],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap.",124,null],[11,"record_expansion","","",124,null],[11,"with_expn_info","","",124,null],[11,"span_allows_unstable","","Check if a span is &quot;internal&quot; to a macro in which #[unstable]\nitems can be used (that is, a macro marked with\n`#[allow_internal_unstable]`).",124,null],[11,"count_lines","","",124,null],[11,"macro_backtrace","","",124,null],[11,"lookup_char_pos","","",124,null],[11,"span_to_lines","","",124,null],[11,"span_to_string","","",124,null],[11,"span_to_filename","","",124,null],[11,"macro_backtrace","","",124,null],[0,"config","syntex_syntax","",null,null],[3,"StripUnconfigured","syntex_syntax::config","A folder that strips out items that do not belong in the current configuration.",null,null],[12,"config","","",128,null],[12,"should_test","","",128,null],[12,"sess","","",128,null],[12,"features","","",128,null],[5,"strip_unconfigured_items","","",null,null],[11,"process_cfg_attrs","","",128,null],[11,"fold_foreign_mod","","",128,null],[11,"fold_item_kind","","",128,null],[11,"fold_expr","","",128,null],[11,"fold_opt_expr","","",128,null],[11,"fold_stmt","","",128,null],[11,"fold_mac","","",128,null],[11,"fold_item","","",128,null],[11,"fold_impl_item","","",128,null],[11,"fold_trait_item","","",128,null],[11,"fold_interpolated","","",128,null],[0,"entry","syntex_syntax","",null,null],[4,"EntryPointType","syntex_syntax::entry","",null,null],[13,"None","","",129,null],[13,"MainNamed","","",129,null],[13,"MainAttr","","",129,null],[13,"Start","","",129,null],[13,"OtherMain","","",129,null],[5,"entry_point_type","","",null,{"inputs":[{"name":"item"},{"name":"usize"}],"output":{"name":"entrypointtype"}}],[0,"feature_gate","syntex_syntax","Feature gating",null,null],[3,"Features","syntex_syntax::feature_gate","A set of features to be used by later passes.",null,null],[12,"declared_stable_lang_features","","#![feature] attrs for stable language features, for error reporting",130,null],[12,"declared_lib_features","","#![feature] attrs for non-language (library) features",130,null],[12,"asm","","",130,null],[12,"concat_idents","","",130,null],[12,"link_args","","",130,null],[12,"log_syntax","","",130,null],[12,"non_ascii_idents","","",130,null],[12,"plugin_registrar","","",130,null],[12,"thread_local","","",130,null],[12,"trace_macros","","",130,null],[12,"intrinsics","","",130,null],[12,"lang_items","","",130,null],[12,"link_llvm_intrinsics","","",130,null],[12,"linkage","","",130,null],[12,"quote","","",130,null],[12,"simd","","",130,null],[12,"rustc_diagnostic_macros","","",130,null],[12,"advanced_slice_patterns","","",130,null],[12,"box_syntax","","",130,null],[12,"placement_in_syntax","","",130,null],[12,"reflect","","",130,null],[12,"unboxed_closures","","",130,null],[12,"pushpop_unsafe","","",130,null],[12,"allocator","","",130,null],[12,"fundamental","","",130,null],[12,"linked_from","","",130,null],[12,"main","","",130,null],[12,"needs_allocator","","",130,null],[12,"on_unimplemented","","",130,null],[12,"plugin","","",130,null],[12,"simd_ffi","","",130,null],[12,"start","","",130,null],[12,"structural_match","","",130,null],[12,"panic_runtime","","",130,null],[12,"needs_panic_runtime","","",130,null],[12,"optin_builtin_traits","","",130,null],[12,"macro_reexport","","",130,null],[12,"staged_api","","",130,null],[12,"unmarked_api","","",130,null],[12,"no_core","","",130,null],[12,"box_patterns","","",130,null],[12,"unsafe_no_drop_flag","","",130,null],[12,"dropck_parametricity","","",130,null],[12,"custom_attribute","","",130,null],[12,"custom_derive","","",130,null],[12,"rustc_attrs","","",130,null],[12,"allow_internal_unstable","","",130,null],[12,"slice_patterns","","",130,null],[12,"associated_consts","","",130,null],[12,"const_fn","","",130,null],[12,"const_indexing","","",130,null],[12,"prelude_import","","",130,null],[12,"static_recursion","","",130,null],[12,"default_type_parameter_fallback","","",130,null],[12,"associated_type_defaults","","",130,null],[12,"type_macros","","",130,null],[12,"repr_simd","","",130,null],[12,"cfg_target_feature","","",130,null],[12,"platform_intrinsics","","",130,null],[12,"unwind_attributes","","",130,null],[12,"naked_functions","","",130,null],[12,"no_debug","","",130,null],[12,"omit_gdb_pretty_printer_section","","",130,null],[12,"cfg_target_vendor","","",130,null],[12,"stmt_expr_attributes","","",130,null],[12,"type_ascription","","",130,null],[12,"cfg_target_thread_local","","",130,null],[12,"abi_vectorcall","","",130,null],[12,"inclusive_range_syntax","","",130,null],[12,"question_mark","","",130,null],[12,"specialization","","",130,null],[12,"pub_restricted","","",130,null],[12,"drop_types_in_const","","",130,null],[12,"cfg_target_has_atomic","","",130,null],[12,"dotdot_in_tuple_patterns","","",130,null],[3,"GatedCfg","","",null,null],[4,"AttributeType","","",null,null],[13,"Normal","","Normal, builtin attribute that is consumed\nby the compiler before the unused_attribute check",131,null],[13,"Whitelisted","","Builtin attribute that may not be consumed by the compiler\nbefore the unused_attribute check. These attributes\nwill be ignored by the unused_attribute lint",131,null],[13,"CrateLevel","","Builtin attribute that is only allowed at the crate level",131,null],[4,"AttributeGate","","",null,null],[13,"Gated","","Is gated by a given feature gate, reason\nand function to check if enabled",132,null],[13,"Ungated","","Ungated attribute, can be used on all release channels",132,null],[4,"GateIssue","","",null,null],[13,"Language","","",133,null],[13,"Library","","",133,null],[4,"UnstableFeatures","","",null,null],[13,"Disallow","","Hard errors for unstable features are active, as on\nbeta/stable channels.",134,null],[13,"Allow","","Allow features to me activated, as on nightly.",134,null],[13,"Cheat","","Errors are bypassed for bootstrapping. This is required any time\nduring the build that feature-related lints are set to warn or above\nbecause the build turns on warnings-as-errors and uses lots of unstable\nfeatures. As a result, this is always required for building Rust itself.",134,null],[5,"check_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"handler"},{"name":"codemap"},{"name":"features"}],"output":null}],[5,"find_lang_feature_accepted_version","","",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"emit_feature_err","","",null,{"inputs":[{"name":"handler"},{"name":"str"},{"name":"span"},{"name":"gateissue"},{"name":"str"}],"output":null}],[5,"get_features","","",null,null],[5,"check_crate","","",null,null],[17,"KNOWN_ATTRIBUTES","","",null,null],[17,"EXPLAIN_STMT_ATTR_SYNTAX","","",null,null],[17,"EXPLAIN_ASM","","",null,null],[17,"EXPLAIN_LOG_SYNTAX","","",null,null],[17,"EXPLAIN_CONCAT_IDENTS","","",null,null],[17,"EXPLAIN_TRACE_MACROS","","",null,null],[17,"EXPLAIN_ALLOW_INTERNAL_UNSTABLE","","",null,null],[17,"EXPLAIN_CUSTOM_DERIVE","","",null,null],[17,"EXPLAIN_DERIVE_UNDERSCORE","","",null,null],[17,"EXPLAIN_PLACEMENT_IN","","",null,null],[11,"new","","",130,{"inputs":[],"output":{"name":"features"}}],[11,"fmt","","",131,null],[11,"clone","","",131,null],[11,"eq","","",131,null],[11,"fmt","","",132,null],[11,"eq","","",135,null],[11,"ne","","",135,null],[11,"fmt","","",135,null],[11,"gate","","",135,{"inputs":[{"name":"metaitem"}],"output":{"name":"option"}}],[11,"check_and_emit","","",135,null],[11,"clone","","",134,null],[0,"fold","syntex_syntax","A Folder represents an AST-&gt;AST fold; it accepts an AST piece,\nand returns a piece of the same type. So, for instance, macro\nexpansion is a Folder that walks over an AST and produces another\nAST.",null,null],[5,"noop_fold_meta_items","syntex_syntax::fold","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_view_path","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"fold_attrs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"fold_thin_attrs","","",null,{"inputs":[{"name":"thinvec"},{"name":"t"}],"output":{"name":"thinvec"}}],[5,"noop_fold_arm","","",null,{"inputs":[{"name":"arm"},{"name":"t"}],"output":{"name":"arm"}}],[5,"noop_fold_ty_binding","","",null,{"inputs":[{"name":"typebinding"},{"name":"t"}],"output":{"name":"typebinding"}}],[5,"noop_fold_ty","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_foreign_mod","","",null,{"inputs":[{"name":"foreignmod"},{"name":"t"}],"output":{"name":"foreignmod"}}],[5,"noop_fold_variant","","",null,{"inputs":[{"name":"variant"},{"name":"t"}],"output":{"name":"variant"}}],[5,"noop_fold_ident","","",null,{"inputs":[{"name":"ident"},{"name":"t"}],"output":{"name":"ident"}}],[5,"noop_fold_usize","","",null,{"inputs":[{"name":"usize"},{"name":"t"}],"output":{"name":"usize"}}],[5,"noop_fold_path","","",null,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"path"}}],[5,"noop_fold_path_parameters","","",null,{"inputs":[{"name":"pathparameters"},{"name":"t"}],"output":{"name":"pathparameters"}}],[5,"noop_fold_angle_bracketed_parameter_data","","",null,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"t"}],"output":{"name":"anglebracketedparameterdata"}}],[5,"noop_fold_parenthesized_parameter_data","","",null,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"t"}],"output":{"name":"parenthesizedparameterdata"}}],[5,"noop_fold_local","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_mac","","",null,{"inputs":[{"name":"mac"},{"name":"t"}],"output":{"name":"mac"}}],[5,"noop_fold_meta_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_arg","","",null,{"inputs":[{"name":"arg"},{"name":"t"}],"output":{"name":"arg"}}],[5,"noop_fold_tt","","",null,{"inputs":[{"name":"tokentree"},{"name":"t"}],"output":{"name":"tokentree"}}],[5,"noop_fold_tts","","",null,null],[5,"noop_fold_token","","",null,{"inputs":[{"name":"token"},{"name":"t"}],"output":{"name":"token"}}],[5,"noop_fold_interpolated","","apply folder to elements of interpolated nodes",null,{"inputs":[{"name":"nonterminal"},{"name":"t"}],"output":{"name":"nonterminal"}}],[5,"noop_fold_fn_decl","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_ty_param_bound","","",null,{"inputs":[{"name":"typarambound"},{"name":"t"}],"output":{"name":"typarambound"}}],[5,"noop_fold_ty_param","","",null,{"inputs":[{"name":"typaram"},{"name":"t"}],"output":{"name":"typaram"}}],[5,"noop_fold_ty_params","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_lifetime","","",null,{"inputs":[{"name":"lifetime"},{"name":"t"}],"output":{"name":"lifetime"}}],[5,"noop_fold_lifetime_def","","",null,{"inputs":[{"name":"lifetimedef"},{"name":"t"}],"output":{"name":"lifetimedef"}}],[5,"noop_fold_lifetimes","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_lifetime_defs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_opt_lifetime","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_generics","","",null,{"inputs":[{"name":"generics"},{"name":"t"}],"output":{"name":"generics"}}],[5,"noop_fold_where_clause","","",null,{"inputs":[{"name":"whereclause"},{"name":"t"}],"output":{"name":"whereclause"}}],[5,"noop_fold_where_predicate","","",null,{"inputs":[{"name":"wherepredicate"},{"name":"t"}],"output":{"name":"wherepredicate"}}],[5,"noop_fold_variant_data","","",null,{"inputs":[{"name":"variantdata"},{"name":"t"}],"output":{"name":"variantdata"}}],[5,"noop_fold_trait_ref","","",null,{"inputs":[{"name":"traitref"},{"name":"t"}],"output":{"name":"traitref"}}],[5,"noop_fold_poly_trait_ref","","",null,{"inputs":[{"name":"polytraitref"},{"name":"t"}],"output":{"name":"polytraitref"}}],[5,"noop_fold_struct_field","","",null,{"inputs":[{"name":"structfield"},{"name":"t"}],"output":{"name":"structfield"}}],[5,"noop_fold_field","","",null,{"inputs":[{"name":"field"},{"name":"t"}],"output":{"name":"field"}}],[5,"noop_fold_mt","","",null,{"inputs":[{"name":"mutty"},{"name":"t"}],"output":{"name":"mutty"}}],[5,"noop_fold_opt_bounds","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_block","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_item_kind","","",null,{"inputs":[{"name":"itemkind"},{"name":"t"}],"output":{"name":"itemkind"}}],[5,"noop_fold_trait_item","","",null,{"inputs":[{"name":"traititem"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_impl_item","","",null,{"inputs":[{"name":"implitem"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_mod","","",null,{"inputs":[{"name":"mod"},{"name":"t"}],"output":{"name":"mod"}}],[5,"noop_fold_crate","","",null,{"inputs":[{"name":"crate"},{"name":"t"}],"output":{"name":"crate"}}],[5,"noop_fold_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_item_simple","","",null,{"inputs":[{"name":"item"},{"name":"t"}],"output":{"name":"item"}}],[5,"noop_fold_foreign_item","","",null,{"inputs":[{"name":"foreignitem"},{"name":"t"}],"output":{"name":"foreignitem"}}],[5,"noop_fold_method_sig","","",null,{"inputs":[{"name":"methodsig"},{"name":"t"}],"output":{"name":"methodsig"}}],[5,"noop_fold_pat","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_expr","","",null,{"inputs":[{"name":"expr"},{"name":"t"}],"output":{"name":"expr"}}],[5,"noop_fold_opt_expr","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_exprs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_stmt","","",null,{"inputs":[{"name":"stmt"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_vis","","",null,{"inputs":[{"name":"visibility"},{"name":"t"}],"output":{"name":"visibility"}}],[8,"Folder","","",null,null],[11,"fold_crate","","",136,null],[11,"fold_meta_items","","",136,null],[11,"fold_meta_item","","",136,null],[11,"fold_view_path","","",136,null],[11,"fold_foreign_item","","",136,null],[11,"fold_item","","",136,null],[11,"fold_item_simple","","",136,null],[11,"fold_struct_field","","",136,null],[11,"fold_item_kind","","",136,null],[11,"fold_trait_item","","",136,null],[11,"fold_impl_item","","",136,null],[11,"fold_fn_decl","","",136,null],[11,"fold_block","","",136,null],[11,"fold_stmt","","",136,null],[11,"fold_arm","","",136,null],[11,"fold_pat","","",136,null],[11,"fold_expr","","",136,null],[11,"fold_opt_expr","","",136,null],[11,"fold_exprs","","",136,null],[11,"fold_ty","","",136,null],[11,"fold_ty_binding","","",136,null],[11,"fold_mod","","",136,null],[11,"fold_foreign_mod","","",136,null],[11,"fold_variant","","",136,null],[11,"fold_ident","","",136,null],[11,"fold_usize","","",136,null],[11,"fold_path","","",136,null],[11,"fold_path_parameters","","",136,null],[11,"fold_angle_bracketed_parameter_data","","",136,null],[11,"fold_parenthesized_parameter_data","","",136,null],[11,"fold_local","","",136,null],[11,"fold_mac","","",136,null],[11,"fold_lifetime","","",136,null],[11,"fold_lifetime_def","","",136,null],[11,"fold_attribute","","",136,null],[11,"fold_arg","","",136,null],[11,"fold_generics","","",136,null],[11,"fold_trait_ref","","",136,null],[11,"fold_poly_trait_ref","","",136,null],[11,"fold_variant_data","","",136,null],[11,"fold_lifetimes","","",136,null],[11,"fold_lifetime_defs","","",136,null],[11,"fold_ty_param","","",136,null],[11,"fold_ty_params","","",136,null],[11,"fold_tt","","",136,null],[11,"fold_tts","","",136,null],[11,"fold_token","","",136,null],[11,"fold_interpolated","","",136,null],[11,"fold_opt_lifetime","","",136,null],[11,"fold_opt_bounds","","",136,null],[11,"fold_bounds","","",136,null],[11,"fold_ty_param_bound","","",136,null],[11,"fold_mt","","",136,null],[11,"fold_field","","",136,null],[11,"fold_where_clause","","",136,null],[11,"fold_where_predicate","","",136,null],[11,"fold_vis","","",136,null],[11,"new_id","","",136,null],[11,"new_span","","",136,null],[0,"parse","syntex_syntax","The main parser interface",null,null],[3,"ParseSess","syntex_syntax::parse","Info about a parsing session.",null,null],[12,"span_diagnostic","","",137,null],[5,"parse_crate_from_file","","",null,{"inputs":[{"name":"path"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_attrs_from_file","","",null,{"inputs":[{"name":"path"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_attrs_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_expr_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_item_from_source_str","","Parses an item.",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_meta_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_stmt_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_tts_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"new_parser_from_source_str","","",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"string"},{"name":"string"}],"output":{"name":"parser"}}],[5,"new_parser_from_file","","Create a new parser, handling errors as appropriate\nif the file doesn&#39;t exist",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"path"}],"output":{"name":"parser"}}],[5,"new_sub_parser_from_file","","Given a session, a crate config, a path, and a span, add\nthe file at the given path to the codemap, and return a parser.\nOn an error, use the given span as the source of the problem.",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"path"},{"name":"bool"},{"name":"option"},{"name":"span"}],"output":{"name":"parser"}}],[5,"filemap_to_parser","","Given a filemap and config, return a parser",null,{"inputs":[{"name":"parsesess"},{"name":"rc"},{"name":"crateconfig"}],"output":{"name":"parser"}}],[5,"new_parser_from_tts","","",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"vec"}],"output":{"name":"parser"}}],[5,"filemap_to_tts","","Given a filemap, produce a sequence of token-trees",null,{"inputs":[{"name":"parsesess"},{"name":"rc"}],"output":{"name":"vec"}}],[5,"tts_to_parser","","Given tts and cfg, produce a parser",null,{"inputs":[{"name":"parsesess"},{"name":"vec"},{"name":"crateconfig"}],"output":{"name":"parser"}}],[5,"char_lit","","Parse a string representing a character literal into its final form.\nRather than just accepting/rejecting a given literal, unescapes it as\nwell. Can take any slice prefixed by a character escape. Returns the\ncharacter and the number of characters consumed.",null,null],[5,"str_lit","","Parse a string representing a string literal into its final form. Does\nunescaping.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"raw_str_lit","","Parse a string representing a raw string literal into its final form. The\nonly operation this does is convert embedded CRLF into a single LF.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"float_lit","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"handler"},{"name":"span"}],"output":{"name":"litkind"}}],[5,"byte_lit","","Parse a string representing a byte literal into its final form. Similar to `char_lit`",null,null],[5,"byte_str_lit","","",null,{"inputs":[{"name":"str"}],"output":{"name":"rc"}}],[5,"integer_lit","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"handler"},{"name":"span"}],"output":{"name":"litkind"}}],[0,"parser","","",null,null],[3,"Restrictions","syntex_syntax::parse::parser","",null,null],[3,"Parser","","",null,null],[12,"sess","","",138,null],[12,"token","","the current token:",138,null],[12,"span","","the span of the current token:",138,null],[12,"last_span","","the span of the prior token:",138,null],[12,"cfg","","",138,null],[12,"last_token","","the previous token or None (only stashed sometimes).",138,null],[12,"buffer","","",138,null],[12,"buffer_start","","",138,null],[12,"buffer_end","","",138,null],[12,"tokens_consumed","","",138,null],[12,"restrictions","","",138,null],[12,"quote_depth","","",138,null],[12,"reader","","",138,null],[12,"interner","","",138,null],[12,"obsolete_set","","The set of seen errors about obsolete syntax. Used to suppress\nextra detail when the same error is seen twice",138,null],[12,"filename","","Used to determine the path to externally loaded source files",138,null],[12,"mod_path_stack","","",138,null],[12,"open_braces","","Stack of open delimiters and their spans. Used for error message.",138,null],[12,"owns_directory","","Flag if this parser &quot;owns&quot; the directory that it is currently parsing\nin. This will affect how nested files are looked up.",138,null],[12,"root_module_name","","Name of the root module this parser originated from. If `None`, then the\nname is not known. This does not change while the parser is descending\ninto modules, and sub-parsers have new values for this name.",138,null],[12,"expected_tokens","","",138,null],[3,"ModulePath","","Information about the path to a module.",null,null],[12,"name","","",139,null],[12,"path_exists","","",139,null],[12,"result","","",139,null],[3,"ModulePathSuccess","","",null,null],[12,"path","","",140,null],[12,"owns_directory","","",140,null],[3,"ModulePathError","","",null,null],[12,"err_msg","","",141,null],[12,"help_msg","","",141,null],[4,"PathStyle","","How to parse a path. There are three different kinds of paths, all of which\nare parsed somewhat differently.",null,null],[13,"Mod","","A path with no type parameters, e.g. `foo::bar::Baz`, used in imports or visibilities.",142,null],[13,"Type","","A path with a lifetime and type parameters, with no double colons\nbefore the type parameters; e.g. `foo::bar&lt;&#39;a&gt;::Baz&lt;T&gt;`, used in types.\nPaths using this style can be passed into macros expecting `path` nonterminals.",142,null],[13,"Expr","","A path with a lifetime and type parameters with double colons before\nthe type parameters; e.g. `foo::bar::&lt;&#39;a&gt;::Baz::&lt;T&gt;`, used in expressions or patterns.",142,null],[4,"BoundParsingMode","","How to parse a bound, whether to allow bound modifiers such as `?`.",null,null],[13,"Bare","","",143,null],[13,"Modified","","",143,null],[4,"SemiColonMode","","",null,null],[13,"Break","","",144,null],[13,"Ignore","","",144,null],[4,"TokenType","","",null,null],[13,"Token","","",145,null],[13,"Keyword","","",145,null],[13,"Operator","","",145,null],[4,"LhsExpr","","",null,null],[13,"NotYetParsed","","",146,null],[13,"AttributesParsed","","",146,null],[13,"AlreadyParsed","","",146,null],[17,"RESTRICTION_STMT_EXPR","","",null,null],[17,"RESTRICTION_NO_STRUCT_LITERAL","","",null,null],[17,"NO_NONINLINE_MOD","","",null,null],[11,"hash","","",147,null],[11,"cmp","","",147,null],[11,"partial_cmp","","",147,null],[11,"lt","","",147,null],[11,"le","","",147,null],[11,"gt","","",147,null],[11,"ge","","",147,null],[11,"clone","","",147,null],[11,"eq","","",147,null],[11,"ne","","",147,null],[11,"fmt","","",147,null],[11,"empty","","Returns an empty set of flags.",147,{"inputs":[],"output":{"name":"restrictions"}}],[11,"all","","Returns the set containing all flags.",147,{"inputs":[],"output":{"name":"restrictions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",147,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",147,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",147,{"inputs":[{"name":"u8"}],"output":{"name":"restrictions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",147,null],[11,"is_all","","Returns `true` if all flags are currently set.",147,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",147,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",147,null],[11,"insert","","Inserts the specified flags in-place.",147,null],[11,"remove","","Removes the specified flags in-place.",147,null],[11,"toggle","","Toggles the specified flags in-place.",147,null],[11,"bitor","","Returns the union of the two sets of flags.",147,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",147,null],[11,"bitand","","Returns the intersection between the two sets of flags.",147,null],[11,"sub","","Returns the set difference of the two sets of flags.",147,null],[11,"not","","Returns the complement of this set of flags.",147,null],[11,"from_iter","","",147,{"inputs":[{"name":"t"}],"output":{"name":"restrictions"}}],[11,"restriction_stmt_expr","","",147,{"inputs":[],"output":{"name":"self"}}],[11,"restriction_no_struct_literal","","",147,{"inputs":[],"output":{"name":"self"}}],[11,"no_noninline_mod","","",147,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",142,null],[11,"clone","","",142,null],[11,"eq","","",143,null],[11,"clone","","",143,null],[11,"eq","","",144,null],[11,"clone","","",144,null],[11,"clone","","",145,null],[11,"eq","","",145,null],[11,"ne","","",145,null],[11,"from","","",146,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"from","","",146,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"new","","",138,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"box"}],"output":{"name":"parser"}}],[11,"token_to_string","","Convert a token to a string using self&#39;s reader",138,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[11,"this_token_to_string","","Convert the current token to a string using self&#39;s reader",138,null],[11,"this_token_descr","","",138,null],[11,"unexpected_last","","",138,null],[11,"unexpected","","",138,null],[11,"expect","","Expect and consume the token t. Signal an error if\nthe next token is not t.",138,null],[11,"expect_one_of","","Expect next token to be edible or inedible token.  If edible,\nthen consume it; if inedible, then return without consuming\nanything.  Signal a fatal error if next token is unexpected.",138,null],[11,"check_for_erroneous_unit_struct_expecting","","Check for erroneous `ident { }`; if matches, signal error and\nrecover (without consuming any expected input token).  Returns\ntrue if and only if input was consumed for recovery.",138,null],[11,"commit_expr","","Commit to parsing a complete expression `e` expected to be\nfollowed by some token from the set edible + inedible.  Recover\nfrom anticipated input errors, discarding erroneous characters.",138,null],[11,"commit_expr_expecting","","",138,null],[11,"commit_stmt","","Commit to parsing a complete statement `s`, which expects to be\nfollowed by some token from the set edible + inedible.  Check\nfor recoverable input errors, discarding erroneous characters.",138,null],[11,"parse_ident","","",138,null],[11,"check","","Check if the next token is `tok`, and return `true` if so.",138,null],[11,"eat","","Consume token &#39;tok&#39; if it exists. Returns true if the given\ntoken was present, false otherwise.",138,null],[11,"check_keyword","","",138,null],[11,"eat_keyword","","If the next token is the given keyword, eat it and return\ntrue. Otherwise, return false.",138,null],[11,"eat_keyword_noexpect","","",138,null],[11,"check_contextual_keyword","","",138,null],[11,"eat_contextual_keyword","","",138,null],[11,"expect_keyword","","If the given word is not a keyword, signal an error.\nIf the next token is not the given word, signal an error.\nOtherwise, eat it.",138,null],[11,"check_strict_keywords","","Signal an error if the given string is a strict keyword",138,null],[11,"check_reserved_keywords","","Signal an error if the current token is a reserved keyword",138,null],[11,"expect_no_suffix","","",138,null],[11,"expect_gt","","Expect and consume a GT. if a &gt;&gt; is seen, replace it\nwith a single &gt; and continue. If a GT is not seen,\nsignal an error.",138,null],[11,"parse_seq_to_before_gt_or_return","","",138,null],[11,"parse_seq_to_before_gt","","Parse a sequence bracketed by &#39;&lt;&#39; and &#39;&gt;&#39;, stopping\nbefore the &#39;&gt;&#39;.",138,null],[11,"parse_seq_to_gt","","",138,null],[11,"parse_seq_to_gt_or_return","","",138,null],[11,"eat_to_tokens","","Eat and discard tokens until one of `kets` is encountered. Respects token trees,\npasses through any errors encountered. Used for error recovery.",138,null],[11,"parse_seq_to_end","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",138,null],[11,"parse_seq_to_before_end","","Parse a sequence, not including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",138,null],[11,"parse_unspanned_seq","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",138,null],[11,"parse_seq","","",138,null],[11,"bump","","Advance the parser by one token",138,null],[11,"bump_and_get","","Advance the parser by one token and return the bumped token.",138,null],[11,"bump_with","","Advance the parser using provided token as a next one. Use this when\nconsuming a part of a token. For example a single `&lt;` from `&lt;&lt;`.",138,null],[11,"buffer_length","","",138,null],[11,"look_ahead","","",138,null],[11,"fatal","","",138,null],[11,"span_fatal","","",138,null],[11,"span_fatal_help","","",138,null],[11,"bug","","",138,null],[11,"warn","","",138,null],[11,"span_warn","","",138,null],[11,"span_err","","",138,null],[11,"span_bug","","",138,null],[11,"abort_if_errors","","",138,null],[11,"diagnostic","","",138,null],[11,"id_to_interned_str","","",138,null],[11,"token_is_bare_fn_keyword","","Is the current token one of the keywords that signals a bare function\ntype?",138,null],[11,"get_lifetime","","",138,null],[11,"parse_for_in_type","","",138,null],[11,"parse_ty_path","","",138,null],[11,"parse_ty_bare_fn","","parse a TyKind::BareFn type:",138,null],[11,"parse_obsolete_closure_kind","","Parses an obsolete closure kind (`&amp;:`, `&amp;mut:`, or `:`).",138,null],[11,"parse_unsafety","","",138,null],[11,"parse_trait_item","","Parse the items in a trait declaration",138,null],[11,"parse_trait_items","","Parse the items in a trait declaration",138,null],[11,"parse_mt","","Parse a possibly mutable type",138,null],[11,"parse_ret_ty","","Parse optional return type [ -&gt; TY ] in function decl",138,null],[11,"parse_ty_sum","","Parse a type in a context where `T1+T2` is allowed.",138,null],[11,"parse_ty","","Parse a type.",138,null],[11,"parse_borrowed_pointee","","",138,null],[11,"parse_ptr","","",138,null],[11,"is_named_argument","","",138,null],[11,"parse_arg_general","","This version of parse arg doesn&#39;t necessarily require\nidentifier names.",138,null],[11,"parse_arg","","Parse a single function argument",138,null],[11,"parse_fn_block_arg","","Parse an argument in a lambda header e.g. |arg, arg|",138,null],[11,"maybe_parse_fixed_length_of_vec","","",138,null],[11,"parse_lit_token","","Matches token_lit = LIT_INTEGER | ...",138,null],[11,"parse_lit","","Matches lit = true | false | token_lit",138,null],[11,"parse_pat_literal_maybe_minus","","matches &#39;-&#39; lit | lit",138,null],[11,"parse_path_segment_ident","","",138,null],[11,"parse_qualified_path","","Parses qualified path.",138,null],[11,"parse_path","","Parses a path and optional type parameter bounds, depending on the\nmode. The `mode` parameter determines whether lifetimes, types, and/or\nbounds are permitted and whether `::` must precede type parameter\ngroups.",138,null],[11,"parse_path_segments_without_colons","","Examples:\n- `a::b&lt;T,U&gt;::c&lt;V,W&gt;`\n- `a::b&lt;T,U&gt;::c(V) -&gt; W`\n- `a::b&lt;T,U&gt;::c(V)`",138,null],[11,"parse_path_segments_with_colons","","Examples:\n- `a::b::&lt;T,U&gt;::c`",138,null],[11,"parse_path_segments_without_types","","Examples:\n- `a::b::c`",138,null],[11,"parse_opt_lifetime","","parses 0 or 1 lifetime",138,null],[11,"parse_lifetime","","Parses a single lifetime\nMatches lifetime = LIFETIME",138,null],[11,"parse_lifetime_defs","","Parses `lifetime_defs = [ lifetime_defs { &#39;,&#39; lifetime_defs } ]` where `lifetime_def  =\nlifetime [&#39;:&#39; lifetimes]`",138,null],[11,"parse_lifetimes","","matches lifetimes = ( lifetime ) | ( lifetime , lifetimes ) actually, it matches the empty\none too, but putting that in there messes up the grammar....",138,null],[11,"parse_mutability","","Parse mutability (`mut` or nothing).",138,null],[11,"parse_field","","Parse ident COLON expr",138,null],[11,"mk_expr","","",138,null],[11,"mk_unary","","",138,null],[11,"mk_binary","","",138,null],[11,"mk_call","","",138,null],[11,"mk_index","","",138,null],[11,"mk_range","","",138,null],[11,"mk_field","","",138,null],[11,"mk_tup_field","","",138,null],[11,"mk_assign_op","","",138,null],[11,"mk_mac_expr","","",138,null],[11,"mk_lit_u32","","",138,null],[11,"parse_block_expr","","Parse a block or unsafe block",138,null],[11,"parse_dot_or_call_expr","","parse a.b or a(13) or a[4] or just a",138,null],[11,"parse_dot_or_call_expr_with","","",138,null],[11,"check_unknown_macro_variable","","",138,null],[11,"parse_sep_and_kleene_op","","Parse an optional separator followed by a Kleene-style\nrepetition token (+ or *).",138,null],[11,"parse_token_tree","","parse a single token tree from the input.",138,null],[11,"parse_all_token_trees","","",138,null],[11,"parse_prefix_expr","","Parse a prefix-unary-operator expr",138,null],[11,"parse_assoc_expr","","Parse an associative expression",138,null],[11,"parse_assoc_expr_with","","Parse an associative expression with operators of at least `min_prec` precedence",138,null],[11,"parse_if_expr","","Parse an &#39;if&#39; or &#39;if let&#39; expression (&#39;if&#39; token already eaten)",138,null],[11,"parse_if_let_expr","","Parse an &#39;if let&#39; expression (&#39;if&#39; token already eaten)",138,null],[11,"parse_lambda_expr","","",138,null],[11,"parse_else_expr","","",138,null],[11,"parse_for_expr","","Parse a &#39;for&#39; .. &#39;in&#39; expression (&#39;for&#39; token already eaten)",138,null],[11,"parse_while_expr","","Parse a &#39;while&#39; or &#39;while let&#39; expression (&#39;while&#39; token already eaten)",138,null],[11,"parse_while_let_expr","","Parse a &#39;while let&#39; expression (&#39;while&#39; token already eaten)",138,null],[11,"parse_loop_expr","","",138,null],[11,"parse_arm","","",138,null],[11,"parse_expr","","Parse an expression",138,null],[11,"with_res","","Evaluate the closure with restrictions in place.",138,null],[11,"parse_expr_res","","Parse an expression, subject to the given restrictions",138,null],[11,"parse_pat","","Parse a pattern.",138,null],[11,"parse_stmt","","Parse a statement. may include decl.",138,null],[11,"parse_block","","Parse a block. No inner attrs are allowed.",138,null],[11,"parse_generics","","Parse a set of optional generic type parameter declarations. Where\nclauses are not parsed here, and must be added later via\n`parse_where_clause()`.",138,null],[11,"parse_where_clause","","Parses an optional `where` clause and places it in `generics`.",138,null],[11,"parse_fn_decl","","Parse the argument list and result type of a function declaration",138,null],[11,"is_const_item","","true if we are looking at `const ID`, false for things like `const fn` etc",138,null],[11,"parse_fn_front_matter","","parses all the &quot;front matter&quot; for a `fn` declaration, up to\nand including the `fn` keyword:",138,null],[11,"parse_impl_item","","Parse an impl item.",138,null],[11,"parse_record_struct_body","","",138,null],[11,"parse_tuple_struct_body","","",138,null],[11,"parse_single_struct_field","","Parse a structure field declaration",138,null],[11,"submod_path_from_attr","","",138,null],[11,"default_submod_path","","Returns either a path to a module, or .",138,{"inputs":[{"name":"ident"},{"name":"path"},{"name":"codemap"}],"output":{"name":"modulepath"}}],[11,"parse_item","","",138,null],[11,"parse_crate_mod","","Parses a source module as a crate. This is the main\nentry point for the parser.",138,null],[11,"parse_optional_str","","",138,null],[11,"parse_str","","",138,null],[0,"lexer","syntex_syntax::parse","",null,null],[3,"TokenAndSpan","syntex_syntax::parse::lexer","",null,null],[12,"tok","","",148,null],[12,"sp","","",148,null],[3,"StringReader","","",null,null],[12,"span_diagnostic","","",149,null],[12,"pos","","The absolute offset within the codemap of the next character to read",149,null],[12,"last_pos","","The absolute offset within the codemap of the last character read(curr)",149,null],[12,"col","","The column of the next character to read",149,null],[12,"curr","","The last character to be read",149,null],[12,"filemap","","",149,null],[12,"peek_tok","","",149,null],[12,"peek_span","","",149,null],[12,"fatal_errs","","",149,null],[5,"is_pattern_whitespace","","",null,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_block_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[0,"comments","","",null,null],[3,"Comment","syntex_syntax::parse::lexer::comments","",null,null],[12,"style","","",150,null],[12,"lines","","",150,null],[12,"pos","","",150,null],[3,"Literal","","",null,null],[12,"lit","","",151,null],[12,"pos","","",151,null],[4,"CommentStyle","","",null,null],[13,"Isolated","","No code on either side of each line of the comment",152,null],[13,"Trailing","","Code exists to the left of the comment",152,null],[13,"Mixed","","Code before /* foo */ and after the comment",152,null],[13,"BlankLine","","Just a manual blank line &quot;\\n\\n&quot;, for layout",152,null],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"doc_comment_style","","",null,{"inputs":[{"name":"str"}],"output":{"name":"attrstyle"}}],[5,"strip_doc_comment_decoration","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"gather_comments_and_literals","","",null,null],[11,"eq","","",152,null],[11,"clone","","",152,null],[11,"clone","","",150,null],[11,"clone","","",151,null],[8,"Reader","syntex_syntax::parse::lexer","",null,null],[10,"is_eof","","",153,null],[10,"try_next_token","","",153,null],[11,"next_token","","",153,null],[10,"fatal","","Report a fatal error with the current span.",153,null],[10,"err","","Report a non-fatal error with the current span.",153,null],[10,"emit_fatal_errors","","",153,null],[11,"unwrap_or_abort","","",153,null],[10,"peek","","",153,null],[11,"try_real_token","","Get a token the parser cares about.",153,null],[11,"real_token","","",153,null],[11,"fmt","","",148,null],[11,"eq","","",148,null],[11,"ne","","",148,null],[11,"clone","","",148,null],[11,"is_eof","","",149,null],[11,"try_next_token","","Return the next token. EFFECT: advances the string_reader.",149,null],[11,"fatal","","",149,null],[11,"err","","",149,null],[11,"emit_fatal_errors","","",149,null],[11,"peek","","",149,null],[11,"new_raw","","For comments.rs, which hackily pokes into pos and curr",149,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"new","","",149,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"curr_is","","",149,null],[11,"fatal_span","","Report a fatal lexical error with a given span.",149,null],[11,"err_span","","Report a lexical error with a given span.",149,null],[11,"with_str_from","","Calls `f` with a string slice of the source text spanning from `start`\nup to but excluding `self.last_pos`, meaning the slice does not include\nthe character `self.curr`.",149,null],[11,"name_from","","Create a Name from a given offset to the current offset, each\nadjusted 1 towards each other (assumes that on either side there is a\nsingle-byte delimiter).",149,null],[11,"name_from_to","","As name_from, with an explicit endpoint.",149,null],[11,"bump","","Advance the StringReader by one character. If a newline is\ndiscovered, add it to the FileMap&#39;s list of line start offsets.",149,null],[11,"nextch","","",149,null],[11,"nextch_is","","",149,null],[11,"nextnextch","","",149,null],[11,"nextnextch_is","","",149,null],[0,"token","syntex_syntax::parse","",null,null],[3,"InternedString","syntex_syntax::parse::token","Represents a string stored in the thread-local interner. Because the\ninterner lives for the life of the thread, this can be safely treated as an\nimmortal string, as long as it never crosses between threads.",null,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",154,null],[13,"Minus","","",154,null],[13,"Star","","",154,null],[13,"Slash","","",154,null],[13,"Percent","","",154,null],[13,"Caret","","",154,null],[13,"And","","",154,null],[13,"Or","","",154,null],[13,"Shl","","",154,null],[13,"Shr","","",154,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",155,null],[13,"Bracket","","A square bracket: `[` or `]`",155,null],[13,"Brace","","A curly brace: `{` or `}`",155,null],[4,"SpecialMacroVar","","",null,null],[13,"CrateMacroVar","","`$crate` will be filled in with the name of the crate a macro was\nimported from, if any.",156,null],[4,"Lit","","",null,null],[13,"Byte","","",157,null],[13,"Char","","",157,null],[13,"Integer","","",157,null],[13,"Float","","",157,null],[13,"Str_","","",157,null],[13,"StrRaw","","",157,null],[13,"ByteStr","","",157,null],[13,"ByteStrRaw","","",157,null],[4,"Token","","",null,null],[13,"Eq","","",158,null],[13,"Lt","","",158,null],[13,"Le","","",158,null],[13,"EqEq","","",158,null],[13,"Ne","","",158,null],[13,"Ge","","",158,null],[13,"Gt","","",158,null],[13,"AndAnd","","",158,null],[13,"OrOr","","",158,null],[13,"Not","","",158,null],[13,"Tilde","","",158,null],[13,"BinOp","","",158,null],[13,"BinOpEq","","",158,null],[13,"At","","",158,null],[13,"Dot","","",158,null],[13,"DotDot","","",158,null],[13,"DotDotDot","","",158,null],[13,"Comma","","",158,null],[13,"Semi","","",158,null],[13,"Colon","","",158,null],[13,"ModSep","","",158,null],[13,"RArrow","","",158,null],[13,"LArrow","","",158,null],[13,"FatArrow","","",158,null],[13,"Pound","","",158,null],[13,"Dollar","","",158,null],[13,"Question","","",158,null],[13,"OpenDelim","","An opening delimiter, eg. `{`",158,null],[13,"CloseDelim","","A closing delimiter, eg. `}`",158,null],[13,"Literal","","",158,null],[13,"Ident","","",158,null],[13,"Underscore","","",158,null],[13,"Lifetime","","",158,null],[13,"Interpolated","","",158,null],[13,"DocComment","","Doc comment",158,null],[13,"MatchNt","","Parse a nonterminal (name to bind, name of NT)",158,null],[13,"SubstNt","","A syntactic variable that will be filled in by macro expansion.",158,null],[13,"SpecialVarNt","","A macro variable with special meaning.",158,null],[13,"Whitespace","","Whitespace",158,null],[13,"Comment","","Comment",158,null],[13,"Shebang","","",158,null],[13,"Eof","","",158,null],[4,"Nonterminal","","For interpolation during macro expansion.",null,null],[13,"NtItem","","",159,null],[13,"NtBlock","","",159,null],[13,"NtStmt","","",159,null],[13,"NtPat","","",159,null],[13,"NtExpr","","",159,null],[13,"NtTy","","",159,null],[13,"NtIdent","","",159,null],[13,"NtMeta","","Stuff inside brackets for attributes",159,null],[13,"NtPath","","",159,null],[13,"NtTT","","",159,null],[13,"NtArm","","",159,null],[13,"NtImplItem","","",159,null],[13,"NtTraitItem","","",159,null],[13,"NtGenerics","","",159,null],[13,"NtWhereClause","","",159,null],[13,"NtArg","","",159,null],[5,"get_ident_interner","","",null,{"inputs":[],"output":{"name":"rc"}}],[5,"reset_ident_interner","","Reset the ident interner to its initial state.",null,{"inputs":[],"output":null}],[5,"intern_and_get_ident","","Interns and returns the string contents of an identifier, using the\nthread-local interner.",null,{"inputs":[{"name":"str"}],"output":{"name":"internedstring"}}],[5,"intern","","Maps a string to its interned representation.",null,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[5,"gensym","","gensym&#39;s a new usize, using the current interner.",null,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[5,"str_to_ident","","Maps a string to an identifier with an empty syntax context.",null,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[5,"gensym_ident","","Maps a string to a gensym&#39;ed identifier.",null,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[5,"fresh_name","","",null,{"inputs":[{"name":"ident"}],"output":{"name":"name"}}],[5,"fresh_mark","","",null,{"inputs":[],"output":{"name":"mrk"}}],[0,"keywords","","",null,null],[3,"Keyword","syntex_syntax::parse::token::keywords","",null,null],[17,"Invalid","","",null,null],[17,"As","","",null,null],[17,"Box","","",null,null],[17,"Break","","",null,null],[17,"Const","","",null,null],[17,"Continue","","",null,null],[17,"Crate","","",null,null],[17,"Else","","",null,null],[17,"Enum","","",null,null],[17,"Extern","","",null,null],[17,"False","","",null,null],[17,"Fn","","",null,null],[17,"For","","",null,null],[17,"If","","",null,null],[17,"Impl","","",null,null],[17,"In","","",null,null],[17,"Let","","",null,null],[17,"Loop","","",null,null],[17,"Match","","",null,null],[17,"Mod","","",null,null],[17,"Move","","",null,null],[17,"Mut","","",null,null],[17,"Pub","","",null,null],[17,"Ref","","",null,null],[17,"Return","","",null,null],[17,"SelfValue","","",null,null],[17,"SelfType","","",null,null],[17,"Static","","",null,null],[17,"Struct","","",null,null],[17,"Super","","",null,null],[17,"Trait","","",null,null],[17,"True","","",null,null],[17,"Type","","",null,null],[17,"Unsafe","","",null,null],[17,"Use","","",null,null],[17,"Where","","",null,null],[17,"While","","",null,null],[17,"Abstract","","",null,null],[17,"Alignof","","",null,null],[17,"Become","","",null,null],[17,"Do","","",null,null],[17,"Final","","",null,null],[17,"Macro","","",null,null],[17,"Offsetof","","",null,null],[17,"Override","","",null,null],[17,"Priv","","",null,null],[17,"Proc","","",null,null],[17,"Pure","","",null,null],[17,"Sizeof","","",null,null],[17,"Typeof","","",null,null],[17,"Unsized","","",null,null],[17,"Virtual","","",null,null],[17,"Yield","","",null,null],[17,"Default","","",null,null],[17,"StaticLifetime","","",null,null],[17,"Union","","",null,null],[11,"eq","","",160,null],[11,"ne","","",160,null],[11,"clone","","",160,null],[11,"ident","","",160,null],[11,"name","","",160,null],[6,"IdentInterner","syntex_syntax::parse::token","",null,null],[11,"fmt","","",154,null],[11,"hash","","",154,null],[11,"eq","","",154,null],[11,"decode","","",154,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",154,null],[11,"clone","","",154,null],[11,"fmt","","",155,null],[11,"hash","","",155,null],[11,"eq","","",155,null],[11,"decode","","",155,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",155,null],[11,"clone","","",155,null],[11,"fmt","","",156,null],[11,"hash","","",156,null],[11,"eq","","",156,null],[11,"decode","","",156,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",156,null],[11,"clone","","",156,null],[11,"as_str","","",156,null],[11,"fmt","","",157,null],[11,"hash","","",157,null],[11,"eq","","",157,null],[11,"ne","","",157,null],[11,"decode","","",157,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",157,null],[11,"clone","","",157,null],[11,"short_name","","",157,null],[11,"fmt","","",158,null],[11,"hash","","",158,null],[11,"eq","","",158,null],[11,"ne","","",158,null],[11,"decode","","",158,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",158,null],[11,"clone","","",158,null],[11,"is_like_gt","","Returns `true` if the token starts with &#39;&gt;&#39;.",158,null],[11,"can_begin_expr","","Returns `true` if the token can appear at the start of an expression.",158,null],[11,"is_lit","","Returns `true` if the token is any literal",158,null],[11,"is_ident","","Returns `true` if the token is an identifier.",158,null],[11,"is_interpolated","","Returns `true` if the token is interpolated.",158,null],[11,"is_path","","Returns `true` if the token is an interpolated path.",158,null],[11,"is_lifetime","","Returns `true` if the token is a lifetime.",158,null],[11,"is_mutability","","Returns `true` if the token is either the `mut` or `const` keyword.",158,null],[11,"is_path_start","","",158,null],[11,"to_binop","","Maps a token to its corresponding binary operator.",158,null],[11,"is_keyword","","Returns `true` if the token is a given keyword, `kw`.",158,null],[11,"is_path_segment_keyword","","",158,null],[11,"is_any_keyword","","Returns `true` if the token is either a strict or reserved keyword.",158,null],[11,"is_strict_keyword","","Returns `true` if the token is a strict keyword.",158,null],[11,"is_reserved_keyword","","Returns `true` if the token is a keyword reserved for possible future use.",158,null],[11,"mtwt_eq","","Hygienic identifier equality comparison.",158,null],[11,"hash","","",159,null],[11,"eq","","",159,null],[11,"ne","","",159,null],[11,"decode","","",159,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",159,null],[11,"clone","","",159,null],[11,"fmt","","",159,null],[11,"cmp","","",161,null],[11,"partial_cmp","","",161,null],[11,"lt","","",161,null],[11,"le","","",161,null],[11,"gt","","",161,null],[11,"ge","","",161,null],[11,"hash","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"clone","","",161,null],[11,"new","","",161,{"inputs":[{"name":"str"}],"output":{"name":"internedstring"}}],[11,"new_from_name","","",161,{"inputs":[{"name":"name"}],"output":{"name":"internedstring"}}],[11,"deref","","",161,null],[11,"fmt","","",161,null],[11,"fmt","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"decode","","",161,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",161,null],[0,"attr","syntex_syntax::parse","",null,null],[11,"parse_outer_attributes","syntex_syntax::parse::parser","Parse attributes that appear before an item",138,null],[11,"parse_attribute","","Matches `attribute = # ! [ meta_item ]`",138,null],[11,"parse_inner_attributes","","Parse attributes that appear after the opening of an item. These should\nbe preceded by an exclamation mark, but we accept and warn about one\nterminated by a semicolon.\nmatches inner_attrs*",138,null],[11,"parse_meta_item","","matches meta_item = IDENT\n| IDENT = lit\n| IDENT meta_seq",138,null],[0,"common","syntex_syntax::parse","Common routines shared by parser mods",null,null],[3,"SeqSep","syntex_syntax::parse::common","SeqSep : a sequence separator (token)\nand whether a trailing separator is allowed.",null,null],[12,"sep","","",162,null],[12,"trailing_sep_allowed","","",162,null],[11,"trailing_allowed","","",162,{"inputs":[{"name":"token"}],"output":{"name":"seqsep"}}],[11,"none","","",162,{"inputs":[],"output":{"name":"seqsep"}}],[0,"classify","syntex_syntax::parse","Routines the parser uses to classify AST nodes",null,null],[5,"expr_requires_semi_to_be_stmt","syntex_syntax::parse::classify","Does this expression require a semicolon to be treated\nas a statement? The negation of this: &#39;can this expression\nbe used as a statement without a semicolon&#39; -- is used\nas an early-bail-out in the parser so that, for instance,\n    if true {...} else {...}\n     |x| 5\nisn&#39;t parsed as (if true {...} else {...} | x) | 5",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[5,"expr_is_simple_block","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[5,"stmt_ends_with_semi","","this statement requires a semicolon after it.\nnote that in one case (stmt_semi), we&#39;ve already\nseen the semicolon, and thus don&#39;t need another.",null,{"inputs":[{"name":"stmtkind"}],"output":{"name":"bool"}}],[0,"obsolete","syntex_syntax::parse","Support for parsing unsupported, old syntaxes, for the purpose of reporting errors. Parsing of\nthese syntaxes is tested by compile-test/obsolete-syntax.rs.",null,null],[4,"ObsoleteSyntax","syntex_syntax::parse::obsolete","The specific types of unsupported syntax",null,null],[13,"ClosureKind","","",163,null],[13,"ExternCrateString","","",163,null],[8,"ParserObsoleteMethods","","",null,null],[10,"obsolete","","Reports an obsolete syntax non-fatal error.",164,null],[10,"report","","",164,null],[11,"hash","","",163,null],[11,"eq","","",163,null],[11,"clone","","",163,null],[11,"obsolete","syntex_syntax::parse::parser","Reports an obsolete syntax non-fatal error.",138,null],[11,"report","","",138,null],[6,"PResult","syntex_syntax::parse","",null,null],[11,"new","","",137,{"inputs":[],"output":{"name":"parsesess"}}],[11,"with_span_handler","","",137,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"parsesess"}}],[11,"codemap","","",137,null],[0,"ptr","syntex_syntax","The AST pointer",null,null],[3,"P","syntex_syntax::ptr","An owned smart pointer.",null,null],[5,"P","","Construct a `P&lt;T&gt;` from a `T` value.",null,{"inputs":[{"name":"t"}],"output":{"name":"p"}}],[11,"cmp","","",165,null],[11,"partial_cmp","","",165,null],[11,"lt","","",165,null],[11,"le","","",165,null],[11,"gt","","",165,null],[11,"ge","","",165,null],[11,"eq","","",165,null],[11,"ne","","",165,null],[11,"hash","","",165,null],[11,"and_then","","Move out of the pointer.\nIntended for chaining transformations not covered by `map`.",165,null],[11,"unwrap","","Equivalent to and_then(|x| x)",165,null],[11,"map","","Transform the inner value, consuming `self` and producing a new `P&lt;T&gt;`.",165,null],[11,"deref","","",165,null],[11,"clone","","",165,null],[11,"fmt","","",165,null],[11,"fmt","","",165,null],[11,"fmt","","",165,null],[11,"decode","","",165,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",165,null],[11,"new","","",165,{"inputs":[],"output":{"name":"p"}}],[11,"from_vec","","",165,{"inputs":[{"name":"vec"}],"output":{"name":"p"}}],[11,"into_vec","","",165,null],[11,"default","","",165,{"inputs":[],"output":{"name":"p"}}],[11,"clone","","",165,null],[11,"from","","",165,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",165,null],[11,"from_iter","","",165,{"inputs":[{"name":"i"}],"output":{"name":"p"}}],[11,"into_iter","","",165,null],[11,"encode","","",165,null],[11,"decode","","",165,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"show_span","syntex_syntax","Span debugger",null,null],[5,"run","syntex_syntax::show_span","",null,{"inputs":[{"name":"handler"},{"name":"str"},{"name":"crate"}],"output":null}],[0,"std_inject","syntex_syntax","",null,null],[5,"no_core","syntex_syntax::std_inject","",null,{"inputs":[{"name":"crate"}],"output":{"name":"bool"}}],[5,"no_std","","",null,{"inputs":[{"name":"crate"}],"output":{"name":"bool"}}],[5,"maybe_inject_crates_ref","","",null,{"inputs":[{"name":"parsesess"},{"name":"crate"},{"name":"option"}],"output":{"name":"crate"}}],[0,"str","syntex_syntax","",null,null],[5,"char_at","syntex_syntax::str","",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"char"}}],[5,"slice_shift_char","","",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"test","syntex_syntax","",null,null],[5,"modify_for_testing","syntex_syntax::test","",null,{"inputs":[{"name":"parsesess"},{"name":"bool"},{"name":"crate"},{"name":"handler"}],"output":{"name":"crate"}}],[0,"tokenstream","syntex_syntax","# Token Trees\nTokenTrees are syntactic forms for dealing with tokens. The description below is\nmore complete; in short a TokenTree is a single token, a delimited sequence of token\ntrees, or a sequence with repetition for list splicing as part of macro expansion.",null,null],[3,"Delimited","syntex_syntax::tokenstream","A delimited sequence of token trees",null,null],[12,"delim","","The type of delimiter",166,null],[12,"open_span","","The span covering the opening delimiter",166,null],[12,"tts","","The delimited sequence of token trees",166,null],[12,"close_span","","The span covering the closing delimiter",166,null],[3,"SequenceRepetition","","A sequence of token trees",null,null],[12,"tts","","The sequence of token trees",167,null],[12,"separator","","The optional separator",167,null],[12,"op","","Whether the sequence can be repeated zero (*), or one or more times (+)",167,null],[12,"num_captures","","The number of `MatchNt`s that appear in the sequence (and subsequences)",167,null],[4,"KleeneOp","","A Kleene-style [repetition operator](http://en.wikipedia.org/wiki/Kleene_star)\nfor token sequences.",null,null],[13,"ZeroOrMore","","",168,null],[13,"OneOrMore","","",168,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it\nparses the arguments to the invocation as a token-tree. This is a very\nloose structure, such that all sorts of different AST-fragments can\nbe passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",169,null],[13,"Delimited","","A delimited sequence of token trees",169,null],[13,"Sequence","","A kleene-style repetition sequence with a span",169,null],[11,"fmt","","",166,null],[11,"hash","","",166,null],[11,"decode","","",166,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",166,null],[11,"eq","","",166,null],[11,"ne","","",166,null],[11,"clone","","",166,null],[11,"open_token","","Returns the opening delimiter as a token.",166,null],[11,"close_token","","Returns the closing delimiter as a token.",166,null],[11,"open_tt","","Returns the opening delimiter as a token tree.",166,null],[11,"close_tt","","Returns the closing delimiter as a token tree.",166,null],[11,"fmt","","",167,null],[11,"hash","","",167,null],[11,"decode","","",167,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",167,null],[11,"eq","","",167,null],[11,"ne","","",167,null],[11,"clone","","",167,null],[11,"fmt","","",168,null],[11,"hash","","",168,null],[11,"decode","","",168,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",168,null],[11,"eq","","",168,null],[11,"clone","","",168,null],[11,"fmt","","",169,null],[11,"hash","","",169,null],[11,"decode","","",169,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",169,null],[11,"eq","","",169,null],[11,"ne","","",169,null],[11,"clone","","",169,null],[11,"len","","",169,null],[11,"get_tt","","",169,null],[11,"get_span","","Returns the `Span` corresponding to this token tree.",169,null],[11,"parse","","Use this token tree as a matcher to parse given tts.",169,null],[0,"visit","syntex_syntax","AST walker. Each overridden visit method has full control over what\nhappens with its node, it can do its own traversal of the node&#39;s children,\ncall `visit::walk_*` to apply the default traversal algorithm, or prevent\ndeeper traversal by doing nothing.",null,null],[4,"FnKind","syntex_syntax::visit","",null,null],[13,"ItemFn","","fn foo() or extern &quot;Abi&quot; fn foo()",170,null],[13,"Method","","fn foo(&amp;self)",170,null],[13,"Closure","","|x, y| {}",170,null],[5,"walk_opt_name","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_opt_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_opt_sp_ident","","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"ident"}],"output":null}],[5,"walk_crate","","",null,{"inputs":[{"name":"v"},{"name":"crate"}],"output":null}],[5,"walk_macro_def","","",null,{"inputs":[{"name":"v"},{"name":"macrodef"}],"output":null}],[5,"walk_mod","","",null,{"inputs":[{"name":"v"},{"name":"mod"}],"output":null}],[5,"walk_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"walk_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"traitref"}],"output":null}],[5,"walk_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"walk_enum_def","","",null,{"inputs":[{"name":"v"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_list_item","","",null,{"inputs":[{"name":"v"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"walk_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"walk_fn_kind","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"}],"output":null}],[5,"walk_fn","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"}],"output":null}],[5,"walk_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"walk_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"walk_struct_def","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_struct_field","","",null,{"inputs":[{"name":"v"},{"name":"structfield"}],"output":null}],[5,"walk_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":null}],[5,"walk_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[5,"walk_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"walk_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":null}],[5,"walk_vis","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially\noverridden.  Each method&#39;s default implementation recursively visits\nthe substructure of the input via the corresponding `walk` method;\ne.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_name","","",171,null],[11,"visit_ident","","",171,null],[11,"visit_mod","","",171,null],[11,"visit_foreign_item","","",171,null],[11,"visit_item","","",171,null],[11,"visit_local","","",171,null],[11,"visit_block","","",171,null],[11,"visit_stmt","","",171,null],[11,"visit_arm","","",171,null],[11,"visit_pat","","",171,null],[11,"visit_expr","","",171,null],[11,"visit_expr_post","","",171,null],[11,"visit_ty","","",171,null],[11,"visit_generics","","",171,null],[11,"visit_fn","","",171,null],[11,"visit_trait_item","","",171,null],[11,"visit_impl_item","","",171,null],[11,"visit_trait_ref","","",171,null],[11,"visit_ty_param_bound","","",171,null],[11,"visit_poly_trait_ref","","",171,null],[11,"visit_variant_data","","",171,null],[11,"visit_struct_field","","",171,null],[11,"visit_enum_def","","",171,null],[11,"visit_variant","","",171,null],[11,"visit_lifetime","","",171,null],[11,"visit_lifetime_def","","",171,null],[11,"visit_mac","","",171,null],[11,"visit_path","","",171,null],[11,"visit_path_list_item","","",171,null],[11,"visit_path_segment","","",171,null],[11,"visit_path_parameters","","",171,null],[11,"visit_assoc_type_binding","","",171,null],[11,"visit_attribute","","",171,null],[11,"visit_macro_def","","",171,null],[11,"visit_vis","","",171,null],[11,"eq","","",170,null],[11,"ne","","",170,null],[11,"clone","","",170,null],[0,"print","syntex_syntax","",null,null],[0,"pp","syntex_syntax::print","This pretty-printer is a direct reimplementation of Philip Karlton&#39;s\nMesa pretty-printer, as described in appendix A of",null,null],[3,"BreakToken","syntex_syntax::print::pp","",null,null],[3,"BeginToken","","",null,null],[3,"PrintStackElem","","",null,null],[3,"Printer","","In case you do not have the paper, here is an explanation of what&#39;s going\non.",null,null],[12,"out","","",172,null],[4,"Breaks","","",null,null],[13,"Consistent","","",173,null],[13,"Inconsistent","","",173,null],[4,"Token","","",null,null],[13,"String","","",174,null],[13,"Break","","",174,null],[13,"Begin","","",174,null],[13,"End","","",174,null],[13,"Eof","","",174,null],[4,"PrintStackBreak","","",null,null],[13,"Fits","","",175,null],[13,"Broken","","",175,null],[5,"mk_printer","","",null,{"inputs":[{"name":"box"},{"name":"usize"}],"output":{"name":"printer"}}],[5,"rbox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"},{"name":"breaks"}],"output":{"name":"result"}}],[5,"ibox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"cbox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"break_offset","","",null,{"inputs":[{"name":"printer"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[5,"end","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"eof","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"huge_word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"zero_word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"spaces","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"zerobreak","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"space","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"hardbreak","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"hardbreak_tok_offset","","",null,{"inputs":[{"name":"isize"}],"output":{"name":"token"}}],[5,"hardbreak_tok","","",null,{"inputs":[],"output":{"name":"token"}}],[11,"eq","","",173,null],[11,"clone","","",173,null],[11,"clone","","",176,null],[11,"clone","","",177,null],[11,"clone","","",174,null],[11,"is_eof","","",174,null],[11,"is_hardbreak_tok","","",174,null],[11,"fmt","","",174,null],[11,"clone","","",175,null],[11,"clone","","",178,null],[11,"last_token","","",172,null],[11,"replace_last_token","","",172,null],[11,"pretty_print","","",172,null],[11,"check_stream","","",172,null],[11,"scan_push","","",172,null],[11,"scan_pop","","",172,null],[11,"scan_top","","",172,null],[11,"scan_pop_bottom","","",172,null],[11,"advance_right","","",172,null],[11,"advance_left","","",172,null],[11,"check_stack","","",172,null],[11,"print_newline","","",172,null],[11,"indent","","",172,null],[11,"get_top","","",172,null],[11,"print_str","","",172,null],[11,"print","","",172,null],[0,"pprust","syntex_syntax::print","",null,null],[3,"NoAnn","syntex_syntax::print::pprust","",null,null],[3,"CurrentCommentAndLiteral","","",null,null],[12,"cur_cmnt","","",179,null],[12,"cur_lit","","",179,null],[3,"State","","",null,null],[12,"s","","",180,null],[4,"AnnNode","","",null,null],[13,"NodeIdent","","",181,null],[13,"NodeName","","",181,null],[13,"NodeBlock","","",181,null],[13,"NodeItem","","",181,null],[13,"NodeSubItem","","",181,null],[13,"NodeExpr","","",181,null],[13,"NodePat","","",181,null],[5,"rust_printer","","",null,{"inputs":[{"name":"box"}],"output":{"name":"state"}}],[5,"rust_printer_annotated","","",null,{"inputs":[{"name":"box"},{"name":"ppann"}],"output":{"name":"state"}}],[5,"print_crate","","Requires you to pass an input filename and reader so that\nit can scan the input text for comments and literals to\ncopy forward.",null,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"crate"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"result"}}],[5,"to_string","","",null,{"inputs":[{"name":"f"}],"output":{"name":"string"}}],[5,"binop_to_string","","",null,{"inputs":[{"name":"binoptoken"}],"output":{"name":"str"}}],[5,"token_to_string","","",null,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[5,"ty_to_string","","",null,{"inputs":[{"name":"ty"}],"output":{"name":"string"}}],[5,"bounds_to_string","","",null,null],[5,"pat_to_string","","",null,{"inputs":[{"name":"pat"}],"output":{"name":"string"}}],[5,"arm_to_string","","",null,{"inputs":[{"name":"arm"}],"output":{"name":"string"}}],[5,"expr_to_string","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"string"}}],[5,"lifetime_to_string","","",null,{"inputs":[{"name":"lifetime"}],"output":{"name":"string"}}],[5,"tt_to_string","","",null,{"inputs":[{"name":"tokentree"}],"output":{"name":"string"}}],[5,"tts_to_string","","",null,null],[5,"stmt_to_string","","",null,{"inputs":[{"name":"stmt"}],"output":{"name":"string"}}],[5,"attr_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"item_to_string","","",null,{"inputs":[{"name":"item"}],"output":{"name":"string"}}],[5,"impl_item_to_string","","",null,{"inputs":[{"name":"implitem"}],"output":{"name":"string"}}],[5,"trait_item_to_string","","",null,{"inputs":[{"name":"traititem"}],"output":{"name":"string"}}],[5,"generics_to_string","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"string"}}],[5,"where_clause_to_string","","",null,{"inputs":[{"name":"whereclause"}],"output":{"name":"string"}}],[5,"fn_block_to_string","","",null,{"inputs":[{"name":"fndecl"}],"output":{"name":"string"}}],[5,"path_to_string","","",null,{"inputs":[{"name":"path"}],"output":{"name":"string"}}],[5,"ident_to_string","","",null,{"inputs":[{"name":"ident"}],"output":{"name":"string"}}],[5,"fun_to_string","","",null,{"inputs":[{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"ident"},{"name":"generics"}],"output":{"name":"string"}}],[5,"block_to_string","","",null,{"inputs":[{"name":"block"}],"output":{"name":"string"}}],[5,"meta_item_to_string","","",null,{"inputs":[{"name":"metaitem"}],"output":{"name":"string"}}],[5,"attribute_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"lit_to_string","","",null,{"inputs":[{"name":"lit"}],"output":{"name":"string"}}],[5,"variant_to_string","","",null,{"inputs":[{"name":"variant"}],"output":{"name":"string"}}],[5,"arg_to_string","","",null,{"inputs":[{"name":"arg"}],"output":{"name":"string"}}],[5,"mac_to_string","","",null,{"inputs":[{"name":"mac"}],"output":{"name":"string"}}],[5,"visibility_qualified","","",null,{"inputs":[{"name":"visibility"},{"name":"str"}],"output":{"name":"string"}}],[17,"INDENT_UNIT","","",null,null],[17,"DEFAULT_COLUMNS","","",null,null],[8,"PpAnn","","",null,null],[11,"pre","","",182,null],[11,"post","","",182,null],[8,"PrintState","","",null,null],[10,"writer","","",183,null],[10,"boxes","","",183,null],[10,"comments","","",183,null],[10,"cur_cmnt_and_lit","","",183,null],[10,"literals","","",183,null],[11,"word_space","","",183,null],[11,"popen","","",183,null],[11,"pclose","","",183,null],[11,"is_begin","","",183,null],[11,"is_end","","",183,null],[11,"is_bol","","",183,null],[11,"hardbreak_if_not_bol","","",183,null],[11,"rbox","","",183,null],[11,"ibox","","",183,null],[11,"end","","",183,null],[11,"commasep","","",183,null],[11,"next_lit","","",183,null],[11,"maybe_print_comment","","",183,null],[11,"print_comment","","",183,null],[11,"next_comment","","",183,null],[11,"print_literal","","",183,null],[11,"print_string","","",183,null],[11,"print_inner_attributes","","",183,null],[11,"print_inner_attributes_no_trailing_hardbreak","","",183,null],[11,"print_outer_attributes","","",183,null],[11,"print_inner_attributes_inline","","",183,null],[11,"print_outer_attributes_inline","","",183,null],[11,"print_either_attributes","","",183,null],[11,"print_attribute","","",183,null],[11,"print_attribute_inline","","",183,null],[11,"print_meta_item","","",183,null],[11,"space_if_not_bol","","",183,null],[11,"nbsp","","",183,null],[11,"clone","","",184,null],[11,"clone","","",179,null],[11,"new_from_input","","",180,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"state"}}],[11,"new","","",180,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"writer","","",180,null],[11,"boxes","","",180,null],[11,"comments","","",180,null],[11,"cur_cmnt_and_lit","","",180,null],[11,"literals","","",180,null],[11,"cbox","","",180,null],[11,"word_nbsp","","",180,null],[11,"head","","",180,null],[11,"bopen","","",180,null],[11,"bclose_","","",180,null],[11,"bclose_maybe_open","","",180,null],[11,"bclose","","",180,null],[11,"in_cbox","","",180,null],[11,"break_offset_if_not_bol","","",180,null],[11,"synth_comment","","",180,null],[11,"commasep_cmnt","","",180,null],[11,"commasep_exprs","","",180,null],[11,"print_mod","","",180,null],[11,"print_foreign_mod","","",180,null],[11,"print_opt_lifetime","","",180,null],[11,"print_type","","",180,null],[11,"print_foreign_item","","",180,null],[11,"print_item","","Pretty-print an item",180,null],[11,"print_enum_def","","",180,null],[11,"print_variants","","",180,null],[11,"print_visibility","","",180,null],[11,"print_struct","","",180,null],[11,"print_tt","","This doesn&#39;t deserve to be called &quot;pretty&quot; printing, but it should be\nmeaning-preserving. A quick hack that might help would be to look at the\nspans embedded in the TTs to decide where to put spaces and newlines.\nBut it&#39;d be better to parse these according to the grammar of the\nappropriate macro, transcribe back into the grammar we just parsed from,\nand then pretty-print the resulting AST nodes (so, e.g., we print\nexpression arguments as expressions). It can be done! I think.",180,null],[11,"print_tts","","",180,null],[11,"print_variant","","",180,null],[11,"print_method_sig","","",180,null],[11,"print_trait_item","","",180,null],[11,"print_impl_item","","",180,null],[11,"print_stmt","","",180,null],[11,"print_block","","",180,null],[11,"print_block_unclosed","","",180,null],[11,"print_block_unclosed_with_attrs","","",180,null],[11,"print_block_unclosed_indent","","",180,null],[11,"print_block_with_attrs","","",180,null],[11,"print_block_maybe_unclosed","","",180,null],[11,"print_if","","",180,null],[11,"print_if_let","","",180,null],[11,"print_mac","","",180,null],[11,"check_expr_bin_needs_paren","","",180,null],[11,"print_expr_maybe_paren","","",180,null],[11,"print_expr","","",180,null],[11,"print_local_decl","","",180,null],[11,"print_ident","","",180,null],[11,"print_usize","","",180,null],[11,"print_name","","",180,null],[11,"print_for_decl","","",180,null],[11,"print_pat","","",180,null],[11,"print_fn","","",180,null],[11,"print_fn_args_and_ret","","",180,null],[11,"print_fn_block_args","","",180,null],[11,"print_capture_clause","","",180,null],[11,"print_bounds","","",180,null],[11,"print_lifetime","","",180,null],[11,"print_lifetime_bounds","","",180,null],[11,"print_generics","","",180,null],[11,"print_ty_param","","",180,null],[11,"print_where_clause","","",180,null],[11,"print_view_path","","",180,null],[11,"print_mutability","","",180,null],[11,"print_mt","","",180,null],[11,"print_arg","","",180,null],[11,"print_fn_output","","",180,null],[11,"print_ty_fn","","",180,null],[11,"maybe_print_trailing_comment","","",180,null],[11,"print_remaining_comments","","",180,null],[11,"print_opt_abi_and_extern_if_nondefault","","",180,null],[11,"print_extern_opt_abi","","",180,null],[11,"print_fn_header_info","","",180,null],[11,"print_unsafety","","",180,null],[0,"ext","syntex_syntax","",null,null],[0,"base","syntex_syntax::ext","",null,null],[3,"MacEager","syntex_syntax::ext::base","`MacResult` implementation for the common case where you&#39;ve already\nbuilt each form of AST that you might return.",null,null],[12,"expr","","",185,null],[12,"pat","","",185,null],[12,"items","","",185,null],[12,"impl_items","","",185,null],[12,"trait_items","","",185,null],[12,"stmts","","",185,null],[12,"ty","","",185,null],[3,"DummyResult","","Fill-in macro expansion result, to allow compilation to continue\nafter hitting errors.",null,null],[3,"BlockInfo","","",null,null],[12,"macros_escape","","Should macros escape from this scope?",186,null],[12,"pending_renames","","What are the pending renames?",186,null],[3,"DummyMacroLoader","","",null,null],[3,"ExtCtxt","","One of these is made during expansion and incrementally updated as we go;\nwhen a macro expansion occurs, the resulting nodes have the backtrace()\n-&gt; expn_info of their expansion context stored into their span.",null,null],[12,"parse_sess","","",187,null],[12,"cfg","","",187,null],[12,"backtrace","","",187,null],[12,"ecfg","","",187,null],[12,"crate_root","","",187,null],[12,"loader","","",187,null],[12,"mod_path","","",187,null],[12,"exported_macros","","",187,null],[12,"syntax_env","","",187,null],[12,"recursion_count","","",187,null],[12,"filename","","",187,null],[12,"mod_path_stack","","",187,null],[12,"in_block","","",187,null],[3,"SyntaxEnv","","In order to have some notion of scoping for macros,\nwe want to implement the notion of a transformation\nenvironment.",null,null],[12,"names","","All bang-style macro/extension names\nencountered so far; to be used for diagnostics in resolve",188,null],[4,"Annotatable","","",null,null],[13,"Item","","",189,null],[13,"TraitItem","","",189,null],[13,"ImplItem","","",189,null],[4,"SyntaxExtension","","An enum representing the different kinds of syntax extensions.",null,null],[13,"MultiDecorator","","A syntax extension that is attached to an item and creates new items\nbased upon it.",190,null],[13,"MultiModifier","","A syntax extension that is attached to an item and modifies it\nin-place. More flexible version than Modifier.",190,null],[13,"NormalTT","","A normal, function-like syntax extension.",190,null],[13,"IdentTT","","A function-like syntax extension that has an extra ident before\nthe block.",190,null],[13,"MacroRulesTT","","Represents `macro_rules!` itself.",190,null],[5,"expr_to_string","","Extract a string literal from the macro expanded version of `expr`,\nemitting `err_msg` if `expr` is not a string literal. This does not stop\ncompilation on error, merely emits a non-fatal error and returns None.",null,{"inputs":[{"name":"extctxt"},{"name":"p"},{"name":"str"}],"output":{"name":"option"}}],[5,"check_zero_tts","","Non-fatally assert that `tts` is empty. Note that this function\nreturns even when `tts` is non-empty, macros that *need* to stop\ncompilation should call\n`cx.parse_sess.span_diagnostic.abort_if_errors()` (this should be\ndone as rarely as possible).",null,null],[5,"get_single_str_from_tts","","Extract the string literal from the first token of `tts`. If this\nis not a string literal, emit an error and return None.",null,null],[5,"get_exprs_from_tts","","Extract comma-separated expressions from `tts`. If there is a\nparsing error, emit a non-fatal error and return None.",null,null],[6,"MacroExpanderFn","","",null,null],[6,"IdentMacroExpanderFn","","",null,null],[6,"NamedSyntaxExtension","","",null,null],[8,"MultiItemDecorator","","",null,null],[10,"expand","","",191,null],[8,"MultiItemModifier","","",null,null],[10,"expand","","",192,null],[8,"TTMacroExpander","","Represents a thing that maps token trees to Macro Results",null,null],[10,"expand","","",193,null],[8,"IdentMacroExpander","","",null,null],[10,"expand","","",194,null],[8,"MacResult","","The result of a macro expansion. The return values of the various\nmethods are spliced into the AST at the callsite of the macro.",null,null],[11,"make_expr","","Create an expression.",195,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","Create zero or more items.",195,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","Create zero or more impl items.",195,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","Create zero or more trait items.",195,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","Create a pattern.",195,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","Create zero or more statements.",195,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",195,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[8,"MacroLoader","","",null,null],[10,"load_crate","","",196,null],[11,"clone","","",189,null],[11,"fmt","","",189,null],[11,"attrs","","",189,null],[11,"map_attrs","","",189,null],[11,"attrs","","",189,null],[11,"fold_attrs","","",189,null],[11,"expect_item","","",189,null],[11,"map_item_or","","",189,null],[11,"expect_trait_item","","",189,null],[11,"expect_impl_item","","",189,null],[11,"fold_with","","",189,null],[11,"into","","",189,null],[11,"default","","",185,{"inputs":[],"output":{"name":"maceager"}}],[11,"expr","","",185,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"pat","","",185,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"items","","",185,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"impl_items","","",185,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"trait_items","","",185,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"stmts","","",185,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"ty","","",185,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"make_expr","","",185,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",185,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",185,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","",185,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",185,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",185,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",185,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"clone","","",197,null],[11,"any","","Create a default MacResult that can be anything.",197,{"inputs":[{"name":"span"}],"output":{"name":"box"}}],[11,"expr","","Create a default MacResult that can only be an expression.",197,{"inputs":[{"name":"span"}],"output":{"name":"box"}}],[11,"raw_expr","","A plain dummy expression.",197,{"inputs":[{"name":"span"}],"output":{"name":"p"}}],[11,"raw_pat","","A plain dummy pattern.",197,{"inputs":[{"name":"span"}],"output":{"name":"pat"}}],[11,"raw_ty","","",197,{"inputs":[{"name":"span"}],"output":{"name":"p"}}],[11,"make_expr","","",197,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",197,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",197,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",197,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","",197,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",197,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",197,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"new","","",186,{"inputs":[],"output":{"name":"blockinfo"}}],[11,"load_crate","","",198,null],[11,"new","","",187,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"expansionconfig"},{"name":"macroloader"}],"output":{"name":"extctxt"}}],[11,"expander","","Returns a `Folder` for deeply expanding all macros in an AST node.",187,null],[11,"new_parser_from_tts","","",187,null],[11,"codemap","","",187,null],[11,"parse_sess","","",187,null],[11,"cfg","","",187,null],[11,"call_site","","",187,null],[11,"backtrace","","",187,null],[11,"expansion_cause","","Returns span for the macro which originally caused the current expansion to happen.",187,null],[11,"mod_push","","",187,null],[11,"mod_pop","","",187,null],[11,"mod_path","","",187,null],[11,"bt_push","","",187,null],[11,"bt_pop","","",187,null],[11,"insert_macro","","",187,null],[11,"struct_span_warn","","",187,null],[11,"struct_span_err","","",187,null],[11,"struct_span_fatal","","",187,null],[11,"span_fatal","","Emit `msg` attached to `sp`, and stop compilation immediately.",187,null],[11,"span_err","","Emit `msg` attached to `sp`, without immediately stopping\ncompilation.",187,null],[11,"span_warn","","",187,null],[11,"span_unimpl","","",187,null],[11,"span_bug","","",187,null],[11,"bug","","",187,null],[11,"trace_macros","","",187,null],[11,"set_trace_macros","","",187,null],[11,"ident_of","","",187,null],[11,"std_path","","",187,null],[11,"name_of","","",187,null],[11,"suggest_macro_name","","",187,null],[11,"push_frame","","",188,null],[11,"pop_frame","","",188,null],[11,"find","","",188,null],[11,"insert","","",188,null],[11,"info","","",188,null],[11,"is_crate_root","","",188,null],[0,"build","syntex_syntax::ext","",null,null],[8,"AstBuilder","syntex_syntax::ext::build","",null,null],[10,"path","","",199,null],[10,"path_ident","","",199,null],[10,"path_global","","",199,null],[10,"path_all","","",199,null],[10,"qpath","","",199,null],[10,"qpath_all","","",199,null],[10,"ty_mt","","",199,null],[10,"ty","","",199,null],[10,"ty_path","","",199,null],[10,"ty_sum","","",199,null],[10,"ty_ident","","",199,null],[10,"ty_rptr","","",199,null],[10,"ty_ptr","","",199,null],[10,"ty_option","","",199,null],[10,"ty_infer","","",199,null],[10,"ty_vars","","",199,null],[10,"ty_vars_global","","",199,null],[10,"typaram","","",199,null],[10,"trait_ref","","",199,null],[10,"poly_trait_ref","","",199,null],[10,"typarambound","","",199,null],[10,"lifetime","","",199,null],[10,"lifetime_def","","",199,null],[10,"stmt_expr","","",199,null],[10,"stmt_semi","","",199,null],[10,"stmt_let","","",199,null],[10,"stmt_let_typed","","",199,null],[10,"stmt_item","","",199,null],[10,"block","","",199,null],[10,"block_expr","","",199,null],[10,"expr","","",199,null],[10,"expr_path","","",199,null],[10,"expr_qpath","","",199,null],[10,"expr_ident","","",199,null],[10,"expr_self","","",199,null],[10,"expr_binary","","",199,null],[10,"expr_deref","","",199,null],[10,"expr_unary","","",199,null],[10,"expr_addr_of","","",199,null],[10,"expr_mut_addr_of","","",199,null],[10,"expr_field_access","","",199,null],[10,"expr_tup_field_access","","",199,null],[10,"expr_call","","",199,null],[10,"expr_call_ident","","",199,null],[10,"expr_call_global","","",199,null],[10,"expr_method_call","","",199,null],[10,"expr_block","","",199,null],[10,"expr_cast","","",199,null],[10,"field_imm","","",199,null],[10,"expr_struct","","",199,null],[10,"expr_struct_ident","","",199,null],[10,"expr_lit","","",199,null],[10,"expr_usize","","",199,null],[10,"expr_isize","","",199,null],[10,"expr_u8","","",199,null],[10,"expr_u32","","",199,null],[10,"expr_bool","","",199,null],[10,"expr_vec","","",199,null],[10,"expr_vec_ng","","",199,null],[10,"expr_vec_slice","","",199,null],[10,"expr_str","","",199,null],[10,"expr_some","","",199,null],[10,"expr_none","","",199,null],[10,"expr_break","","",199,null],[10,"expr_tuple","","",199,null],[10,"expr_fail","","",199,null],[10,"expr_unreachable","","",199,null],[10,"expr_ok","","",199,null],[10,"expr_err","","",199,null],[10,"expr_try","","",199,null],[10,"pat","","",199,null],[10,"pat_wild","","",199,null],[10,"pat_lit","","",199,null],[10,"pat_ident","","",199,null],[10,"pat_ident_binding_mode","","",199,null],[10,"pat_enum","","",199,null],[10,"pat_struct","","",199,null],[10,"pat_tuple","","",199,null],[10,"pat_some","","",199,null],[10,"pat_none","","",199,null],[10,"pat_ok","","",199,null],[10,"pat_err","","",199,null],[10,"arm","","",199,null],[10,"arm_unreachable","","",199,null],[10,"expr_match","","",199,null],[10,"expr_if","","",199,null],[10,"expr_loop","","",199,null],[10,"lambda_fn_decl","","",199,null],[10,"lambda","","",199,null],[10,"lambda0","","",199,null],[10,"lambda1","","",199,null],[10,"lambda_expr","","",199,null],[10,"lambda_expr_0","","",199,null],[10,"lambda_expr_1","","",199,null],[10,"lambda_stmts","","",199,null],[10,"lambda_stmts_0","","",199,null],[10,"lambda_stmts_1","","",199,null],[10,"item","","",199,null],[10,"arg","","",199,null],[10,"fn_decl","","",199,null],[10,"item_fn_poly","","",199,null],[10,"item_fn","","",199,null],[10,"variant","","",199,null],[10,"item_enum_poly","","",199,null],[10,"item_enum","","",199,null],[10,"item_struct_poly","","",199,null],[10,"item_struct","","",199,null],[10,"item_mod","","",199,null],[10,"item_static","","",199,null],[10,"item_const","","",199,null],[10,"item_ty_poly","","",199,null],[10,"item_ty","","",199,null],[10,"attribute","","",199,null],[10,"meta_word","","",199,null],[10,"meta_list","","",199,null],[10,"meta_name_value","","",199,null],[10,"item_use","","",199,null],[10,"item_use_simple","","",199,null],[10,"item_use_simple_","","",199,null],[10,"item_use_list","","",199,null],[10,"item_use_glob","","",199,null],[11,"path","syntex_syntax::ext::base","",187,null],[11,"path_ident","","",187,null],[11,"path_global","","",187,null],[11,"path_all","","",187,null],[11,"qpath","","Constructs a qualified path.",187,null],[11,"qpath_all","","Constructs a qualified path.",187,null],[11,"ty_mt","","",187,null],[11,"ty","","",187,null],[11,"ty_path","","",187,null],[11,"ty_sum","","",187,null],[11,"ty_ident","","",187,null],[11,"ty_rptr","","",187,null],[11,"ty_ptr","","",187,null],[11,"ty_option","","",187,null],[11,"ty_infer","","",187,null],[11,"typaram","","",187,null],[11,"ty_vars","","",187,null],[11,"ty_vars_global","","",187,null],[11,"trait_ref","","",187,null],[11,"poly_trait_ref","","",187,null],[11,"typarambound","","",187,null],[11,"lifetime","","",187,null],[11,"lifetime_def","","",187,null],[11,"stmt_expr","","",187,null],[11,"stmt_semi","","",187,null],[11,"stmt_let","","",187,null],[11,"stmt_let_typed","","",187,null],[11,"stmt_item","","",187,null],[11,"block_expr","","",187,null],[11,"block","","",187,null],[11,"expr","","",187,null],[11,"expr_path","","",187,null],[11,"expr_qpath","","Constructs a QPath expression.",187,null],[11,"expr_ident","","",187,null],[11,"expr_self","","",187,null],[11,"expr_binary","","",187,null],[11,"expr_deref","","",187,null],[11,"expr_unary","","",187,null],[11,"expr_field_access","","",187,null],[11,"expr_tup_field_access","","",187,null],[11,"expr_addr_of","","",187,null],[11,"expr_mut_addr_of","","",187,null],[11,"expr_call","","",187,null],[11,"expr_call_ident","","",187,null],[11,"expr_call_global","","",187,null],[11,"expr_method_call","","",187,null],[11,"expr_block","","",187,null],[11,"field_imm","","",187,null],[11,"expr_struct","","",187,null],[11,"expr_struct_ident","","",187,null],[11,"expr_lit","","",187,null],[11,"expr_usize","","",187,null],[11,"expr_isize","","",187,null],[11,"expr_u32","","",187,null],[11,"expr_u8","","",187,null],[11,"expr_bool","","",187,null],[11,"expr_vec","","",187,null],[11,"expr_vec_ng","","",187,null],[11,"expr_vec_slice","","",187,null],[11,"expr_str","","",187,null],[11,"expr_cast","","",187,null],[11,"expr_some","","",187,null],[11,"expr_none","","",187,null],[11,"expr_break","","",187,null],[11,"expr_tuple","","",187,null],[11,"expr_fail","","",187,null],[11,"expr_unreachable","","",187,null],[11,"expr_ok","","",187,null],[11,"expr_err","","",187,null],[11,"expr_try","","",187,null],[11,"pat","","",187,null],[11,"pat_wild","","",187,null],[11,"pat_lit","","",187,null],[11,"pat_ident","","",187,null],[11,"pat_ident_binding_mode","","",187,null],[11,"pat_enum","","",187,null],[11,"pat_struct","","",187,null],[11,"pat_tuple","","",187,null],[11,"pat_some","","",187,null],[11,"pat_none","","",187,null],[11,"pat_ok","","",187,null],[11,"pat_err","","",187,null],[11,"arm","","",187,null],[11,"arm_unreachable","","",187,null],[11,"expr_match","","",187,null],[11,"expr_if","","",187,null],[11,"expr_loop","","",187,null],[11,"lambda_fn_decl","","",187,null],[11,"lambda","","",187,null],[11,"lambda0","","",187,null],[11,"lambda1","","",187,null],[11,"lambda_expr","","",187,null],[11,"lambda_expr_0","","",187,null],[11,"lambda_expr_1","","",187,null],[11,"lambda_stmts","","",187,null],[11,"lambda_stmts_0","","",187,null],[11,"lambda_stmts_1","","",187,null],[11,"arg","","",187,null],[11,"fn_decl","","",187,null],[11,"item","","",187,null],[11,"item_fn_poly","","",187,null],[11,"item_fn","","",187,null],[11,"variant","","",187,null],[11,"item_enum_poly","","",187,null],[11,"item_enum","","",187,null],[11,"item_struct","","",187,null],[11,"item_struct_poly","","",187,null],[11,"item_mod","","",187,null],[11,"item_static","","",187,null],[11,"item_const","","",187,null],[11,"item_ty_poly","","",187,null],[11,"item_ty","","",187,null],[11,"attribute","","",187,null],[11,"meta_word","","",187,null],[11,"meta_list","","",187,null],[11,"meta_name_value","","",187,null],[11,"item_use","","",187,null],[11,"item_use_simple","","",187,null],[11,"item_use_simple_","","",187,null],[11,"item_use_list","","",187,null],[11,"item_use_glob","","",187,null],[0,"decorator","syntex_syntax::ext","",null,null],[5,"expand_annotatable","syntex_syntax::ext::decorator","",null,{"inputs":[{"name":"annotatable"},{"name":"macroexpander"}],"output":{"name":"smallvector"}}],[0,"env","syntex_syntax::ext","",null,null],[5,"expand_option_env","syntex_syntax::ext::env","",null,null],[5,"expand_env","","",null,null],[0,"expand","syntex_syntax::ext","",null,null],[3,"IdentRenamer","syntex_syntax::ext::expand","A tree-folder that applies every rename in its (mutable) list\nto every identifier, including both bindings and varrefs\n(and lots of things that will turn out to be neither)",null,null],[3,"PatIdentRenamer","","A tree-folder that applies every rename in its list to\nthe idents that are in PatKind::Ident patterns. This is more narrowly\nfocused than IdentRenamer, and is needed for FnDecl,\nwhere we want to rename the args but not the fn name or the generics etc.",null,null],[3,"MacroExpander","","A tree-folder that performs macro expansion",null,null],[12,"cx","","",200,null],[3,"ExpansionConfig","","",null,null],[12,"crate_name","","",201,null],[12,"features","","",201,null],[12,"recursion_limit","","",201,null],[12,"trace_mac","","",201,null],[12,"should_test","","",201,null],[5,"expand_expr","","",null,{"inputs":[{"name":"expr"},{"name":"macroexpander"}],"output":{"name":"p"}}],[5,"expand_item","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"smallvector"}}],[5,"expand_block","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"p"}}],[5,"expand_block_elts","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"p"}}],[5,"expand_multi_modified","","",null,{"inputs":[{"name":"annotatable"},{"name":"macroexpander"}],"output":{"name":"smallvector"}}],[5,"expand_type","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"p"}}],[5,"expand_crate","","",null,null],[11,"fold_ident","","",202,null],[11,"fold_mac","","",202,null],[11,"fold_pat","","",203,null],[11,"fold_mac","","",203,null],[11,"new","","",200,{"inputs":[{"name":"extctxt"}],"output":{"name":"macroexpander"}}],[11,"fold_crate","","",200,null],[11,"fold_expr","","",200,null],[11,"fold_opt_expr","","",200,null],[11,"fold_pat","","",200,null],[11,"fold_item","","",200,null],[11,"fold_item_kind","","",200,null],[11,"fold_stmt","","",200,null],[11,"fold_block","","",200,null],[11,"fold_arm","","",200,null],[11,"fold_trait_item","","",200,null],[11,"fold_impl_item","","",200,null],[11,"fold_ty","","",200,null],[11,"default","","",201,{"inputs":[{"name":"string"}],"output":{"name":"expansionconfig"}}],[11,"enable_quotes","","",201,null],[11,"enable_asm","","",201,null],[11,"enable_log_syntax","","",201,null],[11,"enable_concat_idents","","",201,null],[11,"enable_trace_macros","","",201,null],[11,"enable_allow_internal_unstable","","",201,null],[11,"enable_custom_derive","","",201,null],[11,"enable_pushpop_unsafe","","",201,null],[0,"mtwt","syntex_syntax::ext","Machinery for hygienic macros, as described in the MTWT[1] paper.",null,null],[3,"SCTable","syntex_syntax::ext::mtwt","The SCTable contains a table of SyntaxContext_&#39;s. It\nrepresents a flattened tree structure, to avoid having\nmanaged pointers everywhere (that caused an ICE).\nthe `marks` and `renames` fields are side-tables\nthat ensure that adding the same mark to the same context\ngives you back the same context as before. This should cut\ndown on memory use *a lot*; applying a mark to a tree containing\n50 identifiers would otherwise generate 50 new contexts.",null,null],[4,"SyntaxContext_","","",null,null],[13,"EmptyCtxt","","",204,null],[13,"Mark","","",204,null],[13,"Rename","","",204,null],[13,"IllegalCtxt","","actually, IllegalCtxt may not be necessary.",204,null],[5,"apply_mark","","Extend a syntax context with a given mark",null,{"inputs":[{"name":"mrk"},{"name":"syntaxcontext"}],"output":{"name":"syntaxcontext"}}],[5,"apply_rename","","Extend a syntax context with a given rename",null,{"inputs":[{"name":"ident"},{"name":"name"},{"name":"ident"}],"output":{"name":"ident"}}],[5,"apply_renames","","Apply a list of renamings to a context",null,{"inputs":[{"name":"renamelist"},{"name":"ident"}],"output":{"name":"ident"}}],[5,"with_sctable","","Fetch the SCTable from TLS, create one if it doesn&#39;t yet exist.",null,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[5,"display_sctable","","Print out an SCTable for debugging",null,{"inputs":[{"name":"sctable"}],"output":null}],[5,"clear_tables","","Clear the tables from TLD to reclaim memory.",null,{"inputs":[],"output":null}],[5,"reset_tables","","Reset the tables to their initial state",null,{"inputs":[],"output":null}],[5,"resolve","","Resolve a syntax object to a name, per MTWT.",null,{"inputs":[{"name":"ident"}],"output":{"name":"name"}}],[5,"outer_mark","","Return the outer mark for a context with a mark at the outside.\nFAILS when outside is not a mark.",null,{"inputs":[{"name":"syntaxcontext"}],"output":{"name":"mrk"}}],[6,"RenameList","","A list of ident-&gt;name renamings",null,null],[11,"clone","","",204,null],[11,"fmt","","",204,null],[11,"hash","","",204,null],[11,"decode","","",204,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",204,null],[11,"eq","","",204,null],[11,"ne","","",204,null],[0,"quote","syntex_syntax::ext","",null,null],[5,"parse_expr_panic","syntex_syntax::ext::quote","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_pat_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_arm_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arm"}}],[5,"parse_ty_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_stmt_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_attribute_panic","","",null,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"attribute"}}],[5,"parse_arg_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arg"}}],[5,"parse_block_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_meta_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_path_panic","","",null,{"inputs":[{"name":"parser"},{"name":"pathstyle"}],"output":{"name":"path"}}],[5,"expand_quote_tokens","","",null,null],[5,"expand_quote_expr","","",null,null],[5,"expand_quote_item","","",null,null],[5,"expand_quote_pat","","",null,null],[5,"expand_quote_arm","","",null,null],[5,"expand_quote_ty","","",null,null],[5,"expand_quote_stmt","","",null,null],[5,"expand_quote_attr","","",null,null],[5,"expand_quote_arg","","",null,null],[5,"expand_quote_block","","",null,null],[5,"expand_quote_meta_item","","",null,null],[5,"expand_quote_path","","",null,null],[5,"expand_quote_matcher","","",null,null],[0,"rt","","Quasiquoting works via token trees.",null,null],[3,"BytePos","syntex_syntax::ext::quote::rt","A byte offset. Keep this small (currently 32-bits), as AST contains\na lot of them.",null,null],[12,"0","","",205,null],[3,"Span","","Spans represent a region of code, used for error reporting. Positions in spans\nare *absolute* positions from the beginning of the codemap, not positions\nrelative to FileMaps. Methods on the CodeMap can be used to relate spans back\nto the original source.\nYou must be careful if the span crosses more than one file - you will not be\nable to use many of the functions on spans in codemap and you cannot assume\nthat the length of the span = hi - lo; there may be space in the BytePos\nrange between files.",null,null],[12,"lo","","",206,null],[12,"hi","","",206,null],[12,"expn_id","","Information about where the macro came from, if this piece of\ncode was created by a macro expansion.",206,null],[17,"DUMMY_SP","","",null,null],[8,"ToTokens","","",null,null],[10,"to_tokens","","",207,null],[8,"ExtParseUtils","","",null,null],[10,"parse_item","","",208,null],[10,"parse_expr","","",208,null],[10,"parse_stmt","","",208,null],[10,"parse_tts","","",208,null],[11,"to_tokens","syntex_syntax::tokenstream","",169,null],[11,"to_tokens","syntex_syntax::codemap","",121,null],[11,"to_tokens","syntex_syntax::ast","",21,null],[11,"to_tokens","","",24,null],[11,"to_tokens","","",50,null],[11,"to_tokens","","",35,null],[11,"to_tokens","","",29,null],[11,"to_tokens","","",30,null],[11,"to_tokens","syntex_syntax::ptr","",165,null],[11,"to_tokens","syntex_syntax::ast","",48,null],[11,"to_tokens","syntex_syntax::ptr","",165,null],[11,"to_tokens","syntex_syntax::ast","",47,null],[11,"to_tokens","","",38,null],[11,"to_tokens","syntex_syntax::ptr","",165,null],[11,"to_tokens","","",165,null],[11,"to_tokens","syntex_syntax::ast","",40,null],[11,"to_tokens","","",54,null],[11,"to_tokens","syntex_syntax::ptr","",165,null],[11,"to_tokens","","",165,null],[11,"to_tokens","syntex_syntax::ext::quote::rt","",118,null],[11,"to_tokens","","",209,null],[11,"parse_item","syntex_syntax::ext::base","",187,null],[11,"parse_stmt","","",187,null],[11,"parse_expr","","",187,null],[11,"parse_tts","","",187,null],[0,"source_util","syntex_syntax::ext","",null,null],[5,"expand_line","syntex_syntax::ext::source_util","line!(): expands to the current line number",null,null],[5,"expand_column","","",null,null],[5,"expand_file","","file!(): expands to the current filename */\nThe filemap (`loc.file`) contains a bunch more information we could spit\nout if we wanted.",null,null],[5,"expand_stringify","","",null,null],[5,"expand_mod","","",null,null],[5,"expand_include","","include! : parse the given file as an expr\nThis is generally a bad idea because it&#39;s going to behave\nunhygienically.",null,null],[5,"expand_include_str","","",null,null],[5,"expand_include_bytes","","",null,null],[0,"tt","syntex_syntax::ext","",null,null],[0,"transcribe","syntex_syntax::ext::tt","",null,null],[3,"TtReader","syntex_syntax::ext::tt::transcribe","",null,null],[12,"sp_diag","","",210,null],[12,"cur_tok","","",210,null],[12,"cur_span","","",210,null],[12,"desugar_doc_comments","","Transform doc comments. Only useful in macro invocations",210,null],[12,"fatal_errs","","",210,null],[5,"new_tt_reader","","This can do Macro-By-Example transcription. On the other hand, if\n`src` contains no `TokenTree::Sequence`s, `MatchNt`s or `SubstNt`s, `interp` can\n(and should) be None.",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"option"},{"name":"vec"}],"output":{"name":"ttreader"}}],[5,"new_tt_reader_with_doc_flag","","The extra `desugar_doc_comments` flag enables reading doc comments\nlike any other attribute which consists of `meta` and surrounding #[ ] tokens.",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"option"},{"name":"vec"},{"name":"bool"}],"output":{"name":"ttreader"}}],[5,"tt_next_token","","Return the next token from the TtReader.\nEFFECT: advances the reader&#39;s token field",null,{"inputs":[{"name":"ttreader"}],"output":{"name":"tokenandspan"}}],[11,"clone","","",210,null],[0,"macro_parser","syntex_syntax::ext::tt","This is an Earley-like parser, without support for in-grammar nonterminals,\nonly by calling out to the main rust parser for named nonterminals (which it\ncommits to fully when it hits one in a grammar). This means that there are no\ncompleter or predictor rules, and therefore no need to store one column per\ntoken: instead, there&#39;s a set of current Earley items and a set of next\nones. Instead of NTs, we have a special case for Kleene star. The big-O, in\npathological cases, is worse than traditional Earley parsing, but it&#39;s an\neasier fit for Macro-by-Example-style rules, and I think the overhead is\nlower. (In order to prevent the pathological case, we&#39;d need to lazily\nconstruct the resulting `NamedMatch`es at the very end. It&#39;d be a pain,\nand require more memory to keep around old items, but it would also save\noverhead)",null,null],[3,"MatcherPos","syntex_syntax::ext::tt::macro_parser","",null,null],[4,"NamedMatch","","NamedMatch is a pattern-match result for a single token::MATCH_NONTERMINAL:\nso it is associated with a single ident in a parse, and all\n`MatchedNonterminal`s in the NamedMatch have the same nonterminal type\n(expr, item, etc). Each leaf in a single NamedMatch corresponds to a\nsingle token::MATCH_NONTERMINAL in the TokenTree that produced it.",null,null],[13,"MatchedSeq","","",211,null],[13,"MatchedNonterminal","","",211,null],[4,"ParseResult","","",null,null],[13,"Success","","",212,null],[13,"Failure","","Arm failed to match",212,null],[13,"Error","","Fatal error (malformed macro?). Abort compilation.",212,null],[5,"count_names","","",null,null],[5,"initial_matcher_pos","","",null,{"inputs":[{"name":"rc"},{"name":"option"},{"name":"bytepos"}],"output":{"name":"box"}}],[5,"nameize","","",null,null],[5,"token_name_eq","","Perform a token equality check, ignoring syntax context (that is, an\nunhygienic comparison)",null,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[5,"parse","","",null,null],[5,"parse_nt","","",null,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"}],"output":{"name":"nonterminal"}}],[6,"NamedParseResult","","",null,null],[6,"PositionalParseResult","","",null,null],[11,"clone","","",213,null],[0,"macro_rules","syntex_syntax::ext::tt","",null,null],[5,"compile","syntex_syntax::ext::tt::macro_rules","Converts a `macro_rules!` invocation into a syntax extension.",null,{"inputs":[{"name":"extctxt"},{"name":"macrodef"}],"output":{"name":"syntaxextension"}}],[14,"panictry!","syntex_syntax","",null,null],[14,"register_diagnostic!","","",null,null],[14,"span_fatal!","","",null,null],[14,"span_err!","","",null,null],[14,"span_warn!","","",null,null],[14,"span_err_or_warn!","","",null,null],[14,"struct_span_fatal!","","",null,null],[14,"struct_span_err!","","",null,null],[14,"struct_span_warn!","","",null,null],[14,"struct_span_err_or_warn!","","",null,null],[14,"span_note!","","",null,null],[14,"span_help!","","",null,null],[14,"help!","","",null,null],[14,"register_diagnostics!","","",null,null],[14,"register_long_diagnostics!","","",null,null],[14,"walk_list!","","",null,null],[11,"move_flat_map","syntex_syntax::ptr","",165,null],[11,"name","","",165,null],[11,"value_str","","",165,null],[11,"meta_item_list","","",165,null],[11,"span","","",165,null],[11,"attrs","","",165,null],[11,"map_attrs","","",165,null],[11,"is_eof","syntex_syntax::ext::tt::transcribe","",210,null],[11,"try_next_token","","",210,null],[11,"fatal","","",210,null],[11,"err","","",210,null],[11,"emit_fatal_errors","","",210,null],[11,"peek","","",210,null],[11,"eq","syntex_syntax::ext::quote::rt","",206,null],[11,"ne","","",206,null],[11,"hash","","",206,null],[11,"clone","","",206,null],[11,"end_point","","Returns a new span representing just the end-point of this span",206,null],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",206,null],[11,"contains","","",206,null],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",206,null],[11,"merge","","Returns `Some(span)`, a union of `self` and `other`, on overlap.",206,null],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",206,null],[11,"encode","","",206,null],[11,"decode","","",206,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",206,null],[11,"fmt","","",205,null],[11,"cmp","","",205,null],[11,"partial_cmp","","",205,null],[11,"lt","","",205,null],[11,"le","","",205,null],[11,"gt","","",205,null],[11,"ge","","",205,null],[11,"hash","","",205,null],[11,"eq","","",205,null],[11,"ne","","",205,null],[11,"clone","","",205,null],[11,"from_usize","","",205,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",205,null],[11,"add","","",205,null],[11,"sub","","",205,null],[11,"encode","","",205,null],[11,"decode","","",205,{"inputs":[{"name":"d"}],"output":{"name":"result"}}]],"paths":[[3,"ErrorInfo"],[3,"ErrorMetadata"],[3,"ErrorLocation"],[3,"Interner"],[3,"RcStr"],[3,"StrInterner"],[3,"NodeCounter"],[4,"AssocOp"],[4,"Fixity"],[3,"SmallVector"],[3,"IntoIter"],[8,"MoveMap"],[3,"ThinVec"],[3,"JsonEmitter"],[4,"Os"],[4,"Abi"],[4,"Architecture"],[4,"AbiArchitecture"],[3,"AbiData"],[3,"Name"],[3,"SyntaxContext"],[3,"Ident"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[3,"Stmt"],[3,"Local"],[3,"Arm"],[3,"Field"],[3,"Expr"],[3,"QSelf"],[3,"Mac_"],[3,"MutTy"],[3,"MethodSig"],[3,"TraitItem"],[3,"ImplItem"],[3,"TypeBinding"],[3,"Ty"],[3,"BareFnTy"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[3,"AttrId"],[3,"Attribute_"],[3,"TraitRef"],[3,"PolyTraitRef"],[3,"StructField"],[3,"Item"],[3,"ForeignItem"],[3,"MacroDef"],[4,"PathParameters"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[4,"WherePredicate"],[4,"MetaItemKind"],[4,"BindingMode"],[4,"PatKind"],[4,"Mutability"],[4,"BinOpKind"],[4,"UnOp"],[4,"StmtKind"],[4,"MacStmtStyle"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"RangeLimits"],[4,"ExprKind"],[4,"CaptureBy"],[4,"StrStyle"],[4,"LitIntType"],[4,"LitKind"],[4,"TraitItemKind"],[4,"ImplItemKind"],[4,"IntTy"],[4,"UintTy"],[4,"FloatTy"],[4,"TyKind"],[4,"AsmDialect"],[4,"SelfKind"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"PathListItemKind"],[4,"ViewPath_"],[4,"AttrStyle"],[4,"Visibility"],[4,"VariantData"],[4,"ItemKind"],[4,"ForeignItemKind"],[3,"Stability"],[3,"RustcDeprecation"],[3,"Deprecation"],[4,"InlineAttr"],[4,"StabilityLevel"],[4,"ReprAttr"],[4,"IntType"],[8,"AttrMetaMethods"],[8,"AttributeMethods"],[8,"HasAttrs"],[6,"Attribute"],[6,"MetaItem"],[6,"Variant"],[3,"Spanned"],[3,"NameAndSpan"],[3,"ExpnInfo"],[3,"CodeMap"],[4,"ExpnFormat"],[8,"FileLoader"],[3,"RealFileLoader"],[3,"StripUnconfigured"],[4,"EntryPointType"],[3,"Features"],[4,"AttributeType"],[4,"AttributeGate"],[4,"GateIssue"],[4,"UnstableFeatures"],[3,"GatedCfg"],[8,"Folder"],[3,"ParseSess"],[3,"Parser"],[3,"ModulePath"],[3,"ModulePathSuccess"],[3,"ModulePathError"],[4,"PathStyle"],[4,"BoundParsingMode"],[4,"SemiColonMode"],[4,"TokenType"],[4,"LhsExpr"],[3,"Restrictions"],[3,"TokenAndSpan"],[3,"StringReader"],[3,"Comment"],[3,"Literal"],[4,"CommentStyle"],[8,"Reader"],[4,"BinOpToken"],[4,"DelimToken"],[4,"SpecialMacroVar"],[4,"Lit"],[4,"Token"],[4,"Nonterminal"],[3,"Keyword"],[3,"InternedString"],[3,"SeqSep"],[4,"ObsoleteSyntax"],[8,"ParserObsoleteMethods"],[3,"P"],[3,"Delimited"],[3,"SequenceRepetition"],[4,"KleeneOp"],[4,"TokenTree"],[4,"FnKind"],[8,"Visitor"],[3,"Printer"],[4,"Breaks"],[4,"Token"],[4,"PrintStackBreak"],[3,"BreakToken"],[3,"BeginToken"],[3,"PrintStackElem"],[3,"CurrentCommentAndLiteral"],[3,"State"],[4,"AnnNode"],[8,"PpAnn"],[8,"PrintState"],[3,"NoAnn"],[3,"MacEager"],[3,"BlockInfo"],[3,"ExtCtxt"],[3,"SyntaxEnv"],[4,"Annotatable"],[4,"SyntaxExtension"],[8,"MultiItemDecorator"],[8,"MultiItemModifier"],[8,"TTMacroExpander"],[8,"IdentMacroExpander"],[8,"MacResult"],[8,"MacroLoader"],[3,"DummyResult"],[3,"DummyMacroLoader"],[8,"AstBuilder"],[3,"MacroExpander"],[3,"ExpansionConfig"],[3,"IdentRenamer"],[3,"PatIdentRenamer"],[4,"SyntaxContext_"],[3,"BytePos"],[3,"Span"],[8,"ToTokens"],[8,"ExtParseUtils"],[6,"Lit"],[3,"TtReader"],[4,"NamedMatch"],[4,"ParseResult"],[3,"MatcherPos"]]};
searchIndex["docopt"] = {"doc":"Docopt for Rust. This implementation conforms to the\n[official description of Docopt](http://docopt.org/) and\n[passes its test suite](https://github.com/docopt/docopt/pull/201).","items":[[3,"ArgvMap","docopt","A map containing matched values from command line arguments.",null,null],[3,"Decoder","","Decoder for `ArgvMap` into your own `Decodable` types.",null,null],[3,"Docopt","","The main Docopt type, which is constructed with a Docopt usage string.",null,null],[4,"Error","","Represents the different types of Docopt errors.",null,null],[13,"Usage","","Parsing the usage string failed.",0,null],[13,"Argv","","Parsing the argv specified failed.",0,null],[13,"NoMatch","","The given argv parsed successfully, but it did not match any example\nusage of the program.",0,null],[13,"Decode","","This indicates a problem decoding a successful argv match into a\ndecodable value.",0,null],[13,"WithProgramUsage","","Parsing failed, and the program usage should be printed next to the\nfailure message. Typically this wraps `Argv` and `NoMatch` errors.",0,null],[13,"Help","","Decoding or parsing failed because the command line specified that the\nhelp message should be printed.",0,null],[13,"Version","","Decoding or parsing failed because the command line specified that the\nversion should be printed",0,null],[4,"Value","","A matched command line value.",null,null],[13,"Switch","","A boolean value from a flag that has no argument.",1,null],[13,"Counted","","The number of occurrences of a repeated flag.",1,null],[13,"Plain","","A positional or flag argument.",1,null],[13,"List","","A List of positional or flag arguments.",1,null],[11,"fmt","","",0,null],[11,"fatal","","Return whether this was a fatal error or not.",0,null],[11,"exit","","Print this error and immediately exit the program.",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"new","","Parse the Docopt usage string given.",2,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","Parse and decode the given argv.",2,null],[11,"parse","","Parse command line arguments and try to match them against a usage\npattern specified in the Docopt string.",2,null],[11,"argv","","Set the argv to be used for Docopt parsing.",2,null],[11,"options_first","","Enables the &quot;options first&quot; Docopt behavior.",2,null],[11,"help","","Enables automatic handling of `--help`.",2,null],[11,"version","","Enables automatic handling of `--version`.",2,null],[11,"clone","","",3,null],[11,"decode","","Tries to decode the map of values into a struct.",3,null],[11,"get_bool","","Finds the value corresponding to `key` and calls `as_bool()` on it.\nIf the key does not exist, `false` is returned.",3,null],[11,"get_count","","Finds the value corresponding to `key` and calls `as_count()` on it.\nIf the key does not exist, `0` is returned.",3,null],[11,"get_str","","Finds the value corresponding to `key` and calls `as_str()` on it.\nIf the key does not exist, `&quot;&quot;` is returned.",3,null],[11,"get_vec","","Finds the value corresponding to `key` and calls `as_vec()` on it.\nIf the key does not exist, `vec!()` is returned.",3,null],[11,"find","","Return the raw value corresponding to some `key`.",3,null],[11,"len","","Return the number of values, not including synonyms.",3,null],[11,"fmt","","",3,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"as_bool","","Returns the value as a bool.",1,null],[11,"as_count","","Returns the value as a count of the number of times it occurred.",1,null],[11,"as_str","","Returns the value as a string.",1,null],[11,"as_vec","","Returns the value as a list of strings.",1,null],[11,"error","","",4,null],[11,"read_nil","","",4,null],[11,"read_usize","","",4,null],[11,"read_u64","","",4,null],[11,"read_u32","","",4,null],[11,"read_u16","","",4,null],[11,"read_u8","","",4,null],[11,"read_isize","","",4,null],[11,"read_i64","","",4,null],[11,"read_i32","","",4,null],[11,"read_i16","","",4,null],[11,"read_i8","","",4,null],[11,"read_bool","","",4,null],[11,"read_f64","","",4,null],[11,"read_f32","","",4,null],[11,"read_char","","",4,null],[11,"read_str","","",4,null],[11,"read_enum","","",4,null],[11,"read_enum_variant","","",4,null],[11,"read_enum_variant_arg","","",4,null],[11,"read_enum_struct_variant","","",4,null],[11,"read_enum_struct_variant_field","","",4,null],[11,"read_struct","","",4,null],[11,"read_struct_field","","",4,null],[11,"read_tuple","","",4,null],[11,"read_tuple_arg","","",4,null],[11,"read_tuple_struct","","",4,null],[11,"read_tuple_struct_arg","","",4,null],[11,"read_option","","",4,null],[11,"read_seq","","",4,null],[11,"read_seq_elt","","",4,null],[11,"read_map","","",4,null],[11,"read_map_elt_key","","",4,null],[11,"read_map_elt_val","","",4,null]],"paths":[[4,"Error"],[4,"Value"],[3,"Docopt"],[3,"ArgvMap"],[3,"Decoder"]]};
searchIndex["semver"] = {"doc":"Semantic version parsing and comparison.","items":[[3,"Version","semver","Represents a version number conforming to the semantic versioning scheme.",null,null],[12,"major","","The major version, to be incremented on incompatible changes.",0,null],[12,"minor","","The minor version, to be incremented when functionality is added in a\nbackwards-compatible manner.",0,null],[12,"patch","","The patch version, to be incremented when backwards-compatible bug\nfixes are made.",0,null],[12,"pre","","The pre-release version identifier, if one exists.",0,null],[12,"build","","The build metadata, ignored when determining version precedence.",0,null],[3,"VersionReq","","A `VersionReq` is a struct containing a list of predicates that can apply to ranges of version\nnumbers. Matching operations can then be done with the `VersionReq` against a particular\nversion to see if it satisfies some or all of the constraints.",null,null],[4,"Identifier","","An identifier in the pre-release or build metadata.",null,null],[13,"Numeric","","An identifier that&#39;s solely numbers.",1,null],[13,"AlphaNumeric","","An identifier with letters and numbers.",1,null],[4,"SemVerError","","An error type for this crate",null,null],[13,"ParseError","","An error ocurred while parsing.",2,null],[4,"ReqParseError","","A `ReqParseError` is returned from methods which parse a string into a `VersionReq`. Each\nenumeration is one of the possible errors that can occur.",null,null],[13,"InvalidVersionRequirement","","The given version requirement is invalid.",3,null],[13,"OpAlreadySet","","You have already provided an operation, such as `=`, `~`, or `^`. Only use one.",3,null],[13,"InvalidSigil","","The sigil you have written is not correct.",3,null],[13,"VersionComponentsMustBeNumeric","","All components of a version must be numeric.",3,null],[13,"InvalidIdentifier","","There was an error parsing an identifier.",3,null],[13,"MajorVersionRequired","","At least a major version is required.",3,null],[13,"UnimplementedVersionRequirement","","An unimplemented version requirement.",3,null],[11,"fmt","","",1,null],[11,"hash","","",1,null],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"from","","",1,{"inputs":[{"name":"identifier"}],"output":{"name":"identifier"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"from","","",0,{"inputs":[{"name":"version"}],"output":{"name":"version"}}],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"parse","","Parse a string into a semver object.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"increment_patch","","Increments the patch number for this Version (Must be mutable)",0,null],[11,"increment_minor","","Increments the minor version number for this Version (Must be mutable)",0,null],[11,"increment_major","","Increments the major version number for this Version (Must be mutable)",0,null],[11,"is_prerelease","","Checks to see if the current Version is in pre-release status",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"from","","",4,{"inputs":[{"name":"versionreq"}],"output":{"name":"versionreq"}}],[11,"eq","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"reqparseerror"}}],[11,"any","","`any()` is a factory method which creates a `VersionReq` with no constraints. In other\nwords, any version will match against it.",4,{"inputs":[],"output":{"name":"versionreq"}}],[11,"parse","","`parse()` is the main constructor of a `VersionReq`. It turns a string like `&quot;^1.2.3&quot;`\nand turns it into a `VersionReq` that matches that particular constraint.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"exact","","`exact()` is a factory method which creates a `VersionReq` with one exact constraint.",4,{"inputs":[{"name":"version"}],"output":{"name":"versionreq"}}],[11,"matches","","`matches()` matches a given `Version` against this `VersionReq`.",4,null],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,null]],"paths":[[3,"Version"],[4,"Identifier"],[4,"SemVerError"],[4,"ReqParseError"],[3,"VersionReq"]]};
searchIndex["semver_parser"] = {"doc":"","items":[[0,"version","semver_parser","",null,null],[3,"Version","semver_parser::version","",null,null],[12,"major","","",0,null],[12,"minor","","",0,null],[12,"patch","","",0,null],[12,"pre","","",0,null],[12,"build","","",0,null],[4,"Identifier","","",null,null],[13,"Numeric","","An identifier that&#39;s solely numbers.",1,null],[13,"AlphaNumeric","","An identifier with letters and numbers.",1,null],[5,"parse","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",0,null],[11,"fmt","","",1,null],[0,"range","semver_parser","",null,null],[3,"VersionReq","semver_parser::range","",null,null],[12,"predicates","","",2,null],[3,"Predicate","","",null,null],[12,"op","","",3,null],[12,"major","","",3,null],[12,"minor","","",3,null],[12,"patch","","",3,null],[12,"pre","","",3,null],[4,"WildcardVersion","","",null,null],[13,"Major","","",4,null],[13,"Minor","","",4,null],[13,"Patch","","",4,null],[4,"Op","","",null,null],[13,"Ex","","",5,null],[13,"Gt","","",5,null],[13,"GtEq","","",5,null],[13,"Lt","","",5,null],[13,"LtEq","","",5,null],[13,"Tilde","","",5,null],[13,"Compatible","","",5,null],[13,"Wildcard","","",5,null],[5,"parse","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_predicate","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",2,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null]],"paths":[[3,"Version"],[4,"Identifier"],[3,"VersionReq"],[3,"Predicate"],[4,"WildcardVersion"],[4,"Op"]]};
searchIndex["env_logger"] = {"doc":"A logger configured via an environment variable which writes to standard\nerror.","items":[[3,"Logger","env_logger","The logger.",null,null],[3,"LogBuilder","","LogBuilder acts as builder for initializing the Logger.\nIt can be used to customize the log format, change the enviromental variable used\nto provide the logging directives and also set the default log level filter.",null,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"name":"result"}}],[11,"new","","Initializes the log builder with defaults",0,{"inputs":[],"output":{"name":"logbuilder"}}],[11,"filter","","Adds filters to the logger",0,null],[11,"format","","Sets the format function for formatting the log output.",0,null],[11,"parse","","Parses the directives string in the same form as the RUST_LOG\nenvironment variable.",0,null],[11,"init","","Initializes the global logger with an env logger.",0,null],[11,"build","","Build an env logger.",0,null],[11,"new","","",1,{"inputs":[],"output":{"name":"logger"}}],[11,"filter","","",1,null],[11,"enabled","","",1,null],[11,"log","","",1,null]],"paths":[[3,"LogBuilder"],[3,"Logger"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst-case performance. The specific syntax supported is\ndocumented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",1,null],[13,"InvalidSet","","**DEPRECATED:** Will be removed on next major version bump.",1,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and\nthe value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte\nstring.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,null],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,null],[11,"fmt","regex","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",4,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",4,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,null],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",5,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",5,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,null],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,null],[11,"clone","","",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"from_str","","Attempts to parse a string into a regular expression",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",6,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",6,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",6,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",6,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",6,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",6,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The\nreplacement can be a regular byte string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced byte string.",6,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",6,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",6,null],[11,"shortest_match","","Returns the end location of a match in the text given.",6,null],[11,"as_str","","Returns the original string of this regex.",6,null],[11,"capture_names","","Returns an iterator over the capture names.",6,null],[11,"captures_len","","Returns the number of captures.",6,null],[11,"next","","",7,null],[11,"next","","",8,null],[11,"next","","",9,null],[11,"next","","",10,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original byte string matched.",12,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",12,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",12,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",12,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",12,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",12,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`, and writes them to the `dst` buffer given.",12,null],[11,"len","","Returns the number of captured groups.",12,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",12,null],[11,"fmt","","",12,null],[11,"index","","",12,null],[11,"index","","",12,null],[11,"next","","",13,null],[11,"next","","",14,null],[11,"next","","",15,null],[11,"replace_append","","",2,null],[11,"no_expansion","","",2,null],[11,"clone","regex","",16,null],[11,"new","","Create a new regex set with the given regular expressions.",16,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",16,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",16,null],[11,"len","","Returns the total number of regular expressions in this set.",16,null],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"matched_any","","Whether this set contains any matches.",17,null],[11,"matched","","Whether the regex at the given index matched.",17,null],[11,"len","","The total number of regexes in the set that created these matches.",17,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",17,null],[11,"into_iter","","",17,null],[11,"next","","",18,null],[11,"next_back","","",18,null],[11,"clone","","",19,null],[11,"next","","",19,null],[11,"next_back","","",19,null],[11,"fmt","","",16,null],[11,"clone","regex::bytes","",20,null],[11,"new","","Create a new regex set with the given regular expressions.",20,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",20,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",20,null],[11,"len","","Returns the total number of regular expressions in this set.",20,null],[11,"fmt","","",21,null],[11,"clone","","",21,null],[11,"matched_any","","Whether this set contains any matches.",21,null],[11,"matched","","Whether the regex at the given index matched.",21,null],[11,"len","","The total number of regexes in the set that created these matches.",21,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",21,null],[11,"into_iter","","",21,null],[11,"next","","",22,null],[11,"next_back","","",22,null],[11,"clone","","",23,null],[11,"next","","",23,null],[11,"next_back","","",23,null],[11,"fmt","","",20,null],[11,"clone","regex","",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"eq","","",24,null],[11,"from_str","","Attempts to parse a string into a regular expression",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",24,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",24,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",24,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",24,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",24,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",24,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",24,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",24,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced string.",24,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",24,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",24,null],[11,"shortest_match","","Returns the end location of a match in the text given.",24,null],[11,"as_str","","Returns the original string of this regex.",24,null],[11,"capture_names","","Returns an iterator over the capture names.",24,null],[11,"captures_len","","Returns the number of captures.",24,null],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"reg_replace","","",0,null],[11,"no_expand","","",0,null],[11,"next","","",26,null],[11,"next","","",27,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original string matched.",28,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",28,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",28,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",28,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",28,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",28,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",28,null],[11,"len","","Returns the number of captured groups.",28,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,null],[11,"fmt","","",28,null],[11,"index","","",28,null],[11,"index","","",28,null],[11,"next","","",29,null],[11,"next","","",30,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"next","","",33,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex["syntex_errors"] = {"doc":"","items":[[3,"CodeSuggestion","syntex_errors","",null,null],[12,"msp","","",0,null],[12,"substitutes","","",0,null],[3,"FatalError","","Used as a return value to signify a fatal error occurred. (It is also\nused as the argument to panic at the moment, but that will eventually\nnot be true.)",null,null],[3,"ExplicitBug","","Signifies that the compiler died with an explicit call to `.bug`\nor `.span_bug` rather than a failed assertion, etc.",null,null],[3,"DiagnosticBuilder","","Used for emitting structured error messages and other diagnostic information.",null,null],[12,"level","","",1,null],[12,"message","","",1,null],[12,"code","","",1,null],[12,"span","","",1,null],[12,"children","","",1,null],[3,"SubDiagnostic","","For example a note attached to an error.",null,null],[12,"level","","",2,null],[12,"message","","",2,null],[12,"span","","",2,null],[12,"render_span","","",2,null],[3,"Handler","","A handler deals with errors; certain errors\n(fatal, bug, unimpl) may cause immediate exit,\nothers log errors for later reporting.",null,null],[12,"can_emit_warnings","","",3,null],[4,"RenderSpan","","",null,null],[13,"FullSpan","","A FullSpan renders with both with an initial line for the\nmessage, prefixed by file:linenum, followed by a summary of\nthe source code covered by the span.",4,null],[13,"Suggestion","","A suggestion renders with both with an initial line for the\nmessage, prefixed by file:linenum, followed by a summary\nof hypothetical source code, where each `String` is spliced\ninto the lines in place of the code covered by each span.",4,null],[4,"Level","","",null,null],[13,"Bug","","",5,null],[13,"Fatal","","",5,null],[13,"PhaseFatal","","",5,null],[13,"Error","","",5,null],[13,"Warning","","",5,null],[13,"Note","","",5,null],[13,"Help","","",5,null],[13,"Cancelled","","",5,null],[5,"expect","","",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"m"}],"output":{"name":"t"}}],[5,"check_old_skool","","True if we should use the old-skool error format style. This is\nthe default setting until the new errors are deemed stable enough\nfor general use.",null,{"inputs":[],"output":{"name":"bool"}}],[0,"emitter","","",null,null],[3,"BasicEmitter","syntex_errors::emitter","A basic emitter for when we don&#39;t have access to a codemap or registry. Used\nfor reporting very early errors, etc.",null,null],[3,"EmitterWriter","","",null,null],[4,"ColorConfig","","",null,null],[13,"Auto","","",6,null],[13,"Always","","",6,null],[13,"Never","","",6,null],[17,"MAX_HIGHLIGHT_LINES","","maximum number of lines we will print for each error; arbitrary.",null,null],[8,"Emitter","","Emitter trait for emitting errors. Do not implement this directly:\nimplement `CoreEmitter` instead.",null,null],[10,"emit","","Emit a standalone diagnostic message.",7,null],[10,"emit_struct","","Emit a structured diagnostic.",7,null],[8,"CoreEmitter","","",null,null],[10,"emit_message","","",8,null],[11,"eq","","",6,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"emit_message","","",9,null],[11,"stderr","","",9,{"inputs":[{"name":"colorconfig"}],"output":{"name":"basicemitter"}}],[11,"emit_message","","",10,null],[11,"stderr","","",10,{"inputs":[{"name":"colorconfig"},{"name":"option"},{"name":"rc"},{"name":"formatmode"}],"output":{"name":"emitterwriter"}}],[11,"new","","",10,{"inputs":[{"name":"box"},{"name":"option"},{"name":"rc"},{"name":"formatmode"}],"output":{"name":"emitterwriter"}}],[11,"highlight_lines","","",10,null],[0,"snippet","syntex_errors","",null,null],[3,"SnippetData","syntex_errors::snippet","",null,null],[3,"FileInfo","","",null,null],[3,"RenderedLine","","",null,null],[12,"text","","",11,null],[12,"kind","","",11,null],[3,"StyledString","","",null,null],[12,"text","","",12,null],[12,"style","","",12,null],[3,"StyledBuffer","","",null,null],[4,"FormatMode","","",null,null],[13,"NewErrorFormat","","",13,null],[13,"OriginalErrorFormat","","",13,null],[13,"EnvironmentSelected","","",13,null],[4,"Style","","",null,null],[13,"FileNameStyle","","",14,null],[13,"LineAndColumn","","",14,null],[13,"LineNumber","","",14,null],[13,"Quotation","","",14,null],[13,"UnderlinePrimary","","",14,null],[13,"UnderlineSecondary","","",14,null],[13,"LabelPrimary","","",14,null],[13,"LabelSecondary","","",14,null],[13,"OldSkoolNoteText","","",14,null],[13,"OldSkoolNote","","",14,null],[13,"NoStyle","","",14,null],[4,"RenderedLineKind","","",null,null],[13,"PrimaryFileName","","",15,null],[13,"OtherFileName","","",15,null],[13,"SourceText","","",15,null],[12,"file","syntex_errors::snippet::RenderedLineKind","",15,null],[12,"line_index","","",15,null],[13,"Annotations","syntex_errors::snippet","",15,null],[13,"Elision","","",15,null],[8,"StringSource","","",null,null],[10,"make_string","","",16,null],[11,"clone","","",13,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"fmt","","",11,null],[11,"fmt","","",12,null],[11,"fmt","","",19,null],[11,"eq","","",14,null],[11,"fmt","","",14,null],[11,"clone","","",14,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"new","","",17,{"inputs":[{"name":"rc"},{"name":"option"},{"name":"formatmode"}],"output":{"name":"self"}}],[11,"push","","",17,null],[11,"render_lines","","",17,null],[11,"from","","",11,null],[11,"from","","",11,null],[0,"registry","syntex_errors","",null,null],[3,"Registry","syntex_errors::registry","",null,null],[11,"clone","","",20,null],[11,"new","","",20,null],[11,"find_description","","",20,null],[8,"CodeMapper","syntex_errors","",null,null],[10,"lookup_char_pos","","",21,null],[10,"span_to_lines","","",21,null],[10,"span_to_string","","",21,null],[10,"span_to_filename","","",21,null],[10,"macro_backtrace","","",21,null],[11,"clone","","",4,null],[11,"clone","","",0,null],[11,"splice_lines","","Returns the assembled code suggestion.",0,null],[11,"fmt","","",22,null],[11,"clone","","",22,null],[11,"fmt","","",22,null],[11,"description","","",22,null],[11,"fmt","","",23,null],[11,"clone","","",23,null],[11,"fmt","","",23,null],[11,"description","","",23,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"emit","","Emit the diagnostic.",1,null],[11,"cancel","","Cancel the diagnostic (a structured diagnostic must either be emitted or\ncancelled or it will panic when dropped).\nBEWARE: if this DiagnosticBuilder is an error, then creating it will\nbump the error count on the Handler and cancelling it won&#39;t undo that.\nIf you want to decrement the error count you should use `Handler::cancel`.",1,null],[11,"cancelled","","",1,null],[11,"is_fatal","","",1,null],[11,"span_label","","Add a span/label to be included in the resulting snippet.\nThis is pushed onto the `MultiSpan` that was created when the\ndiagnostic was first built. If you don&#39;t call this function at\nall, and you just supplied a `Span` to create the diagnostic,\nthen the snippet will just include that `Span`, which is\ncalled the primary span.",1,null],[11,"note_expected_found","","",1,null],[11,"note","","",1,null],[11,"span_note","","",1,null],[11,"warn","","",1,null],[11,"span_warn","","",1,null],[11,"help","","",1,null],[11,"span_help","","",1,null],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",1,null],[11,"set_span","","",1,null],[11,"code","","",1,null],[11,"message","","",1,null],[11,"level","","",1,null],[11,"fmt","","",1,null],[11,"drop","","",1,null],[11,"with_tty_emitter","","",3,{"inputs":[{"name":"colorconfig"},{"name":"option"},{"name":"bool"},{"name":"bool"},{"name":"rc"}],"output":{"name":"handler"}}],[11,"with_emitter","","",3,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"box"}],"output":{"name":"handler"}}],[11,"set_continue_after_error","","",3,null],[11,"struct_dummy","","",3,null],[11,"struct_span_warn","","",3,null],[11,"struct_span_warn_with_code","","",3,null],[11,"struct_warn","","",3,null],[11,"struct_span_err","","",3,null],[11,"struct_span_err_with_code","","",3,null],[11,"struct_err","","",3,null],[11,"struct_span_fatal","","",3,null],[11,"struct_span_fatal_with_code","","",3,null],[11,"struct_fatal","","",3,null],[11,"cancel","","",3,null],[11,"span_fatal","","",3,null],[11,"span_fatal_with_code","","",3,null],[11,"span_err","","",3,null],[11,"span_err_with_code","","",3,null],[11,"span_warn","","",3,null],[11,"span_warn_with_code","","",3,null],[11,"span_bug","","",3,null],[11,"delay_span_bug","","",3,null],[11,"span_bug_no_panic","","",3,null],[11,"span_note_without_error","","",3,null],[11,"span_unimpl","","",3,null],[11,"fatal","","",3,null],[11,"err","","",3,null],[11,"warn","","",3,null],[11,"note_without_error","","",3,null],[11,"bug","","",3,null],[11,"unimpl","","",3,null],[11,"bump_err_count","","",3,null],[11,"err_count","","",3,null],[11,"has_errors","","",3,null],[11,"abort_if_errors","","",3,null],[11,"emit","","",3,null],[11,"emit_with_code","","",3,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"fmt","","",5,null],[11,"color","","",5,null],[11,"to_str","","",5,null]],"paths":[[3,"CodeSuggestion"],[3,"DiagnosticBuilder"],[3,"SubDiagnostic"],[3,"Handler"],[4,"RenderSpan"],[4,"Level"],[4,"ColorConfig"],[8,"Emitter"],[8,"CoreEmitter"],[3,"BasicEmitter"],[3,"EmitterWriter"],[3,"RenderedLine"],[3,"StyledString"],[4,"FormatMode"],[4,"Style"],[4,"RenderedLineKind"],[8,"StringSource"],[3,"SnippetData"],[3,"FileInfo"],[3,"StyledBuffer"],[3,"Registry"],[8,"CodeMapper"],[3,"FatalError"],[3,"ExplicitBug"]]};
searchIndex["syntex_pos"] = {"doc":"The source positions and related helper functions","items":[[3,"Span","syntex_pos","Spans represent a region of code, used for error reporting. Positions in spans\nare *absolute* positions from the beginning of the codemap, not positions\nrelative to FileMaps. Methods on the CodeMap can be used to relate spans back\nto the original source.\nYou must be careful if the span crosses more than one file - you will not be\nable to use many of the functions on spans in codemap and you cannot assume\nthat the length of the span = hi - lo; there may be space in the BytePos\nrange between files.",null,null],[12,"lo","","",0,null],[12,"hi","","",0,null],[12,"expn_id","","Information about where the macro came from, if this piece of\ncode was created by a macro expansion.",0,null],[3,"MultiSpan","","A collection of spans. Spans have two orthogonal attributes:",null,null],[3,"SpanLabel","","",null,null],[12,"span","","The span we are going to include in the final snippet.",1,null],[12,"is_primary","","Is this a primary span? This is the &quot;locus&quot; of the message,\nand is indicated with a `^^^^` underline, versus `----`.",1,null],[12,"label","","What label should we attach to this span (if any)?",1,null],[3,"ExpnId","","",null,null],[12,"0","","",2,null],[3,"MultiByteChar","","Identifies an offset of a multi-byte character in a FileMap",null,null],[12,"pos","","The absolute offset of the character in the CodeMap",3,null],[12,"bytes","","The number of bytes, &gt;=2",3,null],[3,"FileMap","","A single source in the CodeMap.",null,null],[12,"name","","The name of the file that the source came from, source that doesn&#39;t\noriginate from files has names between angle brackets by convention,\ne.g. `&lt;anon&gt;`",4,null],[12,"abs_path","","The absolute path of the file that the source came from.",4,null],[12,"src","","The complete source code",4,null],[12,"start_pos","","The start position of this source in the CodeMap",4,null],[12,"end_pos","","The end position of this source in the CodeMap",4,null],[12,"lines","","Locations of lines beginnings in the source code",4,null],[12,"multibyte_chars","","Locations of multi-byte characters in the source code",4,null],[3,"BytePos","","A byte offset. Keep this small (currently 32-bits), as AST contains\na lot of them.",null,null],[12,"0","","",5,null],[3,"CharPos","","A character offset. Because of multibyte utf8 characters, a byte offset\nis not equivalent to a character offset. The CodeMap will convert BytePos\nvalues to CharPos values as necessary.",null,null],[12,"0","","",6,null],[3,"Loc","","A source code location used for error reporting",null,null],[12,"file","","Information about the original source",7,null],[12,"line","","The (1-based) line number",7,null],[12,"col","","The (0-based) column offset",7,null],[3,"LocWithOpt","","A source code location used as the result of lookup_char_pos_adj",null,null],[12,"filename","","",8,null],[12,"line","","",8,null],[12,"col","","",8,null],[12,"file","","",8,null],[3,"FileMapAndLine","","",null,null],[12,"fm","","",9,null],[12,"line","","",9,null],[3,"FileMapAndBytePos","","",null,null],[12,"fm","","",10,null],[12,"pos","","",10,null],[3,"LineInfo","","",null,null],[12,"line_index","","Index of line, starting from 0.",11,null],[12,"start_col","","Column in line where span begins, starting from 0.",11,null],[12,"end_col","","Column in line where span ends, starting from 0, exclusive.",11,null],[3,"FileLines","","",null,null],[12,"file","","",12,null],[12,"lines","","",12,null],[3,"MacroBacktrace","","",null,null],[12,"call_site","","span where macro was applied to generate this code",13,null],[12,"macro_decl_name","","name of macro that was applied (e.g., &quot;foo!&quot; or &quot;#[derive(Eq)]&quot;)",13,null],[12,"def_site_span","","span where macro was defined (if known)",13,null],[3,"DistinctSources","","",null,null],[12,"begin","","",14,null],[12,"end","","",14,null],[3,"MalformedCodemapPositions","","",null,null],[12,"name","","",15,null],[12,"source_len","","",15,null],[12,"begin_pos","","",15,null],[12,"end_pos","","",15,null],[4,"SpanLinesError","","",null,null],[13,"IllFormedSpan","","",16,null],[13,"DistinctSources","","",16,null],[4,"SpanSnippetError","","",null,null],[13,"IllFormedSpan","","",17,null],[13,"DistinctSources","","",17,null],[13,"MalformedForCodemap","","",17,null],[13,"SourceNotAvailable","","",17,null],[12,"filename","syntex_pos::SpanSnippetError","",17,null],[5,"mk_sp","syntex_pos","",null,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"span"}}],[6,"FileName","","",null,null],[6,"FileLinesResult","","",null,null],[7,"SPAN_DEBUG","","",null,null],[17,"DUMMY_SP","","",null,null],[17,"COMMAND_LINE_SP","","",null,null],[17,"NO_EXPANSION","","",null,null],[17,"COMMAND_LINE_EXPN","","",null,null],[8,"Pos","","",null,null],[10,"from_usize","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"to_usize","","",18,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"clone","","",0,null],[11,"clone","","",19,null],[11,"end_point","","Returns a new span representing just the end-point of this span",0,null],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",0,null],[11,"contains","","",0,null],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",0,null],[11,"merge","","Returns `Some(span)`, a union of `self` and `other`, on overlap.",0,null],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"encode","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"new","","",19,{"inputs":[],"output":{"name":"multispan"}}],[11,"from_span","","",19,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"from_spans","","",19,{"inputs":[{"name":"vec"}],"output":{"name":"multispan"}}],[11,"push_span_label","","",19,null],[11,"primary_span","","Selects the first primary span (if any)",19,null],[11,"primary_spans","","Returns all primary spans.",19,null],[11,"span_labels","","Returns the strings to highlight. We always ensure that there\nis an entry for each of the primary spans -- for each primary\nspan P, if there is at least one label with span P, we return\nthose labels (marked as primary). But otherwise we return\n`SpanLabel` instances with empty labels.",19,null],[11,"from","","",19,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,null],[11,"hash","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"from_u32","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"expnid"}}],[11,"into_u32","","",2,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,null],[11,"clone","","",3,null],[11,"encode","","",4,null],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",4,null],[11,"next_line","","EFFECT: register a start-of-line offset in the\ntable of line-beginnings.\nUNCHECKED INVARIANT: these offsets must be added in the right\norder and must be in the right places; there is shared knowledge\nabout what ends a line between this file and parse.rs\nWARNING: pos param here is the offset relative to start of CodeMap,\nand CodeMap will append a newline when adding a filemap without a newline at the end,\nso the safe way to call this is with value calculated as\nfilemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",4,null],[11,"get_line","","get a line from the list of pre-computed line-beginnings.\nline-number here is 0-based.",4,null],[11,"record_multibyte_char","","",4,null],[11,"is_real_file","","",4,null],[11,"is_imported","","",4,null],[11,"count_lines","","",4,null],[11,"fmt","","",5,null],[11,"cmp","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"hash","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",6,null],[11,"cmp","","",6,null],[11,"partial_cmp","","",6,null],[11,"lt","","",6,null],[11,"le","","",6,null],[11,"gt","","",6,null],[11,"ge","","",6,null],[11,"hash","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"from_usize","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",5,null],[11,"add","","",5,null],[11,"sub","","",5,null],[11,"encode","","",5,null],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_usize","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"charpos"}}],[11,"to_usize","","",6,null],[11,"add","","",6,null],[11,"sub","","",6,null],[11,"fmt","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",9,null],[11,"fmt","","",10,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"fmt","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"clone","","",16,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"fmt","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"clone","","",15,null]],"paths":[[3,"Span"],[3,"SpanLabel"],[3,"ExpnId"],[3,"MultiByteChar"],[3,"FileMap"],[3,"BytePos"],[3,"CharPos"],[3,"Loc"],[3,"LocWithOpt"],[3,"FileMapAndLine"],[3,"FileMapAndBytePos"],[3,"LineInfo"],[3,"FileLines"],[3,"MacroBacktrace"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[4,"SpanLinesError"],[4,"SpanSnippetError"],[8,"Pos"],[3,"MultiSpan"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",4,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",5,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"fmt","","",3,null],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",7,null],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",8,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"fmt","","",6,null],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,null],[11,"fmt","","",9,null],[11,"partial_cmp","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"gt","","",9,null],[11,"ge","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"clone","","",9,null],[11,"eq","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"fmt","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"fmt","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",10,null],[11,"description","","",12,null],[11,"cause","","",12,null],[11,"fmt","","",12,null],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,null],[11,"fmt","","",11,null],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",17,null],[11,"emit_nil","","",17,null],[11,"emit_usize","","",17,null],[11,"emit_u64","","",17,null],[11,"emit_u32","","",17,null],[11,"emit_u16","","",17,null],[11,"emit_u8","","",17,null],[11,"emit_isize","","",17,null],[11,"emit_i64","","",17,null],[11,"emit_i32","","",17,null],[11,"emit_i16","","",17,null],[11,"emit_i8","","",17,null],[11,"emit_bool","","",17,null],[11,"emit_f64","","",17,null],[11,"emit_f32","","",17,null],[11,"emit_char","","",17,null],[11,"emit_str","","",17,null],[11,"emit_enum","","",17,null],[11,"emit_enum_variant","","",17,null],[11,"emit_enum_variant_arg","","",17,null],[11,"emit_enum_struct_variant","","",17,null],[11,"emit_enum_struct_variant_field","","",17,null],[11,"emit_struct","","",17,null],[11,"emit_struct_field","","",17,null],[11,"emit_tuple","","",17,null],[11,"emit_tuple_arg","","",17,null],[11,"emit_tuple_struct","","",17,null],[11,"emit_tuple_struct_arg","","",17,null],[11,"emit_option","","",17,null],[11,"emit_option_none","","",17,null],[11,"emit_option_some","","",17,null],[11,"emit_seq","","",17,null],[11,"emit_seq_elt","","",17,null],[11,"emit_map","","",17,null],[11,"emit_map_elt_key","","",17,null],[11,"emit_map_elt_val","","",17,null],[11,"encode","","",9,null],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",9,null],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",9,null],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",9,null],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,null],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",9,null],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",9,null],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,null],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",9,null],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",9,null],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,null],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",9,null],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,null],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,null],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,null],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,null],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",9,null],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",9,null],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",9,null],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,null],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",9,null],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,null],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",9,null],[11,"index","","",9,null],[11,"index","","",9,null],[11,"fmt","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"fmt","","",15,null],[11,"clone","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,null],[11,"is_empty","","Returns true if the stack is empty.",18,null],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",18,null],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,null],[11,"next","","",19,null],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",19,null],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,null],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,null],[11,"read_usize","","",21,null],[11,"read_u8","","",21,null],[11,"read_u16","","",21,null],[11,"read_u32","","",21,null],[11,"read_u64","","",21,null],[11,"read_isize","","",21,null],[11,"read_i8","","",21,null],[11,"read_i16","","",21,null],[11,"read_i32","","",21,null],[11,"read_i64","","",21,null],[11,"read_f32","","",21,null],[11,"read_f64","","",21,null],[11,"read_bool","","",21,null],[11,"read_char","","",21,null],[11,"read_str","","",21,null],[11,"read_enum","","",21,null],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,null],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,null],[11,"read_struct","","",21,null],[11,"read_struct_field","","",21,null],[11,"read_tuple","","",21,null],[11,"read_tuple_arg","","",21,null],[11,"read_tuple_struct","","",21,null],[11,"read_tuple_struct_arg","","",21,null],[11,"read_option","","",21,null],[11,"read_seq","","",21,null],[11,"read_seq_elt","","",21,null],[11,"read_map","","",21,null],[11,"read_map_elt_key","","",21,null],[11,"read_map_elt_val","","",21,null],[11,"error","","",21,null],[11,"to_json","","",9,null],[11,"fmt","","Encodes a json value into a string",9,null],[11,"fmt","","Encodes a json value into a string",22,null],[11,"fmt","","Encodes a json value into a string",23,null],[11,"indent","","Set the indentation level for the emitted JSON",24,null],[11,"fmt","","Encodes a json value into a string",24,null],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",25,null],[10,"read_nil","","",25,null],[10,"read_usize","","",25,null],[10,"read_u64","","",25,null],[10,"read_u32","","",25,null],[10,"read_u16","","",25,null],[10,"read_u8","","",25,null],[10,"read_isize","","",25,null],[10,"read_i64","","",25,null],[10,"read_i32","","",25,null],[10,"read_i16","","",25,null],[10,"read_i8","","",25,null],[10,"read_bool","","",25,null],[10,"read_f64","","",25,null],[10,"read_f32","","",25,null],[10,"read_char","","",25,null],[10,"read_str","","",25,null],[10,"read_enum","","",25,null],[10,"read_enum_variant","","",25,null],[10,"read_enum_variant_arg","","",25,null],[10,"read_enum_struct_variant","","",25,null],[10,"read_enum_struct_variant_field","","",25,null],[10,"read_struct","","",25,null],[10,"read_struct_field","","",25,null],[10,"read_tuple","","",25,null],[10,"read_tuple_arg","","",25,null],[10,"read_tuple_struct","","",25,null],[10,"read_tuple_struct_arg","","",25,null],[10,"read_option","","",25,null],[10,"read_seq","","",25,null],[10,"read_seq_elt","","",25,null],[10,"read_map","","",25,null],[10,"read_map_elt_key","","",25,null],[10,"read_map_elt_val","","",25,null],[10,"error","","",25,null],[8,"Encoder","","",null,null],[16,"Error","","",26,null],[10,"emit_nil","","",26,null],[10,"emit_usize","","",26,null],[10,"emit_u64","","",26,null],[10,"emit_u32","","",26,null],[10,"emit_u16","","",26,null],[10,"emit_u8","","",26,null],[10,"emit_isize","","",26,null],[10,"emit_i64","","",26,null],[10,"emit_i32","","",26,null],[10,"emit_i16","","",26,null],[10,"emit_i8","","",26,null],[10,"emit_bool","","",26,null],[10,"emit_f64","","",26,null],[10,"emit_f32","","",26,null],[10,"emit_char","","",26,null],[10,"emit_str","","",26,null],[10,"emit_enum","","",26,null],[10,"emit_enum_variant","","",26,null],[10,"emit_enum_variant_arg","","",26,null],[10,"emit_enum_struct_variant","","",26,null],[10,"emit_enum_struct_variant_field","","",26,null],[10,"emit_struct","","",26,null],[10,"emit_struct_field","","",26,null],[10,"emit_tuple","","",26,null],[10,"emit_tuple_arg","","",26,null],[10,"emit_tuple_struct","","",26,null],[10,"emit_tuple_struct_arg","","",26,null],[10,"emit_option","","",26,null],[10,"emit_option_none","","",26,null],[10,"emit_option_some","","",26,null],[10,"emit_seq","","",26,null],[10,"emit_seq_elt","","",26,null],[10,"emit_map","","",26,null],[10,"emit_map_elt_key","","",26,null],[10,"emit_map_elt_val","","",26,null],[8,"Decodable","","",null,null],[10,"decode","","",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",28,null],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",29,null],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["clang_sys"] = {"doc":"Rust bindings for `libclang`.","items":[[3,"CXCodeComplete_Flags","clang_sys","",null,null],[3,"CXCompletionContext","","",null,null],[3,"CXDiagnosticDisplayOptions","","",null,null],[3,"CXGlobalOptFlags","","",null,null],[3,"CXIdxDeclInfoFlags","","",null,null],[3,"CXIndexOptFlags","","",null,null],[3,"CXNameRefFlags","","",null,null],[3,"CXObjCDeclQualifierKind","","",null,null],[3,"CXObjCPropertyAttrKind","","",null,null],[3,"CXReparse_Flags","","",null,null],[3,"CXSaveTranslationUnit_Flags","","",null,null],[3,"CXTranslationUnit_Flags","","",null,null],[3,"CXCompilationDatabase","","",null,null],[12,"0","","",0,null],[3,"CXCompileCommand","","",null,null],[12,"0","","",1,null],[3,"CXCompileCommands","","",null,null],[12,"0","","",2,null],[3,"CXCompletionString","","",null,null],[12,"0","","",3,null],[3,"CXCursorSet","","",null,null],[12,"0","","",4,null],[3,"CXDiagnostic","","",null,null],[12,"0","","",5,null],[3,"CXDiagnosticSet","","",null,null],[12,"0","","",6,null],[3,"CXFile","","",null,null],[12,"0","","",7,null],[3,"CXIdxClientASTFile","","",null,null],[12,"0","","",8,null],[3,"CXIdxClientContainer","","",null,null],[12,"0","","",9,null],[3,"CXIdxClientEntity","","",null,null],[12,"0","","",10,null],[3,"CXIdxClientFile","","",null,null],[12,"0","","",11,null],[3,"CXIndex","","",null,null],[12,"0","","",12,null],[3,"CXIndexAction","","",null,null],[12,"0","","",13,null],[3,"CXModule","","",null,null],[12,"0","","",14,null],[3,"CXRemapping","","",null,null],[12,"0","","",15,null],[3,"CXTranslationUnit","","",null,null],[12,"0","","",16,null],[3,"CXCodeCompleteResults","","",null,null],[12,"Results","","",17,null],[12,"NumResults","","",17,null],[3,"CXCompletionResult","","",null,null],[12,"CursorKind","","",18,null],[12,"CompletionString","","",18,null],[3,"CXCursor","","",null,null],[12,"kind","","",19,null],[12,"xdata","","",19,null],[12,"data","","",19,null],[3,"CXCursorAndRangeVisitor","","",null,null],[12,"context","","",20,null],[12,"visit","","",20,null],[3,"CXFileUniqueID","","",null,null],[12,"data","","",21,null],[3,"CXIdxAttrInfo","","",null,null],[12,"kind","","",22,null],[12,"cursor","","",22,null],[12,"loc","","",22,null],[3,"CXIdxBaseClassInfo","","",null,null],[12,"base","","",23,null],[12,"cursor","","",23,null],[12,"loc","","",23,null],[3,"CXIdxCXXClassDeclInfo","","",null,null],[12,"declInfo","","",24,null],[12,"bases","","",24,null],[12,"numBases","","",24,null],[3,"CXIdxContainerInfo","","",null,null],[12,"cursor","","",25,null],[3,"CXIdxDeclInfo","","",null,null],[12,"entityInfo","","",26,null],[12,"cursor","","",26,null],[12,"loc","","",26,null],[12,"semanticContainer","","",26,null],[12,"lexicalContainer","","",26,null],[12,"isRedeclaration","","",26,null],[12,"isDefinition","","",26,null],[12,"isContainer","","",26,null],[12,"declAsContainer","","",26,null],[12,"isImplicit","","",26,null],[12,"attributes","","",26,null],[12,"numAttributes","","",26,null],[12,"flags","","",26,null],[3,"CXIdxEntityInfo","","",null,null],[12,"kind","","",27,null],[12,"templateKind","","",27,null],[12,"lang","","",27,null],[12,"name","","",27,null],[12,"USR","","",27,null],[12,"cursor","","",27,null],[12,"attributes","","",27,null],[12,"numAttributes","","",27,null],[3,"CXIdxEntityRefInfo","","",null,null],[12,"kind","","",28,null],[12,"cursor","","",28,null],[12,"loc","","",28,null],[12,"referencedEntity","","",28,null],[12,"parentEntity","","",28,null],[12,"container","","",28,null],[3,"CXIdxIBOutletCollectionAttrInfo","","",null,null],[12,"attrInfo","","",29,null],[12,"objcClass","","",29,null],[12,"classCursor","","",29,null],[12,"classLoc","","",29,null],[3,"CXIdxImportedASTFileInfo","","",null,null],[12,"file","","",30,null],[12,"module","","",30,null],[12,"loc","","",30,null],[12,"isImplicit","","",30,null],[3,"CXIdxIncludedFileInfo","","",null,null],[12,"hashLoc","","",31,null],[12,"filename","","",31,null],[12,"file","","",31,null],[12,"isImport","","",31,null],[12,"isAngled","","",31,null],[12,"isModuleImport","","",31,null],[3,"CXIdxLoc","","",null,null],[12,"ptr_data","","",32,null],[12,"int_data","","",32,null],[3,"CXIdxObjCCategoryDeclInfo","","",null,null],[12,"containerInfo","","",33,null],[12,"objcClass","","",33,null],[12,"classCursor","","",33,null],[12,"classLoc","","",33,null],[12,"protocols","","",33,null],[3,"CXIdxObjCContainerDeclInfo","","",null,null],[12,"declInfo","","",34,null],[12,"kind","","",34,null],[3,"CXIdxObjCInterfaceDeclInfo","","",null,null],[12,"containerInfo","","",35,null],[12,"superInfo","","",35,null],[12,"protocols","","",35,null],[3,"CXIdxObjCPropertyDeclInfo","","",null,null],[12,"declInfo","","",36,null],[12,"getter","","",36,null],[12,"setter","","",36,null],[3,"CXIdxObjCProtocolRefInfo","","",null,null],[12,"protocol","","",37,null],[12,"cursor","","",37,null],[12,"loc","","",37,null],[3,"CXIdxObjCProtocolRefListInfo","","",null,null],[12,"protocols","","",38,null],[12,"numProtocols","","",38,null],[3,"CXPlatformAvailability","","",null,null],[12,"Platform","","",39,null],[12,"Introduced","","",39,null],[12,"Deprecated","","",39,null],[12,"Obsoleted","","",39,null],[12,"Unavailable","","",39,null],[12,"Message","","",39,null],[3,"CXSourceLocation","","",null,null],[12,"ptr_data","","",40,null],[12,"int_data","","",40,null],[3,"CXSourceRange","","",null,null],[12,"ptr_data","","",41,null],[12,"begin_int_data","","",41,null],[12,"end_int_data","","",41,null],[3,"CXSourceRangeList","","",null,null],[12,"count","","",42,null],[12,"ranges","","",42,null],[3,"CXString","","",null,null],[12,"data","","",43,null],[12,"private_flags","","",43,null],[3,"CXTUResourceUsage","","",null,null],[12,"data","","",44,null],[12,"numEntries","","",44,null],[12,"entries","","",44,null],[3,"CXTUResourceUsageEntry","","",null,null],[12,"kind","","",45,null],[12,"amount","","",45,null],[3,"CXToken","","",null,null],[12,"int_data","","",46,null],[12,"ptr_data","","",46,null],[3,"CXType","","",null,null],[12,"kind","","",47,null],[12,"data","","",47,null],[3,"CXUnsavedFile","","",null,null],[12,"Filename","","",48,null],[12,"Contents","","",48,null],[12,"Length","","",48,null],[3,"CXVersion","","",null,null],[12,"Major","","",49,null],[12,"Minor","","",49,null],[12,"Subminor","","",49,null],[3,"IndexerCallbacks","","",null,null],[12,"abortQuery","","",50,null],[12,"diagnostic","","",50,null],[12,"enteredMainFile","","",50,null],[12,"ppIncludedFile","","",50,null],[12,"importedASTFile","","",50,null],[12,"startedTranslationUnit","","",50,null],[12,"indexDeclaration","","",50,null],[12,"indexEntityReference","","",50,null],[4,"CXAvailabilityKind","","",null,null],[13,"Available","","",51,null],[13,"Deprecated","","",51,null],[13,"NotAvailable","","",51,null],[13,"NotAccessible","","",51,null],[4,"CXCallingConv","","",null,null],[13,"Default","","",52,null],[13,"C","","",52,null],[13,"X86StdCall","","",52,null],[13,"X86FastCall","","",52,null],[13,"X86ThisCall","","",52,null],[13,"X86Pascal","","",52,null],[13,"AAPCS","","",52,null],[13,"AAPCS_VFP","","",52,null],[13,"IntelOclBicc","","",52,null],[13,"X86_64Win64","","",52,null],[13,"X86_64SysV","","",52,null],[13,"Invalid","","",52,null],[13,"Unexposed","","",52,null],[4,"CXChildVisitResult","","",null,null],[13,"Break","","",53,null],[13,"Continue","","",53,null],[13,"Recurse","","",53,null],[4,"CXCompilationDatabase_Error","","",null,null],[13,"NoError","","",54,null],[13,"CanNotLoadDatabase","","",54,null],[4,"CXCompletionChunkKind","","",null,null],[13,"Optional","","",55,null],[13,"TypedText","","",55,null],[13,"Text","","",55,null],[13,"Placeholder","","",55,null],[13,"Informative","","",55,null],[13,"CurrentParameter","","",55,null],[13,"LeftParen","","",55,null],[13,"RightParen","","",55,null],[13,"LeftBracket","","",55,null],[13,"RightBracket","","",55,null],[13,"LeftBrace","","",55,null],[13,"RightBrace","","",55,null],[13,"LeftAngle","","",55,null],[13,"RightAngle","","",55,null],[13,"Comma","","",55,null],[13,"ResultType","","",55,null],[13,"Colon","","",55,null],[13,"SemiColon","","",55,null],[13,"Equal","","",55,null],[13,"HorizontalSpace","","",55,null],[13,"VerticalSpace","","",55,null],[4,"CXCursorKind","","",null,null],[13,"UnexposedDecl","","",56,null],[13,"StructDecl","","",56,null],[13,"UnionDecl","","",56,null],[13,"ClassDecl","","",56,null],[13,"EnumDecl","","",56,null],[13,"FieldDecl","","",56,null],[13,"EnumConstantDecl","","",56,null],[13,"FunctionDecl","","",56,null],[13,"VarDecl","","",56,null],[13,"ParmDecl","","",56,null],[13,"ObjCInterfaceDecl","","",56,null],[13,"ObjCCategoryDecl","","",56,null],[13,"ObjCProtocolDecl","","",56,null],[13,"ObjCPropertyDecl","","",56,null],[13,"ObjCIvarDecl","","",56,null],[13,"ObjCInstanceMethodDecl","","",56,null],[13,"ObjCClassMethodDecl","","",56,null],[13,"ObjCImplementationDecl","","",56,null],[13,"ObjCCategoryImplDecl","","",56,null],[13,"TypedefDecl","","",56,null],[13,"CXXMethod","","",56,null],[13,"Namespace","","",56,null],[13,"LinkageSpec","","",56,null],[13,"Constructor","","",56,null],[13,"Destructor","","",56,null],[13,"ConversionFunction","","",56,null],[13,"TemplateTypeParameter","","",56,null],[13,"NonTypeTemplateParameter","","",56,null],[13,"TemplateTemplateParameter","","",56,null],[13,"FunctionTemplate","","",56,null],[13,"ClassTemplate","","",56,null],[13,"ClassTemplatePartialSpecialization","","",56,null],[13,"NamespaceAlias","","",56,null],[13,"UsingDirective","","",56,null],[13,"UsingDeclaration","","",56,null],[13,"TypeAliasDecl","","",56,null],[13,"ObjCSynthesizeDecl","","",56,null],[13,"ObjCDynamicDecl","","",56,null],[13,"CXXAccessSpecifier","","",56,null],[13,"ObjCSuperClassRef","","",56,null],[13,"ObjCProtocolRef","","",56,null],[13,"ObjCClassRef","","",56,null],[13,"TypeRef","","",56,null],[13,"CXXBaseSpecifier","","",56,null],[13,"TemplateRef","","",56,null],[13,"NamespaceRef","","",56,null],[13,"MemberRef","","",56,null],[13,"LabelRef","","",56,null],[13,"OverloadedDeclRef","","",56,null],[13,"VariableRef","","",56,null],[13,"InvalidFile","","",56,null],[13,"NoDeclFound","","",56,null],[13,"NotImplemented","","",56,null],[13,"InvalidCode","","",56,null],[13,"UnexposedExpr","","",56,null],[13,"DeclRefExpr","","",56,null],[13,"MemberRefExpr","","",56,null],[13,"CallExpr","","",56,null],[13,"ObjCMessageExpr","","",56,null],[13,"BlockExpr","","",56,null],[13,"IntegerLiteral","","",56,null],[13,"FloatingLiteral","","",56,null],[13,"ImaginaryLiteral","","",56,null],[13,"StringLiteral","","",56,null],[13,"CharacterLiteral","","",56,null],[13,"ParenExpr","","",56,null],[13,"UnaryOperator","","",56,null],[13,"ArraySubscriptExpr","","",56,null],[13,"BinaryOperator","","",56,null],[13,"CompoundAssignOperator","","",56,null],[13,"ConditionalOperator","","",56,null],[13,"CStyleCastExpr","","",56,null],[13,"CompoundLiteralExpr","","",56,null],[13,"InitListExpr","","",56,null],[13,"AddrLabelExpr","","",56,null],[13,"StmtExpr","","",56,null],[13,"GenericSelectionExpr","","",56,null],[13,"GNUNullExpr","","",56,null],[13,"CXXStaticCastExpr","","",56,null],[13,"CXXDynamicCastExpr","","",56,null],[13,"CXXReinterpretCastExpr","","",56,null],[13,"CXXConstCastExpr","","",56,null],[13,"CXXFunctionalCastExpr","","",56,null],[13,"CXXTypeidExpr","","",56,null],[13,"CXXBoolLiteralExpr","","",56,null],[13,"CXXNullPtrLiteralExpr","","",56,null],[13,"CXXThisExpr","","",56,null],[13,"CXXThrowExpr","","",56,null],[13,"CXXNewExpr","","",56,null],[13,"CXXDeleteExpr","","",56,null],[13,"UnaryExpr","","",56,null],[13,"ObjCStringLiteral","","",56,null],[13,"ObjCEncodeExpr","","",56,null],[13,"ObjCSelectorExpr","","",56,null],[13,"ObjCProtocolExpr","","",56,null],[13,"ObjCBridgedCastExpr","","",56,null],[13,"PackExpansionExpr","","",56,null],[13,"SizeOfPackExpr","","",56,null],[13,"LambdaExpr","","",56,null],[13,"ObjCBoolLiteralExpr","","",56,null],[13,"ObjCSelfExpr","","",56,null],[13,"UnexposedStmt","","",56,null],[13,"LabelStmt","","",56,null],[13,"CompoundStmt","","",56,null],[13,"CaseStmt","","",56,null],[13,"DefaultStmt","","",56,null],[13,"IfStmt","","",56,null],[13,"SwitchStmt","","",56,null],[13,"WhileStmt","","",56,null],[13,"DoStmt","","",56,null],[13,"ForStmt","","",56,null],[13,"GotoStmt","","",56,null],[13,"IndirectGotoStmt","","",56,null],[13,"ContinueStmt","","",56,null],[13,"BreakStmt","","",56,null],[13,"ReturnStmt","","",56,null],[13,"AsmStmt","","Duplicate of `GccAsmStmt`.",56,null],[13,"ObjCAtTryStmt","","",56,null],[13,"ObjCAtCatchStmt","","",56,null],[13,"ObjCAtFinallyStmt","","",56,null],[13,"ObjCAtThrowStmt","","",56,null],[13,"ObjCAtSynchronizedStmt","","",56,null],[13,"ObjCAutoreleasePoolStmt","","",56,null],[13,"ObjCForCollectionStmt","","",56,null],[13,"CXXCatchStmt","","",56,null],[13,"CXXTryStmt","","",56,null],[13,"CXXForRangeStmt","","",56,null],[13,"SEHTryStmt","","",56,null],[13,"SEHExceptStmt","","",56,null],[13,"SEHFinallyStmt","","",56,null],[13,"MSAsmStmt","","",56,null],[13,"NullStmt","","",56,null],[13,"DeclStmt","","",56,null],[13,"OMPParallelDirective","","",56,null],[13,"OMPSimdDirective","","",56,null],[13,"OMPForDirective","","",56,null],[13,"OMPSectionsDirective","","",56,null],[13,"OMPSectionDirective","","",56,null],[13,"OMPSingleDirective","","",56,null],[13,"OMPParallelForDirective","","",56,null],[13,"OMPParallelSectionsDirective","","",56,null],[13,"OMPTaskDirective","","",56,null],[13,"OMPMasterDirective","","",56,null],[13,"OMPCriticalDirective","","",56,null],[13,"OMPTaskyieldDirective","","",56,null],[13,"OMPBarrierDirective","","",56,null],[13,"OMPTaskwaitDirective","","",56,null],[13,"OMPFlushDirective","","",56,null],[13,"SEHLeaveStmt","","",56,null],[13,"TranslationUnit","","",56,null],[13,"UnexposedAttr","","",56,null],[13,"IBActionAttr","","",56,null],[13,"IBOutletAttr","","",56,null],[13,"IBOutletCollectionAttr","","",56,null],[13,"CXXFinalAttr","","",56,null],[13,"CXXOverrideAttr","","",56,null],[13,"AnnotateAttr","","",56,null],[13,"AsmLabelAttr","","",56,null],[13,"PackedAttr","","",56,null],[13,"PureAttr","","",56,null],[13,"ConstAttr","","",56,null],[13,"NoDuplicateAttr","","",56,null],[13,"CUDAConstantAttr","","",56,null],[13,"CUDADeviceAttr","","",56,null],[13,"CUDAGlobalAttr","","",56,null],[13,"CUDAHostAttr","","",56,null],[13,"PreprocessingDirective","","",56,null],[13,"MacroDefinition","","",56,null],[13,"MacroExpansion","","Duplicate of `MacroInstantiation`.",56,null],[13,"InclusionDirective","","",56,null],[13,"ModuleImportDecl","","",56,null],[4,"CXDiagnosticSeverity","","",null,null],[13,"Ignored","","",57,null],[13,"Note","","",57,null],[13,"Warning","","",57,null],[13,"Error","","",57,null],[13,"Fatal","","",57,null],[4,"CXErrorCode","","",null,null],[13,"Success","","",58,null],[13,"Failure","","",58,null],[13,"Crashed","","",58,null],[13,"InvalidArguments","","",58,null],[13,"ASTReadError","","",58,null],[4,"CXIdxAttrKind","","",null,null],[13,"Unexposed","","",59,null],[13,"IBAction","","",59,null],[13,"IBOutlet","","",59,null],[13,"IBOutletCollection","","",59,null],[4,"CXIdxEntityCXXTemplateKind","","",null,null],[13,"NonTemplate","","",60,null],[13,"Template","","",60,null],[13,"TemplatePartialSpecialization","","",60,null],[13,"TemplateSpecialization","","",60,null],[4,"CXIdxEntityKind","","",null,null],[13,"Unexposed","","",61,null],[13,"Typedef","","",61,null],[13,"Function","","",61,null],[13,"Variable","","",61,null],[13,"Field","","",61,null],[13,"EnumConstant","","",61,null],[13,"ObjCClass","","",61,null],[13,"ObjCProtocol","","",61,null],[13,"ObjCCategory","","",61,null],[13,"ObjCInstanceMethod","","",61,null],[13,"ObjCClassMethod","","",61,null],[13,"ObjCProperty","","",61,null],[13,"ObjCIvar","","",61,null],[13,"Enum","","",61,null],[13,"Struct","","",61,null],[13,"Union","","",61,null],[13,"CXXClass","","",61,null],[13,"CXXNamespace","","",61,null],[13,"CXXNamespaceAlias","","",61,null],[13,"CXXStaticVariable","","",61,null],[13,"CXXStaticMethod","","",61,null],[13,"CXXInstanceMethod","","",61,null],[13,"CXXConstructor","","",61,null],[13,"CXXDestructor","","",61,null],[13,"CXXConversionFunction","","",61,null],[13,"CXXTypeAlias","","",61,null],[13,"CXXInterface","","",61,null],[4,"CXIdxEntityLanguage","","",null,null],[13,"None","","",62,null],[13,"C","","",62,null],[13,"ObjC","","",62,null],[13,"CXX","","",62,null],[4,"CXIdxEntityRefKind","","",null,null],[13,"Direct","","",63,null],[13,"Implicit","","",63,null],[4,"CXIdxObjCContainerKind","","",null,null],[13,"ForwardRef","","",64,null],[13,"Interface","","",64,null],[13,"Implementation","","",64,null],[4,"CXLanguageKind","","",null,null],[13,"Invalid","","",65,null],[13,"C","","",65,null],[13,"ObjC","","",65,null],[13,"CPlusPlus","","",65,null],[4,"CXLinkageKind","","",null,null],[13,"Invalid","","",66,null],[13,"NoLinkage","","",66,null],[13,"Internal","","",66,null],[13,"UniqueExternal","","",66,null],[13,"External","","",66,null],[4,"CXLoadDiag_Error","","",null,null],[13,"None","","",67,null],[13,"Unknown","","",67,null],[13,"CannotLoad","","",67,null],[13,"InvalidFile","","",67,null],[4,"CXRefQualifierKind","","",null,null],[13,"None","","",68,null],[13,"LValue","","",68,null],[13,"RValue","","",68,null],[4,"CXResult","","",null,null],[13,"Success","","",69,null],[13,"Invalid","","",69,null],[13,"VisitBreak","","",69,null],[4,"CXSaveError","","",null,null],[13,"None","","",70,null],[13,"Unknown","","",70,null],[13,"TranslationErrors","","",70,null],[13,"InvalidTU","","",70,null],[4,"CXTUResourceUsageKind","","",null,null],[13,"AST","","",71,null],[13,"Identifiers","","",71,null],[13,"Selectors","","",71,null],[13,"GlobalCompletionResults","","",71,null],[13,"SourceManagerContentCache","","",71,null],[13,"AST_SideTables","","",71,null],[13,"SourceManager_Membuffer_Malloc","","",71,null],[13,"SourceManager_Membuffer_MMap","","",71,null],[13,"ExternalASTSource_Membuffer_Malloc","","",71,null],[13,"ExternalASTSource_Membuffer_MMap","","",71,null],[13,"Preprocessor","","",71,null],[13,"PreprocessingRecord","","",71,null],[13,"SourceManager_DataStructures","","",71,null],[13,"Preprocessor_HeaderSearch","","",71,null],[4,"CXTokenKind","","",null,null],[13,"Punctuation","","",72,null],[13,"Keyword","","",72,null],[13,"Identifier","","",72,null],[13,"Literal","","",72,null],[13,"Comment","","",72,null],[4,"CXTypeKind","","",null,null],[13,"Invalid","","",73,null],[13,"Unexposed","","",73,null],[13,"Void","","",73,null],[13,"Bool","","",73,null],[13,"Char_U","","",73,null],[13,"UChar","","",73,null],[13,"Char16","","",73,null],[13,"Char32","","",73,null],[13,"UShort","","",73,null],[13,"UInt","","",73,null],[13,"ULong","","",73,null],[13,"ULongLong","","",73,null],[13,"UInt128","","",73,null],[13,"Char_S","","",73,null],[13,"SChar","","",73,null],[13,"WChar","","",73,null],[13,"Short","","",73,null],[13,"Int","","",73,null],[13,"Long","","",73,null],[13,"LongLong","","",73,null],[13,"Int128","","",73,null],[13,"Float","","",73,null],[13,"Double","","",73,null],[13,"LongDouble","","",73,null],[13,"NullPtr","","",73,null],[13,"Overload","","",73,null],[13,"Dependent","","",73,null],[13,"ObjCId","","",73,null],[13,"ObjCClass","","",73,null],[13,"ObjCSel","","",73,null],[13,"Complex","","",73,null],[13,"Pointer","","",73,null],[13,"BlockPointer","","",73,null],[13,"LValueReference","","",73,null],[13,"RValueReference","","",73,null],[13,"Record","","",73,null],[13,"Enum","","",73,null],[13,"Typedef","","",73,null],[13,"ObjCInterface","","",73,null],[13,"ObjCObjectPointer","","",73,null],[13,"FunctionNoProto","","",73,null],[13,"FunctionProto","","",73,null],[13,"ConstantArray","","",73,null],[13,"Vector","","",73,null],[13,"IncompleteArray","","",73,null],[13,"VariableArray","","",73,null],[13,"DependentSizedArray","","",73,null],[13,"MemberPointer","","",73,null],[4,"CXTypeLayoutError","","",null,null],[13,"Invalid","","",74,null],[13,"Incomplete","","",74,null],[13,"Dependent","","",74,null],[13,"NotConstantSize","","",74,null],[13,"InvalidFieldName","","",74,null],[4,"CXVisitorResult","","",null,null],[13,"Break","","",75,null],[13,"Continue","","",75,null],[4,"CX_CXXAccessSpecifier","","",null,null],[13,"CXXInvalidAccessSpecifier","","",76,null],[13,"CXXPublic","","",76,null],[13,"CXXProtected","","",76,null],[13,"CXXPrivate","","",76,null],[5,"clang_CXCursorSet_contains","","",null,null],[5,"clang_CXCursorSet_insert","","",null,null],[5,"clang_CXIndex_getGlobalOptions","","",null,null],[5,"clang_CXIndex_setGlobalOptions","","",null,null],[5,"clang_CXXMethod_isConst","","",null,null],[5,"clang_CXXMethod_isPureVirtual","","",null,null],[5,"clang_CXXMethod_isStatic","","",null,null],[5,"clang_CXXMethod_isVirtual","","",null,null],[5,"clang_CompilationDatabase_dispose","","",null,null],[5,"clang_CompilationDatabase_fromDirectory","","",null,null],[5,"clang_CompilationDatabase_getAllCompileCommands","","",null,null],[5,"clang_CompilationDatabase_getCompileCommands","","",null,null],[5,"clang_CompileCommand_getArg","","",null,null],[5,"clang_CompileCommand_getDirectory","","",null,null],[5,"clang_CompileCommand_getMappedSourceContent","","",null,null],[5,"clang_CompileCommand_getMappedSourcePath","","",null,null],[5,"clang_CompileCommand_getNumArgs","","",null,null],[5,"clang_CompileCommand_getNumMappedSources","","",null,null],[5,"clang_CompileCommands_dispose","","",null,null],[5,"clang_CompileCommands_getCommand","","",null,null],[5,"clang_CompileCommands_getSize","","",null,null],[5,"clang_Cursor_getArgument","","",null,null],[5,"clang_Cursor_getBriefCommentText","","",null,null],[5,"clang_Cursor_getCommentRange","","",null,null],[5,"clang_Cursor_getModule","","",null,null],[5,"clang_Cursor_getNumArguments","","",null,null],[5,"clang_Cursor_getObjCDeclQualifiers","","",null,null],[5,"clang_Cursor_getObjCPropertyAttributes","","",null,null],[5,"clang_Cursor_getObjCSelectorIndex","","",null,null],[5,"clang_Cursor_getRawCommentText","","",null,null],[5,"clang_Cursor_getReceiverType","","",null,null],[5,"clang_Cursor_getSpellingNameRange","","",null,null],[5,"clang_Cursor_getTranslationUnit","","",null,null],[5,"clang_Cursor_isBitField","","",null,null],[5,"clang_Cursor_isDynamicCall","","",null,null],[5,"clang_Cursor_isNull","","",null,null],[5,"clang_Cursor_isObjCOptional","","",null,null],[5,"clang_Cursor_isVariadic","","",null,null],[5,"clang_IndexAction_create","","",null,null],[5,"clang_IndexAction_dispose","","",null,null],[5,"clang_Location_isFromMainFile","","",null,null],[5,"clang_Location_isInSystemHeader","","",null,null],[5,"clang_Module_getASTFile","","",null,null],[5,"clang_Module_getFullName","","",null,null],[5,"clang_Module_getName","","",null,null],[5,"clang_Module_getNumTopLevelHeaders","","",null,null],[5,"clang_Module_getParent","","",null,null],[5,"clang_Module_getTopLevelHeader","","",null,null],[5,"clang_Module_isSystem","","",null,null],[5,"clang_Range_isNull","","",null,null],[5,"clang_Type_getAlignOf","","",null,null],[5,"clang_Type_getCXXRefQualifier","","",null,null],[5,"clang_Type_getClassType","","",null,null],[5,"clang_Type_getNumTemplateArguments","","",null,null],[5,"clang_Type_getOffsetOf","","",null,null],[5,"clang_Type_getSizeOf","","",null,null],[5,"clang_Type_getTemplateArgumentAsType","","",null,null],[5,"clang_annotateTokens","","",null,null],[5,"clang_codeCompleteAt","","",null,null],[5,"clang_codeCompleteGetContainerKind","","",null,null],[5,"clang_codeCompleteGetContainerUSR","","",null,null],[5,"clang_codeCompleteGetContexts","","",null,null],[5,"clang_codeCompleteGetDiagnostic","","",null,null],[5,"clang_codeCompleteGetNumDiagnostics","","",null,null],[5,"clang_codeCompleteGetObjCSelector","","",null,null],[5,"clang_constructUSR_ObjCCategory","","",null,null],[5,"clang_constructUSR_ObjCClass","","",null,null],[5,"clang_constructUSR_ObjCIvar","","",null,null],[5,"clang_constructUSR_ObjCMethod","","",null,null],[5,"clang_constructUSR_ObjCProperty","","",null,null],[5,"clang_constructUSR_ObjCProtocol","","",null,null],[5,"clang_createCXCursorSet","","",null,null],[5,"clang_createIndex","","",null,null],[5,"clang_createTranslationUnit","","",null,null],[5,"clang_createTranslationUnit2","","",null,null],[5,"clang_createTranslationUnitFromSourceFile","","",null,null],[5,"clang_defaultCodeCompleteOptions","","",null,null],[5,"clang_defaultDiagnosticDisplayOptions","","",null,null],[5,"clang_defaultEditingTranslationUnitOptions","","",null,null],[5,"clang_defaultReparseOptions","","",null,null],[5,"clang_defaultSaveOptions","","",null,null],[5,"clang_disposeCXCursorSet","","",null,null],[5,"clang_disposeCXPlatformAvailability","","",null,null],[5,"clang_disposeCXTUResourceUsage","","",null,null],[5,"clang_disposeCodeCompleteResults","","",null,null],[5,"clang_disposeDiagnostic","","",null,null],[5,"clang_disposeDiagnosticSet","","",null,null],[5,"clang_disposeIndex","","",null,null],[5,"clang_disposeOverriddenCursors","","",null,null],[5,"clang_disposeSourceRangeList","","",null,null],[5,"clang_disposeString","","",null,null],[5,"clang_disposeTokens","","",null,null],[5,"clang_disposeTranslationUnit","","",null,null],[5,"clang_enableStackTraces","","",null,null],[5,"clang_equalCursors","","",null,null],[5,"clang_equalLocations","","",null,null],[5,"clang_equalRanges","","",null,null],[5,"clang_equalTypes","","",null,null],[5,"clang_executeOnThread","","",null,null],[5,"clang_findIncludesInFile","","",null,null],[5,"clang_findReferencesInFile","","",null,null],[5,"clang_formatDiagnostic","","",null,null],[5,"clang_free","","",null,null],[5,"clang_getArgType","","",null,null],[5,"clang_getArrayElementType","","",null,null],[5,"clang_getArraySize","","",null,null],[5,"clang_getCString","","",null,null],[5,"clang_getCXTUResourceUsage","","",null,null],[5,"clang_getCXXAccessSpecifier","","",null,null],[5,"clang_getCanonicalCursor","","",null,null],[5,"clang_getCanonicalType","","",null,null],[5,"clang_getChildDiagnostics","","",null,null],[5,"clang_getClangVersion","","",null,null],[5,"clang_getCompletionAnnotation","","",null,null],[5,"clang_getCompletionAvailability","","",null,null],[5,"clang_getCompletionBriefComment","","",null,null],[5,"clang_getCompletionChunkCompletionString","","",null,null],[5,"clang_getCompletionChunkKind","","",null,null],[5,"clang_getCompletionChunkText","","",null,null],[5,"clang_getCompletionNumAnnotations","","",null,null],[5,"clang_getCompletionParent","","",null,null],[5,"clang_getCompletionPriority","","",null,null],[5,"clang_getCursor","","",null,null],[5,"clang_getCursorAvailability","","",null,null],[5,"clang_getCursorCompletionString","","",null,null],[5,"clang_getCursorDefinition","","",null,null],[5,"clang_getCursorDisplayName","","",null,null],[5,"clang_getCursorExtent","","",null,null],[5,"clang_getCursorKind","","",null,null],[5,"clang_getCursorKindSpelling","","",null,null],[5,"clang_getCursorLanguage","","",null,null],[5,"clang_getCursorLexicalParent","","",null,null],[5,"clang_getCursorLinkage","","",null,null],[5,"clang_getCursorLocation","","",null,null],[5,"clang_getCursorPlatformAvailability","","",null,null],[5,"clang_getCursorReferenceNameRange","","",null,null],[5,"clang_getCursorReferenced","","",null,null],[5,"clang_getCursorResultType","","",null,null],[5,"clang_getCursorSemanticParent","","",null,null],[5,"clang_getCursorSpelling","","",null,null],[5,"clang_getCursorType","","",null,null],[5,"clang_getCursorUSR","","",null,null],[5,"clang_getDeclObjCTypeEncoding","","",null,null],[5,"clang_getDefinitionSpellingAndExtent","","",null,null],[5,"clang_getDiagnostic","","",null,null],[5,"clang_getDiagnosticCategory","","",null,null],[5,"clang_getDiagnosticCategoryName","","",null,null],[5,"clang_getDiagnosticCategoryText","","",null,null],[5,"clang_getDiagnosticFixIt","","",null,null],[5,"clang_getDiagnosticInSet","","",null,null],[5,"clang_getDiagnosticLocation","","",null,null],[5,"clang_getDiagnosticNumFixIts","","",null,null],[5,"clang_getDiagnosticNumRanges","","",null,null],[5,"clang_getDiagnosticOption","","",null,null],[5,"clang_getDiagnosticRange","","",null,null],[5,"clang_getDiagnosticSetFromTU","","",null,null],[5,"clang_getDiagnosticSeverity","","",null,null],[5,"clang_getDiagnosticSpelling","","",null,null],[5,"clang_getElementType","","",null,null],[5,"clang_getEnumConstantDeclUnsignedValue","","",null,null],[5,"clang_getEnumConstantDeclValue","","",null,null],[5,"clang_getEnumDeclIntegerType","","",null,null],[5,"clang_getExpansionLocation","","",null,null],[5,"clang_getFieldDeclBitWidth","","",null,null],[5,"clang_getFile","","",null,null],[5,"clang_getFileLocation","","",null,null],[5,"clang_getFileName","","",null,null],[5,"clang_getFileTime","","",null,null],[5,"clang_getFileUniqueID","","",null,null],[5,"clang_getFunctionTypeCallingConv","","",null,null],[5,"clang_getIBOutletCollectionType","","",null,null],[5,"clang_getIncludedFile","","",null,null],[5,"clang_getInclusions","","",null,null],[5,"clang_getInstantiationLocation","","",null,null],[5,"clang_getLocation","","",null,null],[5,"clang_getLocationForOffset","","",null,null],[5,"clang_getModuleForFile","","",null,null],[5,"clang_getNullCursor","","",null,null],[5,"clang_getNullLocation","","",null,null],[5,"clang_getNullRange","","",null,null],[5,"clang_getNumArgTypes","","",null,null],[5,"clang_getNumCompletionChunks","","",null,null],[5,"clang_getNumDiagnostics","","",null,null],[5,"clang_getNumDiagnosticsInSet","","",null,null],[5,"clang_getNumElements","","",null,null],[5,"clang_getNumOverloadedDecls","","",null,null],[5,"clang_getOverloadedDecl","","",null,null],[5,"clang_getOverriddenCursors","","",null,null],[5,"clang_getPointeeType","","",null,null],[5,"clang_getPresumedLocation","","",null,null],[5,"clang_getRange","","",null,null],[5,"clang_getRangeEnd","","",null,null],[5,"clang_getRangeStart","","",null,null],[5,"clang_getRemappings","","",null,null],[5,"clang_getRemappingsFromFileList","","",null,null],[5,"clang_getResultType","","",null,null],[5,"clang_getSkippedRanges","","",null,null],[5,"clang_getSpecializedCursorTemplate","","",null,null],[5,"clang_getSpellingLocation","","",null,null],[5,"clang_getTUResourceUsageName","","",null,null],[5,"clang_getTemplateCursorKind","","",null,null],[5,"clang_getTokenExtent","","",null,null],[5,"clang_getTokenKind","","",null,null],[5,"clang_getTokenLocation","","",null,null],[5,"clang_getTokenSpelling","","",null,null],[5,"clang_getTranslationUnitCursor","","",null,null],[5,"clang_getTranslationUnitSpelling","","",null,null],[5,"clang_getTypeDeclaration","","",null,null],[5,"clang_getTypeKindSpelling","","",null,null],[5,"clang_getTypeSpelling","","",null,null],[5,"clang_getTypedefDeclUnderlyingType","","",null,null],[5,"clang_hashCursor","","",null,null],[5,"clang_indexLoc_getCXSourceLocation","","",null,null],[5,"clang_indexLoc_getFileLocation","","",null,null],[5,"clang_indexSourceFile","","",null,null],[5,"clang_indexTranslationUnit","","",null,null],[5,"clang_index_getCXXClassDeclInfo","","",null,null],[5,"clang_index_getClientContainer","","",null,null],[5,"clang_index_getClientEntity","","",null,null],[5,"clang_index_getIBOutletCollectionAttrInfo","","",null,null],[5,"clang_index_getObjCCategoryDeclInfo","","",null,null],[5,"clang_index_getObjCContainerDeclInfo","","",null,null],[5,"clang_index_getObjCInterfaceDeclInfo","","",null,null],[5,"clang_index_getObjCPropertyDeclInfo","","",null,null],[5,"clang_index_getObjCProtocolRefListInfo","","",null,null],[5,"clang_index_isEntityObjCContainerKind","","",null,null],[5,"clang_index_setClientContainer","","",null,null],[5,"clang_index_setClientEntity","","",null,null],[5,"clang_isAttribute","","",null,null],[5,"clang_isConstQualifiedType","","",null,null],[5,"clang_isCursorDefinition","","",null,null],[5,"clang_isDeclaration","","",null,null],[5,"clang_isExpression","","",null,null],[5,"clang_isFileMultipleIncludeGuarded","","",null,null],[5,"clang_isFunctionTypeVariadic","","",null,null],[5,"clang_isInvalid","","",null,null],[5,"clang_isPODType","","",null,null],[5,"clang_isPreprocessing","","",null,null],[5,"clang_isReference","","",null,null],[5,"clang_isRestrictQualifiedType","","",null,null],[5,"clang_isStatement","","",null,null],[5,"clang_isTranslationUnit","","",null,null],[5,"clang_isUnexposed","","",null,null],[5,"clang_isVirtualBase","","",null,null],[5,"clang_isVolatileQualifiedType","","",null,null],[5,"clang_loadDiagnostics","","",null,null],[5,"clang_parseTranslationUnit","","",null,null],[5,"clang_parseTranslationUnit2","","",null,null],[5,"clang_remap_dispose","","",null,null],[5,"clang_remap_getFilenames","","",null,null],[5,"clang_remap_getNumFiles","","",null,null],[5,"clang_reparseTranslationUnit","","",null,null],[5,"clang_saveTranslationUnit","","",null,null],[5,"clang_sortCodeCompletionResults","","",null,null],[5,"clang_toggleCrashRecovery","","",null,null],[5,"clang_tokenize","","",null,null],[5,"clang_visitChildren","","",null,null],[0,"support","","Provides helper functionality.",null,null],[3,"Clang","clang_sys::support","A `clang` executable.",null,null],[12,"path","","The path to this `clang` executable.",77,null],[12,"version","","The version of this `clang` executable if it could be parsed.",77,null],[12,"c_search_paths","","The directories searched by this `clang` executable for C headers.",77,null],[12,"cpp_search_paths","","The directories searched by this `clang` executable for C++ headers.",77,null],[11,"fmt","","",77,null],[11,"clone","","",77,null],[11,"find","","Returns a `clang` executable if one can be found.",77,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[6,"CXClientData","clang_sys","",null,null],[6,"CXCursorVisitor","","",null,null],[6,"CXInclusionVisitor","","",null,null],[17,"CXCodeComplete_IncludeMacros","","",null,null],[17,"CXCodeComplete_IncludeCodePatterns","","",null,null],[17,"CXCodeComplete_IncludeBriefComments","","",null,null],[17,"CXCompletionContext_Unexposed","","",null,null],[17,"CXCompletionContext_AnyType","","",null,null],[17,"CXCompletionContext_AnyValue","","",null,null],[17,"CXCompletionContext_ObjCObjectValue","","",null,null],[17,"CXCompletionContext_ObjCSelectorValue","","",null,null],[17,"CXCompletionContext_CXXClassTypeValue","","",null,null],[17,"CXCompletionContext_DotMemberAccess","","",null,null],[17,"CXCompletionContext_ArrowMemberAccess","","",null,null],[17,"CXCompletionContext_ObjCPropertyAccess","","",null,null],[17,"CXCompletionContext_EnumTag","","",null,null],[17,"CXCompletionContext_UnionTag","","",null,null],[17,"CXCompletionContext_StructTag","","",null,null],[17,"CXCompletionContext_ClassTag","","",null,null],[17,"CXCompletionContext_Namespace","","",null,null],[17,"CXCompletionContext_NestedNameSpecifier","","",null,null],[17,"CXCompletionContext_ObjCInterface","","",null,null],[17,"CXCompletionContext_ObjCProtocol","","",null,null],[17,"CXCompletionContext_ObjCCategory","","",null,null],[17,"CXCompletionContext_ObjCInstanceMessage","","",null,null],[17,"CXCompletionContext_ObjCClassMessage","","",null,null],[17,"CXCompletionContext_ObjCSelectorName","","",null,null],[17,"CXCompletionContext_MacroName","","",null,null],[17,"CXCompletionContext_NaturalLanguage","","",null,null],[17,"CXCompletionContext_Unknown","","",null,null],[17,"CXDiagnostic_DisplaySourceLocation","","",null,null],[17,"CXDiagnostic_DisplayColumn","","",null,null],[17,"CXDiagnostic_DisplaySourceRanges","","",null,null],[17,"CXDiagnostic_DisplayOption","","",null,null],[17,"CXDiagnostic_DisplayCategoryId","","",null,null],[17,"CXDiagnostic_DisplayCategoryName","","",null,null],[17,"CXGlobalOpt_None","","",null,null],[17,"CXGlobalOpt_ThreadBackgroundPriorityForIndexing","","",null,null],[17,"CXGlobalOpt_ThreadBackgroundPriorityForEditing","","",null,null],[17,"CXGlobalOpt_ThreadBackgroundPriorityForAll","","",null,null],[17,"CXIdxDeclFlag_Skipped","","",null,null],[17,"CXIndexOptNone","","",null,null],[17,"CXIndexOptSuppressRedundantRefs","","",null,null],[17,"CXIndexOptIndexFunctionLocalSymbols","","",null,null],[17,"CXIndexOptIndexImplicitTemplateInstantiations","","",null,null],[17,"CXIndexOptSuppressWarnings","","",null,null],[17,"CXIndexOptSkipParsedBodiesInSession","","",null,null],[17,"CXNameRange_WantQualifier","","",null,null],[17,"CXNameRange_WantTemplateArgs","","",null,null],[17,"CXNameRange_WantSinglePiece","","",null,null],[17,"CXObjCDeclQualifier_None","","",null,null],[17,"CXObjCDeclQualifier_In","","",null,null],[17,"CXObjCDeclQualifier_Inout","","",null,null],[17,"CXObjCDeclQualifier_Out","","",null,null],[17,"CXObjCDeclQualifier_Bycopy","","",null,null],[17,"CXObjCDeclQualifier_Byref","","",null,null],[17,"CXObjCDeclQualifier_Oneway","","",null,null],[17,"CXObjCPropertyAttr_noattr","","",null,null],[17,"CXObjCPropertyAttr_readonly","","",null,null],[17,"CXObjCPropertyAttr_getter","","",null,null],[17,"CXObjCPropertyAttr_assign","","",null,null],[17,"CXObjCPropertyAttr_readwrite","","",null,null],[17,"CXObjCPropertyAttr_retain","","",null,null],[17,"CXObjCPropertyAttr_copy","","",null,null],[17,"CXObjCPropertyAttr_nonatomic","","",null,null],[17,"CXObjCPropertyAttr_setter","","",null,null],[17,"CXObjCPropertyAttr_atomic","","",null,null],[17,"CXObjCPropertyAttr_weak","","",null,null],[17,"CXObjCPropertyAttr_strong","","",null,null],[17,"CXObjCPropertyAttr_unsafe_unretained","","",null,null],[17,"CXReparse_None","","",null,null],[17,"CXSaveTranslationUnit_None","","",null,null],[17,"CXTranslationUnit_None","","",null,null],[17,"CXTranslationUnit_DetailedPreprocessingRecord","","",null,null],[17,"CXTranslationUnit_Incomplete","","",null,null],[17,"CXTranslationUnit_PrecompiledPreamble","","",null,null],[17,"CXTranslationUnit_CacheCompletionResults","","",null,null],[17,"CXTranslationUnit_ForSerialization","","",null,null],[17,"CXTranslationUnit_CXXChainedPCH","","",null,null],[17,"CXTranslationUnit_SkipFunctionBodies","","",null,null],[17,"CXTranslationUnit_IncludeBriefCommentsInCodeCompletion","","",null,null],[11,"hash","","",51,null],[11,"cmp","","",51,null],[11,"partial_cmp","","",51,null],[11,"eq","","",51,null],[11,"fmt","","",51,null],[11,"clone","","",51,null],[11,"hash","","",52,null],[11,"cmp","","",52,null],[11,"partial_cmp","","",52,null],[11,"eq","","",52,null],[11,"fmt","","",52,null],[11,"clone","","",52,null],[11,"hash","","",53,null],[11,"cmp","","",53,null],[11,"partial_cmp","","",53,null],[11,"eq","","",53,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"hash","","",54,null],[11,"cmp","","",54,null],[11,"partial_cmp","","",54,null],[11,"eq","","",54,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"hash","","",55,null],[11,"cmp","","",55,null],[11,"partial_cmp","","",55,null],[11,"eq","","",55,null],[11,"fmt","","",55,null],[11,"clone","","",55,null],[11,"hash","","",56,null],[11,"cmp","","",56,null],[11,"partial_cmp","","",56,null],[11,"eq","","",56,null],[11,"fmt","","",56,null],[11,"clone","","",56,null],[11,"hash","","",57,null],[11,"cmp","","",57,null],[11,"partial_cmp","","",57,null],[11,"eq","","",57,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"hash","","",58,null],[11,"cmp","","",58,null],[11,"partial_cmp","","",58,null],[11,"eq","","",58,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"hash","","",59,null],[11,"cmp","","",59,null],[11,"partial_cmp","","",59,null],[11,"eq","","",59,null],[11,"fmt","","",59,null],[11,"clone","","",59,null],[11,"hash","","",60,null],[11,"cmp","","",60,null],[11,"partial_cmp","","",60,null],[11,"eq","","",60,null],[11,"fmt","","",60,null],[11,"clone","","",60,null],[11,"hash","","",61,null],[11,"cmp","","",61,null],[11,"partial_cmp","","",61,null],[11,"eq","","",61,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"hash","","",62,null],[11,"cmp","","",62,null],[11,"partial_cmp","","",62,null],[11,"eq","","",62,null],[11,"fmt","","",62,null],[11,"clone","","",62,null],[11,"hash","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"eq","","",63,null],[11,"fmt","","",63,null],[11,"clone","","",63,null],[11,"hash","","",64,null],[11,"cmp","","",64,null],[11,"partial_cmp","","",64,null],[11,"eq","","",64,null],[11,"fmt","","",64,null],[11,"clone","","",64,null],[11,"hash","","",65,null],[11,"cmp","","",65,null],[11,"partial_cmp","","",65,null],[11,"eq","","",65,null],[11,"fmt","","",65,null],[11,"clone","","",65,null],[11,"hash","","",66,null],[11,"cmp","","",66,null],[11,"partial_cmp","","",66,null],[11,"eq","","",66,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"hash","","",67,null],[11,"cmp","","",67,null],[11,"partial_cmp","","",67,null],[11,"eq","","",67,null],[11,"fmt","","",67,null],[11,"clone","","",67,null],[11,"hash","","",68,null],[11,"cmp","","",68,null],[11,"partial_cmp","","",68,null],[11,"eq","","",68,null],[11,"fmt","","",68,null],[11,"clone","","",68,null],[11,"hash","","",69,null],[11,"cmp","","",69,null],[11,"partial_cmp","","",69,null],[11,"eq","","",69,null],[11,"fmt","","",69,null],[11,"clone","","",69,null],[11,"hash","","",70,null],[11,"cmp","","",70,null],[11,"partial_cmp","","",70,null],[11,"eq","","",70,null],[11,"fmt","","",70,null],[11,"clone","","",70,null],[11,"hash","","",71,null],[11,"cmp","","",71,null],[11,"partial_cmp","","",71,null],[11,"eq","","",71,null],[11,"fmt","","",71,null],[11,"clone","","",71,null],[11,"hash","","",72,null],[11,"cmp","","",72,null],[11,"partial_cmp","","",72,null],[11,"eq","","",72,null],[11,"fmt","","",72,null],[11,"clone","","",72,null],[11,"hash","","",73,null],[11,"cmp","","",73,null],[11,"partial_cmp","","",73,null],[11,"eq","","",73,null],[11,"fmt","","",73,null],[11,"clone","","",73,null],[11,"hash","","",74,null],[11,"cmp","","",74,null],[11,"partial_cmp","","",74,null],[11,"eq","","",74,null],[11,"fmt","","",74,null],[11,"clone","","",74,null],[11,"hash","","",75,null],[11,"cmp","","",75,null],[11,"partial_cmp","","",75,null],[11,"eq","","",75,null],[11,"fmt","","",75,null],[11,"clone","","",75,null],[11,"hash","","",76,null],[11,"cmp","","",76,null],[11,"partial_cmp","","",76,null],[11,"eq","","",76,null],[11,"fmt","","",76,null],[11,"clone","","",76,null],[11,"hash","","",78,null],[11,"cmp","","",78,null],[11,"partial_cmp","","",78,null],[11,"lt","","",78,null],[11,"le","","",78,null],[11,"gt","","",78,null],[11,"ge","","",78,null],[11,"clone","","",78,null],[11,"eq","","",78,null],[11,"ne","","",78,null],[11,"fmt","","",78,null],[11,"empty","","Returns an empty set of flags.",78,{"inputs":[],"output":{"name":"cxcodecomplete_flags"}}],[11,"all","","Returns the set containing all flags.",78,{"inputs":[],"output":{"name":"cxcodecomplete_flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",78,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",78,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",78,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxcodecomplete_flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",78,null],[11,"is_all","","Returns `true` if all flags are currently set.",78,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",78,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",78,null],[11,"insert","","Inserts the specified flags in-place.",78,null],[11,"remove","","Removes the specified flags in-place.",78,null],[11,"toggle","","Toggles the specified flags in-place.",78,null],[11,"bitor","","Returns the union of the two sets of flags.",78,null],[11,"bitor_assign","","Adds the set of flags.",78,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",78,null],[11,"bitxor_assign","","Toggles the set of flags.",78,null],[11,"bitand","","Returns the intersection between the two sets of flags.",78,null],[11,"bitand_assign","","Disables all flags disabled in the set.",78,null],[11,"sub","","Returns the set difference of the two sets of flags.",78,null],[11,"sub_assign","","Disables all flags enabled in the set.",78,null],[11,"not","","Returns the complement of this set of flags.",78,null],[11,"extend","","",78,null],[11,"from_iter","","",78,{"inputs":[{"name":"t"}],"output":{"name":"cxcodecomplete_flags"}}],[11,"hash","","",79,null],[11,"cmp","","",79,null],[11,"partial_cmp","","",79,null],[11,"lt","","",79,null],[11,"le","","",79,null],[11,"gt","","",79,null],[11,"ge","","",79,null],[11,"clone","","",79,null],[11,"eq","","",79,null],[11,"ne","","",79,null],[11,"fmt","","",79,null],[11,"empty","","Returns an empty set of flags.",79,{"inputs":[],"output":{"name":"cxcompletioncontext"}}],[11,"all","","Returns the set containing all flags.",79,{"inputs":[],"output":{"name":"cxcompletioncontext"}}],[11,"bits","","Returns the raw value of the flags currently stored.",79,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",79,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",79,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxcompletioncontext"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",79,null],[11,"is_all","","Returns `true` if all flags are currently set.",79,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",79,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",79,null],[11,"insert","","Inserts the specified flags in-place.",79,null],[11,"remove","","Removes the specified flags in-place.",79,null],[11,"toggle","","Toggles the specified flags in-place.",79,null],[11,"bitor","","Returns the union of the two sets of flags.",79,null],[11,"bitor_assign","","Adds the set of flags.",79,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",79,null],[11,"bitxor_assign","","Toggles the set of flags.",79,null],[11,"bitand","","Returns the intersection between the two sets of flags.",79,null],[11,"bitand_assign","","Disables all flags disabled in the set.",79,null],[11,"sub","","Returns the set difference of the two sets of flags.",79,null],[11,"sub_assign","","Disables all flags enabled in the set.",79,null],[11,"not","","Returns the complement of this set of flags.",79,null],[11,"extend","","",79,null],[11,"from_iter","","",79,{"inputs":[{"name":"t"}],"output":{"name":"cxcompletioncontext"}}],[11,"hash","","",80,null],[11,"cmp","","",80,null],[11,"partial_cmp","","",80,null],[11,"lt","","",80,null],[11,"le","","",80,null],[11,"gt","","",80,null],[11,"ge","","",80,null],[11,"clone","","",80,null],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"fmt","","",80,null],[11,"empty","","Returns an empty set of flags.",80,{"inputs":[],"output":{"name":"cxdiagnosticdisplayoptions"}}],[11,"all","","Returns the set containing all flags.",80,{"inputs":[],"output":{"name":"cxdiagnosticdisplayoptions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",80,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",80,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",80,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxdiagnosticdisplayoptions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",80,null],[11,"is_all","","Returns `true` if all flags are currently set.",80,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",80,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",80,null],[11,"insert","","Inserts the specified flags in-place.",80,null],[11,"remove","","Removes the specified flags in-place.",80,null],[11,"toggle","","Toggles the specified flags in-place.",80,null],[11,"bitor","","Returns the union of the two sets of flags.",80,null],[11,"bitor_assign","","Adds the set of flags.",80,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",80,null],[11,"bitxor_assign","","Toggles the set of flags.",80,null],[11,"bitand","","Returns the intersection between the two sets of flags.",80,null],[11,"bitand_assign","","Disables all flags disabled in the set.",80,null],[11,"sub","","Returns the set difference of the two sets of flags.",80,null],[11,"sub_assign","","Disables all flags enabled in the set.",80,null],[11,"not","","Returns the complement of this set of flags.",80,null],[11,"extend","","",80,null],[11,"from_iter","","",80,{"inputs":[{"name":"t"}],"output":{"name":"cxdiagnosticdisplayoptions"}}],[11,"hash","","",81,null],[11,"cmp","","",81,null],[11,"partial_cmp","","",81,null],[11,"lt","","",81,null],[11,"le","","",81,null],[11,"gt","","",81,null],[11,"ge","","",81,null],[11,"clone","","",81,null],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"fmt","","",81,null],[11,"empty","","Returns an empty set of flags.",81,{"inputs":[],"output":{"name":"cxglobaloptflags"}}],[11,"all","","Returns the set containing all flags.",81,{"inputs":[],"output":{"name":"cxglobaloptflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",81,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",81,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",81,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxglobaloptflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",81,null],[11,"is_all","","Returns `true` if all flags are currently set.",81,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",81,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",81,null],[11,"insert","","Inserts the specified flags in-place.",81,null],[11,"remove","","Removes the specified flags in-place.",81,null],[11,"toggle","","Toggles the specified flags in-place.",81,null],[11,"bitor","","Returns the union of the two sets of flags.",81,null],[11,"bitor_assign","","Adds the set of flags.",81,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",81,null],[11,"bitxor_assign","","Toggles the set of flags.",81,null],[11,"bitand","","Returns the intersection between the two sets of flags.",81,null],[11,"bitand_assign","","Disables all flags disabled in the set.",81,null],[11,"sub","","Returns the set difference of the two sets of flags.",81,null],[11,"sub_assign","","Disables all flags enabled in the set.",81,null],[11,"not","","Returns the complement of this set of flags.",81,null],[11,"extend","","",81,null],[11,"from_iter","","",81,{"inputs":[{"name":"t"}],"output":{"name":"cxglobaloptflags"}}],[11,"hash","","",82,null],[11,"cmp","","",82,null],[11,"partial_cmp","","",82,null],[11,"lt","","",82,null],[11,"le","","",82,null],[11,"gt","","",82,null],[11,"ge","","",82,null],[11,"clone","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"fmt","","",82,null],[11,"empty","","Returns an empty set of flags.",82,{"inputs":[],"output":{"name":"cxidxdeclinfoflags"}}],[11,"all","","Returns the set containing all flags.",82,{"inputs":[],"output":{"name":"cxidxdeclinfoflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",82,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",82,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",82,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxidxdeclinfoflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",82,null],[11,"is_all","","Returns `true` if all flags are currently set.",82,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",82,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",82,null],[11,"insert","","Inserts the specified flags in-place.",82,null],[11,"remove","","Removes the specified flags in-place.",82,null],[11,"toggle","","Toggles the specified flags in-place.",82,null],[11,"bitor","","Returns the union of the two sets of flags.",82,null],[11,"bitor_assign","","Adds the set of flags.",82,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",82,null],[11,"bitxor_assign","","Toggles the set of flags.",82,null],[11,"bitand","","Returns the intersection between the two sets of flags.",82,null],[11,"bitand_assign","","Disables all flags disabled in the set.",82,null],[11,"sub","","Returns the set difference of the two sets of flags.",82,null],[11,"sub_assign","","Disables all flags enabled in the set.",82,null],[11,"not","","Returns the complement of this set of flags.",82,null],[11,"extend","","",82,null],[11,"from_iter","","",82,{"inputs":[{"name":"t"}],"output":{"name":"cxidxdeclinfoflags"}}],[11,"hash","","",83,null],[11,"cmp","","",83,null],[11,"partial_cmp","","",83,null],[11,"lt","","",83,null],[11,"le","","",83,null],[11,"gt","","",83,null],[11,"ge","","",83,null],[11,"clone","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"fmt","","",83,null],[11,"empty","","Returns an empty set of flags.",83,{"inputs":[],"output":{"name":"cxindexoptflags"}}],[11,"all","","Returns the set containing all flags.",83,{"inputs":[],"output":{"name":"cxindexoptflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",83,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",83,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",83,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxindexoptflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",83,null],[11,"is_all","","Returns `true` if all flags are currently set.",83,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",83,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",83,null],[11,"insert","","Inserts the specified flags in-place.",83,null],[11,"remove","","Removes the specified flags in-place.",83,null],[11,"toggle","","Toggles the specified flags in-place.",83,null],[11,"bitor","","Returns the union of the two sets of flags.",83,null],[11,"bitor_assign","","Adds the set of flags.",83,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",83,null],[11,"bitxor_assign","","Toggles the set of flags.",83,null],[11,"bitand","","Returns the intersection between the two sets of flags.",83,null],[11,"bitand_assign","","Disables all flags disabled in the set.",83,null],[11,"sub","","Returns the set difference of the two sets of flags.",83,null],[11,"sub_assign","","Disables all flags enabled in the set.",83,null],[11,"not","","Returns the complement of this set of flags.",83,null],[11,"extend","","",83,null],[11,"from_iter","","",83,{"inputs":[{"name":"t"}],"output":{"name":"cxindexoptflags"}}],[11,"hash","","",84,null],[11,"cmp","","",84,null],[11,"partial_cmp","","",84,null],[11,"lt","","",84,null],[11,"le","","",84,null],[11,"gt","","",84,null],[11,"ge","","",84,null],[11,"clone","","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"fmt","","",84,null],[11,"empty","","Returns an empty set of flags.",84,{"inputs":[],"output":{"name":"cxnamerefflags"}}],[11,"all","","Returns the set containing all flags.",84,{"inputs":[],"output":{"name":"cxnamerefflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",84,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",84,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",84,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxnamerefflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",84,null],[11,"is_all","","Returns `true` if all flags are currently set.",84,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",84,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",84,null],[11,"insert","","Inserts the specified flags in-place.",84,null],[11,"remove","","Removes the specified flags in-place.",84,null],[11,"toggle","","Toggles the specified flags in-place.",84,null],[11,"bitor","","Returns the union of the two sets of flags.",84,null],[11,"bitor_assign","","Adds the set of flags.",84,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",84,null],[11,"bitxor_assign","","Toggles the set of flags.",84,null],[11,"bitand","","Returns the intersection between the two sets of flags.",84,null],[11,"bitand_assign","","Disables all flags disabled in the set.",84,null],[11,"sub","","Returns the set difference of the two sets of flags.",84,null],[11,"sub_assign","","Disables all flags enabled in the set.",84,null],[11,"not","","Returns the complement of this set of flags.",84,null],[11,"extend","","",84,null],[11,"from_iter","","",84,{"inputs":[{"name":"t"}],"output":{"name":"cxnamerefflags"}}],[11,"hash","","",85,null],[11,"cmp","","",85,null],[11,"partial_cmp","","",85,null],[11,"lt","","",85,null],[11,"le","","",85,null],[11,"gt","","",85,null],[11,"ge","","",85,null],[11,"clone","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"fmt","","",85,null],[11,"empty","","Returns an empty set of flags.",85,{"inputs":[],"output":{"name":"cxobjcdeclqualifierkind"}}],[11,"all","","Returns the set containing all flags.",85,{"inputs":[],"output":{"name":"cxobjcdeclqualifierkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",85,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",85,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",85,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxobjcdeclqualifierkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",85,null],[11,"is_all","","Returns `true` if all flags are currently set.",85,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",85,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",85,null],[11,"insert","","Inserts the specified flags in-place.",85,null],[11,"remove","","Removes the specified flags in-place.",85,null],[11,"toggle","","Toggles the specified flags in-place.",85,null],[11,"bitor","","Returns the union of the two sets of flags.",85,null],[11,"bitor_assign","","Adds the set of flags.",85,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",85,null],[11,"bitxor_assign","","Toggles the set of flags.",85,null],[11,"bitand","","Returns the intersection between the two sets of flags.",85,null],[11,"bitand_assign","","Disables all flags disabled in the set.",85,null],[11,"sub","","Returns the set difference of the two sets of flags.",85,null],[11,"sub_assign","","Disables all flags enabled in the set.",85,null],[11,"not","","Returns the complement of this set of flags.",85,null],[11,"extend","","",85,null],[11,"from_iter","","",85,{"inputs":[{"name":"t"}],"output":{"name":"cxobjcdeclqualifierkind"}}],[11,"hash","","",86,null],[11,"cmp","","",86,null],[11,"partial_cmp","","",86,null],[11,"lt","","",86,null],[11,"le","","",86,null],[11,"gt","","",86,null],[11,"ge","","",86,null],[11,"clone","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"fmt","","",86,null],[11,"empty","","Returns an empty set of flags.",86,{"inputs":[],"output":{"name":"cxobjcpropertyattrkind"}}],[11,"all","","Returns the set containing all flags.",86,{"inputs":[],"output":{"name":"cxobjcpropertyattrkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",86,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",86,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",86,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxobjcpropertyattrkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",86,null],[11,"is_all","","Returns `true` if all flags are currently set.",86,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",86,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",86,null],[11,"insert","","Inserts the specified flags in-place.",86,null],[11,"remove","","Removes the specified flags in-place.",86,null],[11,"toggle","","Toggles the specified flags in-place.",86,null],[11,"bitor","","Returns the union of the two sets of flags.",86,null],[11,"bitor_assign","","Adds the set of flags.",86,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",86,null],[11,"bitxor_assign","","Toggles the set of flags.",86,null],[11,"bitand","","Returns the intersection between the two sets of flags.",86,null],[11,"bitand_assign","","Disables all flags disabled in the set.",86,null],[11,"sub","","Returns the set difference of the two sets of flags.",86,null],[11,"sub_assign","","Disables all flags enabled in the set.",86,null],[11,"not","","Returns the complement of this set of flags.",86,null],[11,"extend","","",86,null],[11,"from_iter","","",86,{"inputs":[{"name":"t"}],"output":{"name":"cxobjcpropertyattrkind"}}],[11,"hash","","",87,null],[11,"cmp","","",87,null],[11,"partial_cmp","","",87,null],[11,"lt","","",87,null],[11,"le","","",87,null],[11,"gt","","",87,null],[11,"ge","","",87,null],[11,"clone","","",87,null],[11,"eq","","",87,null],[11,"ne","","",87,null],[11,"fmt","","",87,null],[11,"empty","","Returns an empty set of flags.",87,{"inputs":[],"output":{"name":"cxreparse_flags"}}],[11,"all","","Returns the set containing all flags.",87,{"inputs":[],"output":{"name":"cxreparse_flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",87,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",87,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",87,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxreparse_flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",87,null],[11,"is_all","","Returns `true` if all flags are currently set.",87,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",87,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",87,null],[11,"insert","","Inserts the specified flags in-place.",87,null],[11,"remove","","Removes the specified flags in-place.",87,null],[11,"toggle","","Toggles the specified flags in-place.",87,null],[11,"bitor","","Returns the union of the two sets of flags.",87,null],[11,"bitor_assign","","Adds the set of flags.",87,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",87,null],[11,"bitxor_assign","","Toggles the set of flags.",87,null],[11,"bitand","","Returns the intersection between the two sets of flags.",87,null],[11,"bitand_assign","","Disables all flags disabled in the set.",87,null],[11,"sub","","Returns the set difference of the two sets of flags.",87,null],[11,"sub_assign","","Disables all flags enabled in the set.",87,null],[11,"not","","Returns the complement of this set of flags.",87,null],[11,"extend","","",87,null],[11,"from_iter","","",87,{"inputs":[{"name":"t"}],"output":{"name":"cxreparse_flags"}}],[11,"hash","","",88,null],[11,"cmp","","",88,null],[11,"partial_cmp","","",88,null],[11,"lt","","",88,null],[11,"le","","",88,null],[11,"gt","","",88,null],[11,"ge","","",88,null],[11,"clone","","",88,null],[11,"eq","","",88,null],[11,"ne","","",88,null],[11,"fmt","","",88,null],[11,"empty","","Returns an empty set of flags.",88,{"inputs":[],"output":{"name":"cxsavetranslationunit_flags"}}],[11,"all","","Returns the set containing all flags.",88,{"inputs":[],"output":{"name":"cxsavetranslationunit_flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",88,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",88,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",88,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxsavetranslationunit_flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",88,null],[11,"is_all","","Returns `true` if all flags are currently set.",88,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",88,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",88,null],[11,"insert","","Inserts the specified flags in-place.",88,null],[11,"remove","","Removes the specified flags in-place.",88,null],[11,"toggle","","Toggles the specified flags in-place.",88,null],[11,"bitor","","Returns the union of the two sets of flags.",88,null],[11,"bitor_assign","","Adds the set of flags.",88,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",88,null],[11,"bitxor_assign","","Toggles the set of flags.",88,null],[11,"bitand","","Returns the intersection between the two sets of flags.",88,null],[11,"bitand_assign","","Disables all flags disabled in the set.",88,null],[11,"sub","","Returns the set difference of the two sets of flags.",88,null],[11,"sub_assign","","Disables all flags enabled in the set.",88,null],[11,"not","","Returns the complement of this set of flags.",88,null],[11,"extend","","",88,null],[11,"from_iter","","",88,{"inputs":[{"name":"t"}],"output":{"name":"cxsavetranslationunit_flags"}}],[11,"hash","","",89,null],[11,"cmp","","",89,null],[11,"partial_cmp","","",89,null],[11,"lt","","",89,null],[11,"le","","",89,null],[11,"gt","","",89,null],[11,"ge","","",89,null],[11,"clone","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"fmt","","",89,null],[11,"empty","","Returns an empty set of flags.",89,{"inputs":[],"output":{"name":"cxtranslationunit_flags"}}],[11,"all","","Returns the set containing all flags.",89,{"inputs":[],"output":{"name":"cxtranslationunit_flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",89,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",89,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",89,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxtranslationunit_flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",89,null],[11,"is_all","","Returns `true` if all flags are currently set.",89,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",89,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",89,null],[11,"insert","","Inserts the specified flags in-place.",89,null],[11,"remove","","Removes the specified flags in-place.",89,null],[11,"toggle","","Toggles the specified flags in-place.",89,null],[11,"bitor","","Returns the union of the two sets of flags.",89,null],[11,"bitor_assign","","Adds the set of flags.",89,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",89,null],[11,"bitxor_assign","","Toggles the set of flags.",89,null],[11,"bitand","","Returns the intersection between the two sets of flags.",89,null],[11,"bitand_assign","","Disables all flags disabled in the set.",89,null],[11,"sub","","Returns the set difference of the two sets of flags.",89,null],[11,"sub_assign","","Disables all flags enabled in the set.",89,null],[11,"not","","Returns the complement of this set of flags.",89,null],[11,"extend","","",89,null],[11,"from_iter","","",89,{"inputs":[{"name":"t"}],"output":{"name":"cxtranslationunit_flags"}}],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"cxcompilationdatabase"}}],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"cxcompilecommand"}}],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"cxcompilecommands"}}],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cxcompletionstring"}}],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"cxcursorset"}}],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"cxdiagnostic"}}],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"cxdiagnosticset"}}],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"cxfile"}}],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"cxidxclientastfile"}}],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"cxidxclientcontainer"}}],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"default","","",10,{"inputs":[],"output":{"name":"cxidxcliententity"}}],[11,"fmt","","",11,null],[11,"clone","","",11,null],[11,"default","","",11,{"inputs":[],"output":{"name":"cxidxclientfile"}}],[11,"fmt","","",12,null],[11,"clone","","",12,null],[11,"default","","",12,{"inputs":[],"output":{"name":"cxindex"}}],[11,"fmt","","",13,null],[11,"clone","","",13,null],[11,"default","","",13,{"inputs":[],"output":{"name":"cxindexaction"}}],[11,"fmt","","",14,null],[11,"clone","","",14,null],[11,"default","","",14,{"inputs":[],"output":{"name":"cxmodule"}}],[11,"fmt","","",15,null],[11,"clone","","",15,null],[11,"default","","",15,{"inputs":[],"output":{"name":"cxremapping"}}],[11,"fmt","","",16,null],[11,"clone","","",16,null],[11,"default","","",16,{"inputs":[],"output":{"name":"cxtranslationunit"}}],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"default","","",17,{"inputs":[],"output":{"name":"cxcodecompleteresults"}}],[11,"fmt","","",18,null],[11,"clone","","",18,null],[11,"default","","",18,{"inputs":[],"output":{"name":"cxcompletionresult"}}],[11,"fmt","","",19,null],[11,"clone","","",19,null],[11,"default","","",19,{"inputs":[],"output":{"name":"cxcursor"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"default","","",20,{"inputs":[],"output":{"name":"cxcursorandrangevisitor"}}],[11,"fmt","","",21,null],[11,"clone","","",21,null],[11,"default","","",21,{"inputs":[],"output":{"name":"cxfileuniqueid"}}],[11,"fmt","","",22,null],[11,"clone","","",22,null],[11,"default","","",22,{"inputs":[],"output":{"name":"cxidxattrinfo"}}],[11,"fmt","","",23,null],[11,"clone","","",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"cxidxbaseclassinfo"}}],[11,"fmt","","",24,null],[11,"clone","","",24,null],[11,"default","","",24,{"inputs":[],"output":{"name":"cxidxcxxclassdeclinfo"}}],[11,"fmt","","",25,null],[11,"clone","","",25,null],[11,"default","","",25,{"inputs":[],"output":{"name":"cxidxcontainerinfo"}}],[11,"fmt","","",26,null],[11,"clone","","",26,null],[11,"default","","",26,{"inputs":[],"output":{"name":"cxidxdeclinfo"}}],[11,"fmt","","",27,null],[11,"clone","","",27,null],[11,"default","","",27,{"inputs":[],"output":{"name":"cxidxentityinfo"}}],[11,"fmt","","",28,null],[11,"clone","","",28,null],[11,"default","","",28,{"inputs":[],"output":{"name":"cxidxentityrefinfo"}}],[11,"fmt","","",29,null],[11,"clone","","",29,null],[11,"default","","",29,{"inputs":[],"output":{"name":"cxidxiboutletcollectionattrinfo"}}],[11,"fmt","","",30,null],[11,"clone","","",30,null],[11,"default","","",30,{"inputs":[],"output":{"name":"cxidximportedastfileinfo"}}],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cxidxincludedfileinfo"}}],[11,"fmt","","",32,null],[11,"clone","","",32,null],[11,"default","","",32,{"inputs":[],"output":{"name":"cxidxloc"}}],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"cxidxobjccategorydeclinfo"}}],[11,"fmt","","",34,null],[11,"clone","","",34,null],[11,"default","","",34,{"inputs":[],"output":{"name":"cxidxobjccontainerdeclinfo"}}],[11,"fmt","","",35,null],[11,"clone","","",35,null],[11,"default","","",35,{"inputs":[],"output":{"name":"cxidxobjcinterfacedeclinfo"}}],[11,"fmt","","",36,null],[11,"clone","","",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"cxidxobjcpropertydeclinfo"}}],[11,"fmt","","",37,null],[11,"clone","","",37,null],[11,"default","","",37,{"inputs":[],"output":{"name":"cxidxobjcprotocolrefinfo"}}],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"default","","",38,{"inputs":[],"output":{"name":"cxidxobjcprotocolreflistinfo"}}],[11,"fmt","","",39,null],[11,"clone","","",39,null],[11,"default","","",39,{"inputs":[],"output":{"name":"cxplatformavailability"}}],[11,"fmt","","",40,null],[11,"clone","","",40,null],[11,"default","","",40,{"inputs":[],"output":{"name":"cxsourcelocation"}}],[11,"fmt","","",41,null],[11,"clone","","",41,null],[11,"default","","",41,{"inputs":[],"output":{"name":"cxsourcerange"}}],[11,"fmt","","",42,null],[11,"clone","","",42,null],[11,"default","","",42,{"inputs":[],"output":{"name":"cxsourcerangelist"}}],[11,"fmt","","",43,null],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"cxstring"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"default","","",44,{"inputs":[],"output":{"name":"cxturesourceusage"}}],[11,"fmt","","",45,null],[11,"clone","","",45,null],[11,"default","","",45,{"inputs":[],"output":{"name":"cxturesourceusageentry"}}],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"default","","",46,{"inputs":[],"output":{"name":"cxtoken"}}],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"default","","",47,{"inputs":[],"output":{"name":"cxtype"}}],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"default","","",48,{"inputs":[],"output":{"name":"cxunsavedfile"}}],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"default","","",49,{"inputs":[],"output":{"name":"cxversion"}}],[11,"fmt","","",50,null],[11,"clone","","",50,null],[11,"default","","",50,{"inputs":[],"output":{"name":"indexercallbacks"}}]],"paths":[[3,"CXCompilationDatabase"],[3,"CXCompileCommand"],[3,"CXCompileCommands"],[3,"CXCompletionString"],[3,"CXCursorSet"],[3,"CXDiagnostic"],[3,"CXDiagnosticSet"],[3,"CXFile"],[3,"CXIdxClientASTFile"],[3,"CXIdxClientContainer"],[3,"CXIdxClientEntity"],[3,"CXIdxClientFile"],[3,"CXIndex"],[3,"CXIndexAction"],[3,"CXModule"],[3,"CXRemapping"],[3,"CXTranslationUnit"],[3,"CXCodeCompleteResults"],[3,"CXCompletionResult"],[3,"CXCursor"],[3,"CXCursorAndRangeVisitor"],[3,"CXFileUniqueID"],[3,"CXIdxAttrInfo"],[3,"CXIdxBaseClassInfo"],[3,"CXIdxCXXClassDeclInfo"],[3,"CXIdxContainerInfo"],[3,"CXIdxDeclInfo"],[3,"CXIdxEntityInfo"],[3,"CXIdxEntityRefInfo"],[3,"CXIdxIBOutletCollectionAttrInfo"],[3,"CXIdxImportedASTFileInfo"],[3,"CXIdxIncludedFileInfo"],[3,"CXIdxLoc"],[3,"CXIdxObjCCategoryDeclInfo"],[3,"CXIdxObjCContainerDeclInfo"],[3,"CXIdxObjCInterfaceDeclInfo"],[3,"CXIdxObjCPropertyDeclInfo"],[3,"CXIdxObjCProtocolRefInfo"],[3,"CXIdxObjCProtocolRefListInfo"],[3,"CXPlatformAvailability"],[3,"CXSourceLocation"],[3,"CXSourceRange"],[3,"CXSourceRangeList"],[3,"CXString"],[3,"CXTUResourceUsage"],[3,"CXTUResourceUsageEntry"],[3,"CXToken"],[3,"CXType"],[3,"CXUnsavedFile"],[3,"CXVersion"],[3,"IndexerCallbacks"],[4,"CXAvailabilityKind"],[4,"CXCallingConv"],[4,"CXChildVisitResult"],[4,"CXCompilationDatabase_Error"],[4,"CXCompletionChunkKind"],[4,"CXCursorKind"],[4,"CXDiagnosticSeverity"],[4,"CXErrorCode"],[4,"CXIdxAttrKind"],[4,"CXIdxEntityCXXTemplateKind"],[4,"CXIdxEntityKind"],[4,"CXIdxEntityLanguage"],[4,"CXIdxEntityRefKind"],[4,"CXIdxObjCContainerKind"],[4,"CXLanguageKind"],[4,"CXLinkageKind"],[4,"CXLoadDiag_Error"],[4,"CXRefQualifierKind"],[4,"CXResult"],[4,"CXSaveError"],[4,"CXTUResourceUsageKind"],[4,"CXTokenKind"],[4,"CXTypeKind"],[4,"CXTypeLayoutError"],[4,"CXVisitorResult"],[4,"CX_CXXAccessSpecifier"],[3,"Clang"],[3,"CXCodeComplete_Flags"],[3,"CXCompletionContext"],[3,"CXDiagnosticDisplayOptions"],[3,"CXGlobalOptFlags"],[3,"CXIdxDeclInfoFlags"],[3,"CXIndexOptFlags"],[3,"CXNameRefFlags"],[3,"CXObjCDeclQualifierKind"],[3,"CXObjCPropertyAttrKind"],[3,"CXReparse_Flags"],[3,"CXSaveTranslationUnit_Flags"],[3,"CXTranslationUnit_Flags"]]};
searchIndex["aho_corasick"] = {"doc":"An implementation of the\n[Aho-Corasick string search algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm).","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",1,null],[11,"next","","",1,null],[11,"fmt","","",2,null],[11,"next","","",2,null],[11,"fmt","","",3,null],[11,"next","","",3,null],[11,"fmt","","",4,null],[11,"next","","",4,null],[11,"clone","","",5,null],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing\nAho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,null],[11,"get_match","","",5,null],[11,"has_match","","",5,null],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,null],[11,"fmt","","",5,null],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators.\nThe type parameter `P` is the type of the pattern that was used to\nconstruct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,null],[10,"has_match","","Return true if and only if the given state and current pattern index\nindicate a match.",6,null],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,null],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,null],[10,"set_goto","","Set the next state index for the character given.",7,null],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,null],[11,"clone","","",8,null],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,null],[11,"next_state","","",8,null],[11,"get_match","","",8,null],[11,"has_match","","",8,null],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,null],[11,"set_goto","","",9,null],[11,"heap_bytes","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,null],[11,"set_goto","","",10,null],[11,"heap_bytes","","",10,null],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface\nto the corresponding functions in `libc`.","items":[[5,"memchr","memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null]],"paths":[]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,null],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",0,null],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist. If `create` fails, that error is returned and no element is\nadded.",0,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",0,null],[11,"into_iter","","",0,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",0,null],[11,"fmt","","",0,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",3,null],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist. If `create` fails, that error is returned and no element is\nadded.",3,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",3,null],[11,"into_iter","","",3,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",3,null],[11,"fmt","","",3,null]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["aligned_alloc"] = {"doc":"","items":[[5,"aligned_alloc","aligned_alloc","Allocates `size` Bytes aligned to `align` Bytes. Returns a null pointer on allocation failure.",null,null],[5,"aligned_free","","Deallocates aligned memory that was allocated with `aligned_alloc`. Unsafe because calling this\nwith a pointer that was not allocated with `aligned_alloc` (or already released) causes\nundefined behavior.",null,null]],"paths":[]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["num_cpus"] = {"doc":"Replaces the deprecated functionality of std::os::num_cpus.","items":[[5,"get","num_cpus","Returns the number of CPUs of the current machine.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current machine.\nIf not possible on the particular architecture returns same as get() which\nis the logical CPUs.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",15,null],[12,"sa_data","","",15,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",16,null],[12,"sin_port","","",16,null],[12,"sin_addr","","",16,null],[12,"sin_zero","","",16,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",17,null],[12,"sin6_port","","",17,null],[12,"sin6_flowinfo","","",17,null],[12,"sin6_addr","","",17,null],[12,"sin6_scope_id","","",17,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",18,null],[12,"sun_path","","",18,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",19,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",20,null],[12,"ai_family","","",20,null],[12,"ai_socktype","","",20,null],[12,"ai_protocol","","",20,null],[12,"ai_addrlen","","",20,null],[12,"ai_addr","","",20,null],[12,"ai_canonname","","",20,null],[12,"ai_next","","",20,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",21,null],[12,"nl_pid","","",21,null],[12,"nl_groups","","",21,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",22,null],[12,"sll_protocol","","",22,null],[12,"sll_ifindex","","",22,null],[12,"sll_hatype","","",22,null],[12,"sll_pkttype","","",22,null],[12,"sll_halen","","",22,null],[12,"sll_addr","","",22,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",23,null],[12,"tm_min","","",23,null],[12,"tm_hour","","",23,null],[12,"tm_mday","","",23,null],[12,"tm_mon","","",23,null],[12,"tm_year","","",23,null],[12,"tm_wday","","",23,null],[12,"tm_yday","","",23,null],[12,"tm_isdst","","",23,null],[12,"tm_gmtoff","","",23,null],[12,"tm_zone","","",23,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",24,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",25,null],[12,"dli_fbase","","",25,null],[12,"dli_sname","","",25,null],[12,"dli_saddr","","",25,null],[3,"epoll_event","","",null,null],[12,"events","","",26,null],[12,"u64","","",26,null],[3,"utsname","","",null,null],[12,"sysname","","",27,null],[12,"nodename","","",27,null],[12,"release","","",27,null],[12,"version","","",27,null],[12,"machine","","",27,null],[12,"domainname","","",27,null],[3,"lconv","","",null,null],[12,"decimal_point","","",28,null],[12,"thousands_sep","","",28,null],[12,"grouping","","",28,null],[12,"int_curr_symbol","","",28,null],[12,"currency_symbol","","",28,null],[12,"mon_decimal_point","","",28,null],[12,"mon_thousands_sep","","",28,null],[12,"mon_grouping","","",28,null],[12,"positive_sign","","",28,null],[12,"negative_sign","","",28,null],[12,"int_frac_digits","","",28,null],[12,"frac_digits","","",28,null],[12,"p_cs_precedes","","",28,null],[12,"p_sep_by_space","","",28,null],[12,"n_cs_precedes","","",28,null],[12,"n_sep_by_space","","",28,null],[12,"p_sign_posn","","",28,null],[12,"n_sign_posn","","",28,null],[12,"int_p_cs_precedes","","",28,null],[12,"int_p_sep_by_space","","",28,null],[12,"int_n_cs_precedes","","",28,null],[12,"int_n_sep_by_space","","",28,null],[12,"int_p_sign_posn","","",28,null],[12,"int_n_sign_posn","","",28,null],[3,"dirent","","",null,null],[12,"d_ino","","",29,null],[12,"d_off","","",29,null],[12,"d_reclen","","",29,null],[12,"d_type","","",29,null],[12,"d_name","","",29,null],[3,"dirent64","","",null,null],[12,"d_ino","","",30,null],[12,"d_off","","",30,null],[12,"d_reclen","","",30,null],[12,"d_type","","",30,null],[12,"d_name","","",30,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",31,null],[12,"rlim_max","","",31,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",32,null],[12,"gl_pathv","","",32,null],[12,"gl_offs","","",32,null],[12,"gl_flags","","",32,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",33,null],[12,"ifa_name","","",33,null],[12,"ifa_flags","","",33,null],[12,"ifa_addr","","",33,null],[12,"ifa_netmask","","",33,null],[12,"ifa_ifu","","",33,null],[12,"ifa_data","","",33,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",34,null],[12,"pw_passwd","","",34,null],[12,"pw_uid","","",34,null],[12,"pw_gid","","",34,null],[12,"pw_gecos","","",34,null],[12,"pw_dir","","",34,null],[12,"pw_shell","","",34,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",35,null],[12,"f_frsize","","",35,null],[12,"f_blocks","","",35,null],[12,"f_bfree","","",35,null],[12,"f_bavail","","",35,null],[12,"f_files","","",35,null],[12,"f_ffree","","",35,null],[12,"f_favail","","",35,null],[12,"f_fsid","","",35,null],[12,"f_flag","","",35,null],[12,"f_namemax","","",35,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",36,null],[12,"dqb_bsoftlimit","","",36,null],[12,"dqb_curspace","","",36,null],[12,"dqb_ihardlimit","","",36,null],[12,"dqb_isoftlimit","","",36,null],[12,"dqb_curinodes","","",36,null],[12,"dqb_btime","","",36,null],[12,"dqb_itime","","",36,null],[12,"dqb_valid","","",36,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",37,null],[12,"ssi_errno","","",37,null],[12,"ssi_code","","",37,null],[12,"ssi_pid","","",37,null],[12,"ssi_uid","","",37,null],[12,"ssi_fd","","",37,null],[12,"ssi_tid","","",37,null],[12,"ssi_band","","",37,null],[12,"ssi_overrun","","",37,null],[12,"ssi_trapno","","",37,null],[12,"ssi_status","","",37,null],[12,"ssi_int","","",37,null],[12,"ssi_ptr","","",37,null],[12,"ssi_utime","","",37,null],[12,"ssi_stime","","",37,null],[12,"ssi_addr","","",37,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",38,null],[12,"mq_maxmsg","","",38,null],[12,"mq_msgsize","","",38,null],[12,"mq_curmsgs","","",38,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",39,null],[12,"if_name","","",39,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",40,null],[12,"e_exit","","",40,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",41,null],[12,"tv_usec","","",41,null],[3,"utmpx","","",null,null],[12,"ut_type","","",42,null],[12,"ut_pid","","",42,null],[12,"ut_line","","",42,null],[12,"ut_id","","",42,null],[12,"ut_user","","",42,null],[12,"ut_host","","",42,null],[12,"ut_exit","","",42,null],[12,"ut_session","","",42,null],[12,"ut_tv","","",42,null],[12,"ut_addr_v6","","",42,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",43,null],[12,"sa_mask","","",43,null],[12,"sa_flags","","",43,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",44,null],[12,"ss_flags","","",44,null],[12,"ss_size","","",44,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",45,null],[12,"si_errno","","",45,null],[12,"si_code","","",45,null],[12,"_pad","","",45,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",46,null],[12,"gl_pathv","","",46,null],[12,"gl_offs","","",46,null],[12,"gl_flags","","",46,null],[3,"ucred","","",null,null],[12,"pid","","",47,null],[12,"uid","","",47,null],[12,"gid","","",47,null],[3,"statfs","","",null,null],[12,"f_type","","",48,null],[12,"f_bsize","","",48,null],[12,"f_blocks","","",48,null],[12,"f_bfree","","",48,null],[12,"f_bavail","","",48,null],[12,"f_files","","",48,null],[12,"f_ffree","","",48,null],[12,"f_fsid","","",48,null],[12,"f_namelen","","",48,null],[12,"f_frsize","","",48,null],[3,"msghdr","","",null,null],[12,"msg_name","","",49,null],[12,"msg_namelen","","",49,null],[12,"msg_iov","","",49,null],[12,"msg_iovlen","","",49,null],[12,"msg_control","","",49,null],[12,"msg_controllen","","",49,null],[12,"msg_flags","","",49,null],[3,"termios","","",null,null],[12,"c_iflag","","",50,null],[12,"c_oflag","","",50,null],[12,"c_cflag","","",50,null],[12,"c_lflag","","",50,null],[12,"c_line","","",50,null],[12,"c_cc","","",50,null],[12,"c_ispeed","","",50,null],[12,"c_ospeed","","",50,null],[3,"flock","","",null,null],[12,"l_type","","",51,null],[12,"l_whence","","",51,null],[12,"l_start","","",51,null],[12,"l_len","","",51,null],[12,"l_pid","","",51,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",52,null],[12,"loads","","",52,null],[12,"totalram","","",52,null],[12,"freeram","","",52,null],[12,"sharedram","","",52,null],[12,"bufferram","","",52,null],[12,"totalswap","","",52,null],[12,"freeswap","","",52,null],[12,"procs","","",52,null],[12,"pad","","",52,null],[12,"totalhigh","","",52,null],[12,"freehigh","","",52,null],[12,"mem_unit","","",52,null],[12,"_f","","",52,null],[3,"stat","","",null,null],[12,"st_dev","","",53,null],[12,"st_ino","","",53,null],[12,"st_nlink","","",53,null],[12,"st_mode","","",53,null],[12,"st_uid","","",53,null],[12,"st_gid","","",53,null],[12,"st_rdev","","",53,null],[12,"st_size","","",53,null],[12,"st_blksize","","",53,null],[12,"st_blocks","","",53,null],[12,"st_atime","","",53,null],[12,"st_atime_nsec","","",53,null],[12,"st_mtime","","",53,null],[12,"st_mtime_nsec","","",53,null],[12,"st_ctime","","",53,null],[12,"st_ctime_nsec","","",53,null],[3,"stat64","","",null,null],[12,"st_dev","","",54,null],[12,"st_ino","","",54,null],[12,"st_nlink","","",54,null],[12,"st_mode","","",54,null],[12,"st_uid","","",54,null],[12,"st_gid","","",54,null],[12,"st_rdev","","",54,null],[12,"st_size","","",54,null],[12,"st_blksize","","",54,null],[12,"st_blocks","","",54,null],[12,"st_atime","","",54,null],[12,"st_atime_nsec","","",54,null],[12,"st_mtime","","",54,null],[12,"st_mtime_nsec","","",54,null],[12,"st_ctime","","",54,null],[12,"st_ctime_nsec","","",54,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",55,null],[12,"exponent","","",55,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",56,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",57,null],[12,"swd","","",57,null],[12,"ftw","","",57,null],[12,"fop","","",57,null],[12,"rip","","",57,null],[12,"rdp","","",57,null],[12,"mxcsr","","",57,null],[12,"mxcr_mask","","",57,null],[12,"_st","","",57,null],[12,"_xmm","","",57,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",58,null],[12,"fpregs","","",58,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",59,null],[12,"uc_link","","",59,null],[12,"uc_stack","","",59,null],[12,"uc_mcontext","","",59,null],[12,"uc_sigmask","","",59,null],[3,"ipc_perm","","",null,null],[12,"__key","","",60,null],[12,"uid","","",60,null],[12,"gid","","",60,null],[12,"cuid","","",60,null],[12,"cgid","","",60,null],[12,"mode","","",60,null],[12,"__seq","","",60,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",61,null],[12,"shm_segsz","","",61,null],[12,"shm_atime","","",61,null],[12,"shm_dtime","","",61,null],[12,"shm_ctime","","",61,null],[12,"shm_cpid","","",61,null],[12,"shm_lpid","","",61,null],[12,"shm_nattch","","",61,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"unshare","","",null,null],[5,"setns","","",null,null],[5,"sem_timedwait","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"sethostname","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","","",62,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","","",57,null],[11,"clone","","",58,null],[11,"clone","","",59,null],[11,"clone","","",60,null],[11,"clone","","",61,null],[11,"clone","","",63,null],[11,"clone","","",52,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",51,null],[11,"clone","","",64,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",65,null],[11,"clone","","",66,null],[11,"clone","","",67,null],[11,"clone","","",68,null],[11,"clone","","",69,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",70,null],[11,"clone","","",38,null],[11,"clone","","",71,null],[11,"clone","","",39,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",72,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P&lt;a&gt;.)(?P&lt;a&gt;.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P&lt;&gt;a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P&lt;0a&gt;b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P&lt;a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes.\nThis never returned if the parser is permitted to allow expressions\nthat match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty.\ne.g., `[^\\d\\D]`.",4,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"cmp","","",6,null],[11,"clone","","",6,null],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,null],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,null],[11,"limit_class","","Get the character class size limit for this set.",5,null],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,null],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"all_complete","","Returns true if all members in this set are complete.",5,null],[11,"any_complete","","Returns true if any member in this set is complete.",5,null],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,null],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,null],[11,"to_empty","","Returns a new empty set of literals using this set&#39;s limits.",5,null],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,null],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,null],[11,"union","","Unions this set with another set.",5,null],[11,"cross_product","","Extends this set with another set.",5,null],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,null],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,null],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,null],[11,"cut","","Cuts every member of this set. When a member is cut, it can never\nbe extended.",5,null],[11,"reverse","","Reverses all members in place.",5,null],[11,"clear","","Clears this set of all members.",5,null],[11,"fmt","","",5,null],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was &quot;cut.&quot;",6,null],[11,"cut","","Cuts this literal.",6,null],[11,"eq","","",6,null],[11,"partial_cmp","","",6,null],[11,"fmt","","",6,null],[11,"as_ref","","",6,null],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"new","","Create a new builder for configuring expression parsing.",9,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",9,null],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",9,null],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",9,null],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",9,null],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",9,null],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",9,null],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",9,null],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",9,null],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",9,null],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,null],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,null],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from\nthe beginning of text.",2,null],[11,"has_anchored_start","","Returns true if and only if the expression has at least one matchable\nsub-expression that must match the beginning of text.",2,null],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the\nend of the text.",2,null],[11,"has_anchored_end","","Returns true if and only if the expression has at least one matchable\nsub-expression that must match the beginning of text.",2,null],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions\nthat can match arbitrary bytes.",2,null],[11,"deref","","",7,null],[11,"into_iter","","",7,null],[11,"new","","Create a new class from an existing set of ranges.",7,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",7,null],[11,"remove","","Removes the given character from the class if it exists.",7,null],[11,"negate","","Negates the character class.",7,null],[11,"case_fold","","Apply case folding to this character class.",7,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"new","","Create a new class from an existing set of ranges.",8,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",8,null],[11,"remove","","Removes the given byte from the class if it exists.",8,null],[11,"negate","","Negates the byte class.",8,null],[11,"case_fold","","Apply case folding to this byte class.",8,null],[11,"deref","","",8,null],[11,"into_iter","","",8,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"fmt","","",7,null],[11,"fmt","","",0,null],[11,"fmt","","",8,null],[11,"fmt","","",1,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"position","","Returns an approximate *character* offset at which the error occurred.",10,null],[11,"kind","","Returns the type of the regex parse error.",10,null],[11,"description","","",10,null],[11,"fmt","","",10,null],[11,"fmt","","",4,null]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["cexpr"] = {"doc":"","items":[[4,"Error","cexpr","Parsing errors specific to C parsing",null,null],[13,"ExactToken","","Expected the specified token",0,null],[13,"TypedToken","","Expected a token of the specified kind",0,null],[13,"UnknownIdentifier","","An unknown identifier was encountered",0,null],[13,"InvalidLiteral","","An invalid literal was encountered.",0,null],[13,"Partial","","A full parse was requested, but data was left over after parsing finished.",0,null],[5,"assert_full_parse","","If the input result indicates a succesful parse, but there is data left,\nreturn an `Error::Partial` instead.",null,{"inputs":[{"name":"iresult"}],"output":{"name":"iresult"}}],[0,"nom","","nom&#39;s result types, re-exported.",null,null],[4,"IResult","cexpr::nom","Holds the result of parsing functions",null,null],[13,"Done","","indicates a correct parsing, the first field containing the rest of the unparsed data, the second field contains the parsed data",1,null],[13,"Error","","contains a Err, an enum that can indicate an error code, a position in the input, and a pointer to another error, making a list of errors in the parsing tree",1,null],[13,"Incomplete","","Incomplete contains a Needed, an enum than can represent a known quantity of input data, or unknown",1,null],[4,"Needed","","Contains information on needed data if a parser returned `Incomplete`",null,null],[13,"Unknown","","needs more data, but we do not know how much",2,null],[13,"Size","","contains the required data size",2,null],[4,"Err","","Contains the error that a parser can return",null,null],[13,"Code","","An error code, represented by an ErrorKind, which can contain a custom error code represented by E",3,null],[13,"Node","","An error code, and the next error",3,null],[13,"Position","","An error code, and the input position",3,null],[13,"NodePosition","","An error code, the input position and the next error",3,null],[4,"ErrorKind","","indicates which parser returned an error",null,null],[13,"Custom","","",4,null],[13,"Tag","","",4,null],[13,"MapRes","","",4,null],[13,"MapOpt","","",4,null],[13,"Alt","","",4,null],[13,"IsNot","","",4,null],[13,"IsA","","",4,null],[13,"SeparatedList","","",4,null],[13,"SeparatedNonEmptyList","","",4,null],[13,"Many0","","",4,null],[13,"Many1","","",4,null],[13,"Count","","",4,null],[13,"TakeUntilAndConsume","","",4,null],[13,"TakeUntil","","",4,null],[13,"TakeUntilEitherAndConsume","","",4,null],[13,"TakeUntilEither","","",4,null],[13,"LengthValue","","",4,null],[13,"TagClosure","","",4,null],[13,"Alpha","","",4,null],[13,"Digit","","",4,null],[13,"HexDigit","","",4,null],[13,"OctDigit","","",4,null],[13,"AlphaNumeric","","",4,null],[13,"Space","","",4,null],[13,"MultiSpace","","",4,null],[13,"LengthValueFn","","",4,null],[13,"Eof","","",4,null],[13,"ExprOpt","","",4,null],[13,"ExprRes","","",4,null],[13,"CondReduce","","",4,null],[13,"Switch","","",4,null],[13,"TagBits","","",4,null],[13,"OneOf","","",4,null],[13,"NoneOf","","",4,null],[13,"Char","","",4,null],[13,"CrLf","","",4,null],[13,"RegexpMatch","","",4,null],[13,"RegexpMatches","","",4,null],[13,"RegexpFind","","",4,null],[13,"RegexpCapture","","",4,null],[13,"RegexpCaptures","","",4,null],[13,"TakeWhile1","","",4,null],[13,"Complete","","",4,null],[13,"Fix","","",4,null],[13,"Escaped","","",4,null],[13,"EscapedTransform","","",4,null],[13,"TagStr","","",4,null],[13,"IsNotStr","","",4,null],[13,"IsAStr","","",4,null],[13,"TakeWhile1Str","","",4,null],[13,"NonEmpty","","",4,null],[13,"ManyMN","","",4,null],[13,"TakeUntilAndConsumeStr","","",4,null],[13,"TakeUntilStr","","",4,null],[13,"Not","","",4,null],[0,"literal","cexpr","Parsing C literals from byte slices.",null,null],[4,"CChar","cexpr::literal","Representation of a C character",null,null],[13,"Char","","A character that can be represented as a `char`",5,null],[13,"Raw","","Any other character (8-bit characters, unicode surrogates, etc.)",5,null],[5,"parse","","Parse a C literal.",null,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"cchar"}}],[11,"into","","",5,null],[0,"expr","cexpr","Evaluating C expressions from tokens.",null,null],[3,"IdentifierParser","cexpr::expr","Expression parser/evaluator that supports identifiers.",null,null],[4,"EvalResult","","The result of parsing a literal or evaluating an expression.",null,null],[13,"Int","","",6,null],[13,"Float","","",6,null],[13,"Char","","",6,null],[13,"Str","","",6,null],[13,"Invalid","","",6,null],[5,"expr","","Parse and evalute an expression of a list of tokens.",null,null],[5,"macro_definition","","Parse and evaluate a macro definition from of a list of tokens.",null,null],[6,"CResult","","",null,null],[11,"fmt","","",7,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"from","","",6,{"inputs":[{"name":"vec"}],"output":{"name":"evalresult"}}],[11,"add_assign","","",6,null],[11,"bitand_assign","","",6,null],[11,"bitor_assign","","",6,null],[11,"bitxor_assign","","",6,null],[11,"div_assign","","",6,null],[11,"mul_assign","","",6,null],[11,"rem_assign","","",6,null],[11,"shl_assign","","",6,null],[11,"shr_assign","","",6,null],[11,"sub_assign","","",6,null],[11,"new","","Create a new `IdentifierParser` with a set of known identifiers. When\na known identifier is encountered during parsing, it is substituted\nfor the value specified.",7,{"inputs":[{"name":"hashmap"}],"output":{"name":"identifierparser"}}],[11,"expr","","Parse and evalute an expression of a list of tokens.",7,null],[11,"macro_definition","","Parse and evaluate a macro definition from of a list of tokens.",7,null],[0,"token","cexpr","Representation of a C token",null,null],[3,"Token","cexpr::token","",null,null],[12,"kind","","",8,null],[12,"raw","","",8,null],[4,"Kind","","",null,null],[13,"Punctuation","","",9,null],[13,"Keyword","","",9,null],[13,"Identifier","","",9,null],[13,"Literal","","",9,null],[13,"Comment","","",9,null],[5,"remove_comments","","Remove all comment tokens from a vector of tokens",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"eq","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"fmt","cexpr","",0,null],[14,"my_recognize!","","",null,null],[11,"is_done","cexpr::nom","",1,null],[11,"is_err","","",1,null],[11,"is_incomplete","","",1,null],[11,"map","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, N, E&gt;` by appling a function\nto a contained `Done` value, leaving `Error` and `Incomplete` value\nuntouched.",1,null],[11,"map_inc","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, O, E&gt;` by appling a function\nto a contained `Incomplete` value, leaving `Done` and `Error` value\nuntouched.",1,null],[11,"map_err","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, O, N&gt;` by appling a function\nto a contained `Error` value, leaving `Done` and `Incomplete` value\nuntouched.",1,null],[11,"unwrap","","Unwrap the contained `Done(I, O)` value, or panic if the `IResult` is not\n`Done`.",1,null],[11,"unwrap_inc","","Unwrap the contained `Done(I, O)` value, or panic if the `IResult` is not\n`Done`.",1,null],[11,"unwrap_err","","Unwrap the contained `Done(I, O)` value, or panic if the `IResult` is not\n`Done`.",1,null],[11,"clone","","",4,null],[11,"hash","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"description","","",4,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"is_known","","",2,null],[11,"map","","Maps a `Needed` to `Needed` by appling a function to a contained `Size` value.",2,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"remaining_input","","",1,null],[11,"remaining_input","","",1,null],[11,"remaining_input","","",1,null],[11,"output","","",1,null],[11,"output","","",1,null],[11,"output","","",1,null],[11,"description","","",3,null],[11,"fmt","","",3,null]],"paths":[[4,"Error"],[4,"IResult"],[4,"Needed"],[4,"Err"],[4,"ErrorKind"],[4,"CChar"],[4,"EvalResult"],[3,"IdentifierParser"],[3,"Token"],[4,"Kind"]]};
searchIndex["nom"] = {"doc":"nom, eating data byte by byte","items":[[3,"ProducerRepeat","nom","ProducerRepeat takes a single value, and generates it at each step",null,null],[3,"MemProducer","","A MemProducer generates values from an in memory byte buffer",null,null],[3,"FileProducer","","",null,null],[3,"MapConsumer","","MapConsumer takes a function S -&gt; T and applies it on a consumer producing values of type S",null,null],[3,"ChainConsumer","","ChainConsumer takes a consumer C1 R -&gt; S, and a consumer C2 S -&gt; T, and makes a consumer R -&gt; T by applying C2 on C1&#39;s result",null,null],[4,"ErrorKind","","indicates which parser returned an error",null,null],[13,"Custom","","",0,null],[13,"Tag","","",0,null],[13,"MapRes","","",0,null],[13,"MapOpt","","",0,null],[13,"Alt","","",0,null],[13,"IsNot","","",0,null],[13,"IsA","","",0,null],[13,"SeparatedList","","",0,null],[13,"SeparatedNonEmptyList","","",0,null],[13,"Many0","","",0,null],[13,"Many1","","",0,null],[13,"Count","","",0,null],[13,"TakeUntilAndConsume","","",0,null],[13,"TakeUntil","","",0,null],[13,"TakeUntilEitherAndConsume","","",0,null],[13,"TakeUntilEither","","",0,null],[13,"LengthValue","","",0,null],[13,"TagClosure","","",0,null],[13,"Alpha","","",0,null],[13,"Digit","","",0,null],[13,"HexDigit","","",0,null],[13,"OctDigit","","",0,null],[13,"AlphaNumeric","","",0,null],[13,"Space","","",0,null],[13,"MultiSpace","","",0,null],[13,"LengthValueFn","","",0,null],[13,"Eof","","",0,null],[13,"ExprOpt","","",0,null],[13,"ExprRes","","",0,null],[13,"CondReduce","","",0,null],[13,"Switch","","",0,null],[13,"TagBits","","",0,null],[13,"OneOf","","",0,null],[13,"NoneOf","","",0,null],[13,"Char","","",0,null],[13,"CrLf","","",0,null],[13,"RegexpMatch","","",0,null],[13,"RegexpMatches","","",0,null],[13,"RegexpFind","","",0,null],[13,"RegexpCapture","","",0,null],[13,"RegexpCaptures","","",0,null],[13,"TakeWhile1","","",0,null],[13,"Complete","","",0,null],[13,"Fix","","",0,null],[13,"Escaped","","",0,null],[13,"EscapedTransform","","",0,null],[13,"TagStr","","",0,null],[13,"IsNotStr","","",0,null],[13,"IsAStr","","",0,null],[13,"TakeWhile1Str","","",0,null],[13,"NonEmpty","","",0,null],[13,"ManyMN","","",0,null],[13,"TakeUntilAndConsumeStr","","",0,null],[13,"TakeUntilStr","","",0,null],[13,"Not","","",0,null],[4,"Err","","Contains the error that a parser can return",null,null],[13,"Code","","An error code, represented by an ErrorKind, which can contain a custom error code represented by E",1,null],[13,"Node","","An error code, and the next error",1,null],[13,"Position","","An error code, and the input position",1,null],[13,"NodePosition","","An error code, the input position and the next error",1,null],[4,"Needed","","Contains information on needed data if a parser returned `Incomplete`",null,null],[13,"Unknown","","needs more data, but we do not know how much",2,null],[13,"Size","","contains the required data size",2,null],[4,"IResult","","Holds the result of parsing functions",null,null],[13,"Done","","indicates a correct parsing, the first field containing the rest of the unparsed data, the second field contains the parsed data",3,null],[13,"Error","","contains a Err, an enum that can indicate an error code, a position in the input, and a pointer to another error, making a list of errors in the parsing tree",3,null],[13,"Incomplete","","Incomplete contains a Needed, an enum than can represent a known quantity of input data, or unknown",3,null],[4,"Input","","",null,null],[13,"Element","","",4,null],[13,"Empty","","",4,null],[13,"Eof","","",4,null],[4,"ConsumerState","","Stores a consumer&#39;s current computation state",null,null],[13,"Done","","A value of type O has been produced",5,null],[13,"Error","","An error of type E has been encountered",5,null],[13,"Continue","","Continue applying, and pass a message of type M to the data source",5,null],[4,"Move","","",null,null],[13,"Consume","","indcates how much data was consumed",6,null],[13,"Seek","","indicates where in the input the consumer must seek",6,null],[13,"Await","","indicates more data is needed",6,null],[4,"FileProducerState","","",null,null],[13,"Normal","","",7,null],[13,"Error","","",7,null],[13,"Eof","","",7,null],[5,"error_to_list","","",null,{"inputs":[{"name":"err"}],"output":{"name":"vec"}}],[5,"compare_error_paths","","",null,{"inputs":[{"name":"err"},{"name":"err"}],"output":{"name":"bool"}}],[5,"add_error_pattern","","",null,{"inputs":[{"name":"hashmap"},{"name":"iresult"},{"name":"str"}],"output":{"name":"bool"}}],[5,"slice_to_offsets","","",null,null],[5,"prepare_errors","","",null,null],[5,"print_error","","",null,null],[5,"generate_colors","","",null,null],[5,"code_from_offset","","",null,null],[5,"reset_color","","",null,{"inputs":[{"name":"vec"}],"output":null}],[5,"write_color","","",null,{"inputs":[{"name":"vec"},{"name":"u8"}],"output":null}],[5,"print_codes","","",null,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"string"}}],[5,"print_offsets","","",null,null],[5,"error_to_u32","","",null,{"inputs":[{"name":"errorkind"}],"output":{"name":"u32"}}],[5,"tag_cl","","",null,null],[5,"print","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"begin","","",null,null],[5,"not_line_ending","","",null,null],[5,"line_ending","","Recognizes a line feed",null,null],[5,"is_alphabetic","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_digit","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_hex_digit","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_oct_digit","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_alphanumeric","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_space","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"alpha","","Recognizes lowercase and uppercase alphabetic characters: a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"digit","","Recognizes numerical characters: 0-9",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"hex_digit","","Recognizes hexadecimal numerical characters: 0-9, A-F, a-f",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"oct_digit","","Recognizes octal characters: 0-7",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"alphanumeric","","Recognizes numerical and alphabetic characters: 0-9a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"space","","Recognizes spaces and tabs",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"multispace","","Recognizes spaces, tabs, carriage returns and line feeds",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"sized_buffer","","",null,null],[5,"length_value","","",null,null],[5,"be_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"be_u16","","Recognizes big endian unsigned 2 bytes integer",null,null],[5,"be_u32","","Recognizes big endian unsigned 4 bytes integer",null,null],[5,"be_u64","","Recognizes big endian unsigned 8 bytes integer",null,null],[5,"be_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"be_i16","","Recognizes big endian signed 2 bytes integer",null,null],[5,"be_i32","","Recognizes big endian signed 4 bytes integer",null,null],[5,"be_i64","","Recognizes big endian signed 8 bytes integer",null,null],[5,"le_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"le_u16","","Recognizes little endian unsigned 2 bytes integer",null,null],[5,"le_u32","","Recognizes little endian unsigned 4 bytes integer",null,null],[5,"le_u64","","Recognizes little endian unsigned 8 bytes integer",null,null],[5,"le_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"le_i16","","Recognizes little endian signed 2 bytes integer",null,null],[5,"le_i32","","Recognizes little endian signed 4 bytes integer",null,null],[5,"le_i64","","Recognizes little endian signed 8 bytes integer",null,null],[5,"be_f32","","Recognizes big endian 4 bytes floating point number",null,null],[5,"be_f64","","Recognizes big endian 8 bytes floating point number",null,null],[5,"le_f32","","Recognizes little endian 4 bytes floating point number",null,null],[5,"le_f64","","Recognizes little endian 8 bytes floating point number",null,null],[5,"hex_u32","","Recognizes a hex-encoded integer",null,null],[5,"eof","","Recognizes empty input buffers",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"non_empty","","Recognizes non empty buffers",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"rest","","Return the remaining input.",null,null],[5,"rest_s","","Return the remaining input, for strings.",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"newline","","",null,null],[5,"crlf","","",null,null],[5,"eol","","",null,null],[5,"tab","","",null,null],[5,"anychar","","",null,null],[5,"shift","","",null,null],[11,"clone","","",0,null],[11,"hash","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"is_known","","",2,null],[11,"map","","Maps a `Needed` to `Needed` by appling a function to a contained `Size` value.",2,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"is_done","","",3,null],[11,"is_err","","",3,null],[11,"is_incomplete","","",3,null],[11,"map","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, N, E&gt;` by appling a function\nto a contained `Done` value, leaving `Error` and `Incomplete` value\nuntouched.",3,null],[11,"map_inc","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, O, E&gt;` by appling a function\nto a contained `Incomplete` value, leaving `Done` and `Error` value\nuntouched.",3,null],[11,"map_err","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, O, N&gt;` by appling a function\nto a contained `Error` value, leaving `Done` and `Incomplete` value\nuntouched.",3,null],[11,"unwrap","","Unwrap the contained `Done(I, O)` value, or panic if the `IResult` is not\n`Done`.",3,null],[11,"unwrap_inc","","Unwrap the contained `Done(I, O)` value, or panic if the `IResult` is not\n`Done`.",3,null],[11,"unwrap_err","","Unwrap the contained `Done(I, O)` value, or panic if the `IResult` is not\n`Done`.",3,null],[11,"remaining_input","","",3,null],[11,"remaining_input","","",3,null],[11,"remaining_input","","",3,null],[11,"output","","",3,null],[11,"output","","",3,null],[11,"output","","",3,null],[11,"description","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"map","","",5,null],[11,"flat_map","","",5,null],[11,"apply","","",8,null],[11,"new","","",9,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"apply","","",9,null],[11,"eq","","",7,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"fmt","","",10,null],[11,"new","","",10,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"state","","",10,null],[11,"refill","","",10,null],[11,"resize","","Resize the internal buffer, copy the data to the new one and returned how much data was copied",10,null],[11,"apply","","",10,null],[11,"new","","",11,{"inputs":[{"name":"c"},{"name":"f"}],"output":{"name":"mapconsumer"}}],[11,"handle","","",11,null],[11,"state","","",11,null],[11,"new","","",12,{"inputs":[{"name":"c1"},{"name":"c2"}],"output":{"name":"chainconsumer"}}],[11,"handle","","",12,null],[11,"state","","",12,null],[8,"HexDisplay","","useful functions to calculate the offset between slices and show a hexdump of a slice",null,null],[10,"offset","","offset between the first byte of self and the first byte of the argument",13,null],[10,"to_hex","","Converts the value of `self` to a hex dump, returning the owned\nstring.",13,null],[10,"to_hex_from","","Converts the value of `self` to a hex dump beginning at `from` address, returning the owned\nstring.",13,null],[8,"InputLength","","",null,null],[10,"input_len","","",14,null],[8,"AsChar","","",null,null],[10,"as_char","","",15,null],[10,"is_alpha","","",15,null],[10,"is_alphanum","","",15,null],[10,"is_0_to_9","","",15,null],[10,"is_hex_digit","","",15,null],[10,"is_oct_digit","","",15,null],[8,"IterIndices","","",null,null],[16,"Item","","",16,null],[16,"Iter","","",16,null],[10,"iter_indices","","",16,null],[8,"AsBytes","","",null,null],[10,"as_bytes","","",17,null],[8,"GetInput","","",null,null],[10,"remaining_input","","",18,null],[8,"GetOutput","","",null,null],[10,"output","","",19,null],[8,"Consumer","","The Consumer trait wraps a computation and its state",null,null],[10,"handle","","implement handle for the current computation, returning the new state of the consumer",20,null],[10,"state","","returns the current state",20,null],[8,"Producer","","The producer wraps a data source, like file or network, and applies a consumer on it",null,null],[10,"apply","","Applies a consumer once on the produced data, and return the consumer&#39;s state",21,null],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",21,null],[14,"dbg!","","Prints a message if the parser fails",null,null],[14,"dbg_dmp!","","Prints a message and the input if the parser fails",null,null],[14,"closure!","","Wraps a parser in a closure",null,null],[14,"named!","","Makes a function from a parser combination",null,null],[14,"call!","","Used to wrap common expressions and function as macros",null,null],[14,"apply!","","emulate function currying: `apply!(my_function, arg1, arg2, ...)` becomes `my_function(input, arg1, arg2, ...)`",null,null],[14,"error!","","Prevents backtracking if the child parser fails",null,null],[14,"add_error!","","Add an error if the child parser fails",null,null],[14,"fix_error!","","translate parser result from IResult&lt;I,O,u32&gt; to IResult&lt;I,O,E&gt; with a custom type",null,null],[14,"complete!","","replaces a `Incomplete` returned by the child parser\nwith an `Error`",null,null],[14,"try_parse!","","A bit like `std::try!`, this macro will return the remaining input and parsed value if the child parser returned `Done`,\nand will do an early return for `Error` and `Incomplete`\nthis can provide more flexibility than `chain!` if needed",null,null],[14,"flat_map!","","`flat_map!(R -&gt; IResult&lt;R,S&gt;, S -&gt; IResult&lt;S,T&gt;) =&gt; R -&gt; IResult&lt;R, T&gt;`",null,null],[14,"map!","","`map!(I -&gt; IResult&lt;I,O&gt;, O -&gt; P) =&gt; I -&gt; IResult&lt;I, P&gt;`\nmaps a function on the result of a parser",null,null],[14,"map_res!","","`map_res!(I -&gt; IResult&lt;I,O&gt;, O -&gt; Result&lt;P&gt;) =&gt; I -&gt; IResult&lt;I, P&gt;`\nmaps a function returning a Result on the output of a parser",null,null],[14,"map_opt!","","`map_opt!(I -&gt; IResult&lt;I,O&gt;, O -&gt; Option&lt;P&gt;) =&gt; I -&gt; IResult&lt;I, P&gt;`\nmaps a function returning an Option on the output of a parser",null,null],[14,"value!","","`value!(T, R -&gt; IResult&lt;R, S&gt; ) =&gt; R -&gt; IResult&lt;R, T&gt;`",null,null],[14,"expr_res!","","`expr_res!(Result&lt;E,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nevaluate an expression that returns a Result&lt;T,E&gt; and returns a IResult::Done(I,T) if Ok",null,null],[14,"expr_opt!","","`expr_opt!(Option&lt;O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nevaluate an expression that returns a Option&lt;T&gt; and returns a IResult::Done(I,T) if Some",null,null],[14,"chain!","","`chain!(I-&gt;IResult&lt;I,A&gt; ~ I-&gt;IResult&lt;I,B&gt; ~ ... I-&gt;IResult&lt;I,X&gt; , || { return O } ) =&gt; I -&gt; IResult&lt;I, O&gt;`\nchains parsers and assemble the results through a closure",null,null],[14,"tuple!","","`tuple!(I-&gt;IResult&lt;I,A&gt;, I-&gt;IResult&lt;I,B&gt;, ... I-&gt;IResult&lt;I,X&gt;) =&gt; I -&gt; IResult&lt;I, (A, B, ..., X)&gt;`\nchains parsers and assemble the sub results in a tuple.",null,null],[14,"alt!","","`alt!(I -&gt; IResult&lt;I,O&gt; | I -&gt; IResult&lt;I,O&gt; | ... | I -&gt; IResult&lt;I,O&gt; ) =&gt; I -&gt; IResult&lt;I, O&gt;`\ntry a list of parsers, return the result of the first successful one",null,null],[14,"alt_complete!","","This is a combination of the `alt!` and `complete!` combinators. Rather\nthan returning `Incomplete` on partial input, `alt_complete!` will try the\nnext alternative in the chain. You should use this only if you know you\nwill not receive partial input for the rules you&#39;re trying to match (this\nis almost always the case for parsing programming languages).",null,null],[14,"switch!","","`switch!(I -&gt; IResult&lt;I,P&gt;, P =&gt; I -&gt; IResult&lt;I,O&gt; | ... | P =&gt; I -&gt; IResult&lt;I,O&gt; ) =&gt; I -&gt; IResult&lt;I, O&gt;`\nchoose the next parser depending on the result of the first one, if successful,\nand returns the result of the second parser",null,null],[14,"opt!","","`opt!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Option&lt;O&gt;&gt;`\nmake the underlying parser optional",null,null],[14,"opt_res!","","`opt_res!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Result&lt;nom::Err,O&gt;&gt;`\nmake the underlying parser optional",null,null],[14,"cond_with_error!","","`cond_with_error!(bool, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Option&lt;O&gt;&gt;`\nConditional combinator",null,null],[14,"cond!","","`cond!(bool, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Option&lt;O&gt;&gt;`\nConditional combinator",null,null],[14,"cond_reduce!","","`cond_reduce!(bool, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nConditional combinator with error",null,null],[14,"peek!","","`peek!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nreturns a result without consuming the input",null,null],[14,"not!","","`not!(I -&gt; IResult&lt;I,0&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nreturns a result only if the embedded parser returns Error or Incomplete\ndoes not consume the input",null,null],[14,"tap!","","`tap!(name: I -&gt; IResult&lt;I,O&gt; =&gt; { block }) =&gt; I -&gt; IResult&lt;I, O&gt;`\nallows access to the parser&#39;s result without affecting it",null,null],[14,"pair!","","`pair!(I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I,P&gt;) =&gt; I -&gt; IResult&lt;I, (O,P)&gt;`\npair(X,Y), returns (x,y)",null,null],[14,"separated_pair!","","`separated_pair!(I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I, T&gt;, I -&gt; IResult&lt;I,P&gt;) =&gt; I -&gt; IResult&lt;I, (O,P)&gt;`\nseparated_pair(X,sep,Y) returns (x,y)",null,null],[14,"preceded!","","`preceded!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\npreceded(opening, X) returns X",null,null],[14,"terminated!","","`terminated!(I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I,T&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nterminated(X, closing) returns X",null,null],[14,"delimited!","","`delimited!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I,U&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\ndelimited(opening, X, closing) returns X",null,null],[14,"separated_list!","","`separated_list!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nseparated_list(sep, X) returns Vec&lt;X&gt;",null,null],[14,"separated_nonempty_list!","","`separated_nonempty_list!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nseparated_nonempty_list(sep, X) returns Vec&lt;X&gt;",null,null],[14,"many0!","","`many0!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the parser 0 or more times and returns the list of results in a Vec",null,null],[14,"many1!","","`many1!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the parser 1 or more times and returns the list of results in a Vec",null,null],[14,"many_m_n!","","`many_m_n!(usize, usize, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the parser between m and n times (n included) and returns the list of results in a Vec",null,null],[14,"count!","","`count!(I -&gt; IResult&lt;I,O&gt;, nb) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the child parser a specified number of times",null,null],[14,"count_fixed!","","`count_fixed!(O, I -&gt; IResult&lt;I,O&gt;, nb) =&gt; I -&gt; IResult&lt;I, [O; nb]&gt;`\nApplies the child parser a fixed number of times and returns a fixed size array\nThe type must be specified and it must be `Copy`",null,null],[14,"length_value!","","`length_value!(I -&gt; IResult&lt;I, nb&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\ngets a number from the first parser, then applies the second parser that many times",null,null],[14,"fold_many0!","","`fold_many0!(I -&gt; IResult&lt;I,O&gt;, R, Fn(R, O) -&gt; R) =&gt; I -&gt; IResult&lt;I, R&gt;`\nApplies the parser 0 or more times and folds the list of return values",null,null],[14,"fold_many1!","","`fold_many1!(I -&gt; IResult&lt;I,O&gt;, R, Fn(R, O) -&gt; R) =&gt; I -&gt; IResult&lt;I, R&gt;`\nApplies the parser 1 or more times and folds the list of return values",null,null],[14,"fold_many_m_n!","","`fold_many_m_n!(usize, usize, I -&gt; IResult&lt;I,O&gt;, R, Fn(R, O) -&gt; R) =&gt; I -&gt; IResult&lt;I, R&gt;`\nApplies the parser between m and n times (n included) and folds the list of return value",null,null],[14,"method!","","Makes a method from a parser combination",null,null],[14,"call_m!","","Used to called methods then move self back into self",null,null],[14,"apply_m!","","emulate function currying for method calls on structs\n`apply!(self.my_function, arg1, arg2, ...)` becomes `self.my_function(input, arg1, arg2, ...)`",null,null],[14,"recognize!","","`recognize!(&amp;[T] -&gt; IResult&lt;&amp;[T], O&gt; ) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nif the child parser was successful, return the consumed input as produced value",null,null],[14,"tag!","","`tag!(&amp;[T]: nom::AsBytes) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\ndeclares a byte array as a suite to recognize",null,null],[14,"is_not!","","`is_not!(&amp;[T:AsBytes]) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes that do not appear in the provided array",null,null],[14,"is_a!","","`is_a!(&amp;[T]) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes that appear in the provided array",null,null],[14,"escaped!","","`escaped!(&amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;, T, &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nmatches a byte string with escaped characters.",null,null],[14,"escaped_transform!","","`escaped_transform!(&amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;, T, &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], Vec&lt;T&gt;&gt;`\nmatches a byte string with escaped characters.",null,null],[14,"take_while!","","`take_while!(T -&gt; bool) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes until the provided function fails.",null,null],[14,"take_while1!","","`take_while1!(&amp;[T] -&gt; bool) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest (non empty) list of bytes until the provided function fails.",null,null],[14,"take_till!","","`take_till!(T -&gt; bool) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes until the provided function succeeds",null,null],[14,"take!","","`take!(nb) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\ngenerates a parser consuming the specified number of bytes",null,null],[14,"take_str!","","`take!(nb) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;str&gt;`\nsame as take! but returning a &amp;str",null,null],[14,"take_until_and_consume!","","`take_until_and_consume!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\ngenerates a parser consuming bytes until the specified byte sequence is found, and consumes it",null,null],[14,"take_until!","","`take_until!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nconsumes data until it finds the specified tag",null,null],[14,"take_until_either_and_consume!","","`take_until_either_and_consume!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nconsumes data until it finds any of the specified characters, and consume it",null,null],[14,"take_until_either!","","`take_until_either!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`",null,null],[14,"length_bytes!","","`length_bytes!(&amp;[T] -&gt; IResult&lt;&amp;[T], nb&gt;) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;\ngets a number from the first parser, then extracts that many bytes from the\nremaining stream",null,null],[14,"bits!","","`bits!( parser ) =&gt; ( &amp;[u8], (&amp;[u8], usize) -&gt; IResult&lt;(&amp;[u8], usize), T&gt; ) -&gt; IResult&lt;&amp;[u8], T&gt;`\ntransforms its byte slice input into a bit stream for the underlying parsers",null,null],[14,"take_bits!","","`take_bits!(type, nb) =&gt; ( (&amp;[T], usize), U, usize) -&gt; IResult&lt;(&amp;[T], usize), U&gt;`\ngenerates a parser consuming the specified number of bits.",null,null],[14,"tag_bits!","","matches an integer pattern to a bitstream. The number of bits of the input to compare must be specified",null,null],[14,"u16!","","if parameter is true, parse a big endian u16 integer,\notherwise a little endian u16 integer",null,null],[14,"u32!","","if parameter is true, parse a big endian u32 integer,\notherwise a little endian u32 integer",null,null],[14,"u64!","","if parameter is true, parse a big endian u64 integer,\notherwise a little endian u64 integer",null,null],[14,"i16!","","if parameter is true, parse a big endian i16 integer,\notherwise a little endian i16 integer",null,null],[14,"i32!","","if parameter is true, parse a big endian i32 integer,\notherwise a little endian i32 integer",null,null],[14,"i64!","","if parameter is true, parse a big endian i64 integer,\notherwise a little endian i64 integer",null,null],[14,"one_of!","","matches one of the provided characters",null,null],[14,"none_of!","","matches anything but the provided characters",null,null],[14,"char!","","matches one character: `char!(char) =&gt; &amp;[u8] -&gt; IResult&lt;&amp;[u8], char&gt;",null,null],[14,"consumer_from_parser!","","",null,null],[14,"tag_s!","","`tag_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ndeclares a string as a suite to recognize",null,null],[14,"take_s!","","`take_s!(nb) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ngenerates a parser consuming the specified number of characters",null,null],[14,"is_not_s!","","`is_not_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters that do not appear in the provided array",null,null],[14,"is_a_s!","","`is_a_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters that appear in the provided array",null,null],[14,"take_while_s!","","`take_while_s!(char -&gt; bool) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters until the provided function fails.",null,null],[14,"take_while1_s!","","`take_while1_s!(char -&gt; bool) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest (non empty) list of characters until the provided function fails.",null,null],[14,"take_till_s!","","`take_till_s!(&amp;str -&gt; bool) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters until the provided function succeeds",null,null],[14,"take_until_and_consume_s!","","`take_until_and_consume_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ngenerates a parser consuming all chars until the specified string is found and consumes it",null,null],[14,"take_until_s!","","`take_until_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ngenerates a parser consuming all chars until the specified string is found and leaves it in the remaining input",null,null],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",21,null]],"paths":[[4,"ErrorKind"],[4,"Err"],[4,"Needed"],[4,"IResult"],[4,"Input"],[4,"ConsumerState"],[4,"Move"],[4,"FileProducerState"],[3,"ProducerRepeat"],[3,"MemProducer"],[3,"FileProducer"],[3,"MapConsumer"],[3,"ChainConsumer"],[8,"HexDisplay"],[8,"InputLength"],[8,"AsChar"],[8,"IterIndices"],[8,"AsBytes"],[8,"GetInput"],[8,"GetOutput"],[8,"Consumer"],[8,"Producer"]]};
searchIndex["term"] = {"doc":"Terminal formatting library.","items":[[4,"Attr","term","Terminal attributes for use with term.attr().",null,null],[13,"Bold","","Bold (or possibly bright) mode",0,null],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",0,null],[13,"Italic","","Italics mode. Often not supported",0,null],[13,"Underline","","Underline mode",0,null],[13,"Blink","","Blink mode",0,null],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",0,null],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",0,null],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",0,null],[13,"ForegroundColor","","Convenience attribute to set the foreground color",0,null],[13,"BackgroundColor","","Convenience attribute to set the background color",0,null],[4,"Error","","An error arising from interacting with the terminal.",null,null],[13,"Io","","Indicates an error from any underlying IO",1,null],[13,"TerminfoParsing","","Indicates an error during terminfo parsing",1,null],[13,"ParameterizedExpansion","","Indicates an error expanding a parameterized string from the terminfo database",1,null],[13,"NotSupported","","Indicates that the terminal does not support the requested operation.",1,null],[13,"TermUnset","","Indicates that the `TERM` environment variable was unset, and thus we were unable to detect\nwhich terminal we should be using.",1,null],[13,"TerminfoEntryNotFound","","Indicates that we were unable to find a terminfo entry for the requested terminal.",1,null],[13,"CursorDestinationInvalid","","Indicates that the cursor could not be moved to the requested position.",1,null],[13,"ColorOutOfRange","","Indicates that the terminal does not support displaying the requested color.",1,null],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn&#39;t be\nopened.",null,{"inputs":[],"output":{"name":"option"}}],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn&#39;t be\nopened.",null,{"inputs":[],"output":{"name":"option"}}],[0,"terminfo","","Terminfo database interface.",null,null],[3,"TermInfo","term::terminfo","A parsed terminfo database entry.",null,null],[12,"names","","Names for the terminal",2,null],[12,"bools","","Map of capability name to boolean value",2,null],[12,"numbers","","Map of capability name to numeric value",2,null],[12,"strings","","Map of capability name to raw (unexpanded) string",2,null],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its\nparsed Terminfo database record.",null,null],[4,"Error","","An error from parsing a terminfo entry",null,null],[13,"BadMagic","","The &quot;magic&quot; number at the start of the file was wrong.",3,null],[13,"NotUtf8","","The names in the file were not valid UTF-8.",3,null],[13,"ShortNames","","The names section of the file was empty",3,null],[13,"TooManyBools","","More boolean parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyNumbers","","More number parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyStrings","","More string parameters are present in the file than this crate knows how to interpret.",3,null],[13,"InvalidLength","","The length of some field was not &gt;= -1.",3,null],[13,"NamesMissingNull","","The names table was missing a trailing null terminator.",3,null],[13,"StringsMissingNull","","The strings table was missing a trailing null terminator.",3,null],[0,"searcher","","ncurses-compatible database discovery",null,null],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"parser","term::terminfo","TermInfo format parsing.\nncurses-compatible compiled terminfo format parsing (term(5))",null,null],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[5,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames`\nis true",null,{"inputs":[{"name":"read"},{"name":"bool"}],"output":{"name":"result"}}],[5,"msys_terminfo","","Create a dummy TermInfo struct for msys terminals",null,{"inputs":[],"output":{"name":"terminfo"}}],[7,"boolfnames","","",null,null],[7,"boolnames","","",null,null],[7,"numfnames","","",null,null],[7,"numnames","","",null,null],[7,"stringfnames","","",null,null],[7,"stringnames","","",null,null],[0,"parm","term::terminfo","Parameterized string expansion",null,null],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays",null,null],[4,"Param","","Types of parameters a capability can use",null,null],[13,"Words","","",4,null],[13,"Number","","",4,null],[4,"Error","","An error from interpreting a parameterized string.",null,null],[13,"StackUnderflow","","Data was requested from the stack, but the stack didn&#39;t have enough elements.",5,null],[13,"TypeMismatch","","The type of the element(s) on top of the stack did not match the type that the operator\nwanted.",5,null],[13,"UnrecognizedFormatOption","","An unrecognized format option was used.",5,null],[13,"InvalidVariableName","","An invalid variable name was used.",5,null],[13,"InvalidParameterIndex","","An invalid parameter index was used.",5,null],[13,"MalformedCharacterConstant","","A malformed character constant was used.",5,null],[13,"IntegerConstantOverflow","","An integer constant was too large (overflowed an i32)",5,null],[13,"MalformedIntegerConstant","","A malformed integer constant was used.",5,null],[13,"FormatWidthOverflow","","A format width constant was too large (overflowed a usize)",5,null],[13,"FormatPrecisionOverflow","","A format precision constant was too large (overflowed a usize)",5,null],[5,"expand","","Expand a parameterized capability",null,null],[11,"clone","","",4,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"cause","","",5,null],[11,"new","","Return a new zero-initialized Variables",6,{"inputs":[],"output":{"name":"variables"}}],[11,"fmt","term::terminfo","",2,null],[11,"from_env","","Create a TermInfo based on current environment.",2,{"inputs":[],"output":{"name":"result"}}],[11,"from_name","","Create a TermInfo for the named terminal.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_path","","Parse the given TermInfo.",2,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"from","","",3,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"description","","",3,null],[11,"cause","","",3,null],[11,"fg","","",7,null],[11,"bg","","",7,null],[11,"attr","","",7,null],[11,"supports_attr","","",7,null],[11,"reset","","",7,null],[11,"supports_reset","","",7,null],[11,"supports_color","","",7,null],[11,"cursor_up","","",7,null],[11,"delete_line","","",7,null],[11,"carriage_return","","",7,null],[11,"get_ref","","",7,null],[11,"get_mut","","",7,null],[11,"into_inner","","",7,null],[11,"new_with_terminfo","","Create a new TerminfoTerminal with the given TermInfo and Write.",7,{"inputs":[{"name":"t"},{"name":"terminfo"}],"output":{"name":"terminfoterminal"}}],[11,"new","","Create a new TerminfoTerminal for the current environment with the given Write.",7,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"write","","",7,null],[11,"flush","","",7,null],[0,"color","term","Terminal color definitions",null,null],[6,"Color","term::color","Number for a terminal color",null,null],[17,"BLACK","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"YELLOW","","",null,null],[17,"BLUE","","",null,null],[17,"MAGENTA","","",null,null],[17,"CYAN","","",null,null],[17,"WHITE","","",null,null],[17,"BRIGHT_BLACK","","",null,null],[17,"BRIGHT_RED","","",null,null],[17,"BRIGHT_GREEN","","",null,null],[17,"BRIGHT_YELLOW","","",null,null],[17,"BRIGHT_BLUE","","",null,null],[17,"BRIGHT_MAGENTA","","",null,null],[17,"BRIGHT_CYAN","","",null,null],[17,"BRIGHT_WHITE","","",null,null],[6,"StdoutTerminal","term","Alias for stdout terminals.",null,null],[6,"StderrTerminal","","Alias for stderr terminals.",null,null],[6,"Result","","The canonical `Result` type using this crate&#39;s Error type.",null,null],[8,"Terminal","","A terminal with similar capabilities to an ANSI Terminal\n(foreground/background colors etc).",null,null],[16,"Output","","The terminal&#39;s output writer type.",8,null],[10,"fg","","Sets the foreground color to the given color.",8,null],[10,"bg","","Sets the background color to the given color.",8,null],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(())` if the attribute is\nsupported and was sent to the terminal, or `Err(e)` if there was an error or the attribute\nwasn&#39;t supported.",8,null],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",8,null],[10,"reset","","Resets all terminal attributes and colors to their defaults.",8,null],[10,"supports_reset","","Returns true if reset is supported.",8,null],[10,"supports_color","","Returns true if color is fully supported.",8,null],[10,"cursor_up","","Moves the cursor up one line.",8,null],[10,"delete_line","","Deletes the text from the cursor location to the end of the line.",8,null],[10,"carriage_return","","Moves the cursor to the left edge of the current line.",8,null],[10,"get_ref","","Gets an immutable reference to the stream inside",8,null],[10,"get_mut","","Gets a mutable reference to the stream inside",8,null],[10,"into_inner","","Returns the contained stream, destroying the `Terminal`",8,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}]],"paths":[[4,"Attr"],[4,"Error"],[3,"TermInfo"],[4,"Error"],[4,"Param"],[4,"Error"],[3,"Variables"],[3,"TerminfoTerminal"],[8,"Terminal"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[8,"__Deref","lazy_static","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",0,null],[10,"deref","","The method called to dereference a value",0,null],[0,"lazy","","",null,null],[3,"Lazy","lazy_static::lazy","",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[11,"get","","",1,null],[14,"__lazy_static_create!","lazy_static","",null,null],[14,"lazy_static!","","",null,null]],"paths":[[8,"__Deref"],[3,"Lazy"]]};
searchIndex["glob"] = {"doc":"Support for matching file paths against Unix shell style patterns.","items":[[3,"Paths","glob","An iterator that yields `Path`s from the filesystem that match a particular\npattern.",null,null],[3,"GlobError","","A glob iteration error.",null,null],[3,"PatternError","","A pattern parsing error.",null,null],[12,"pos","","The approximate character index of where the error occurred.",0,null],[12,"msg","","A message describing the error.",0,null],[3,"Pattern","","A compiled Unix shell style pattern.",null,null],[3,"MatchOptions","","Configuration options to modify the behaviour of `Pattern::matches_with(..)`",null,null],[12,"case_sensitive","","Whether or not patterns should be matched in a case-sensitive manner.\nThis currently only considers upper/lower case relationships between\nASCII characters, but in future this might be extended to work with\nUnicode.",1,null],[12,"require_literal_separator","","If this is true then path-component separator characters (e.g. `/` on\nPosix) must be matched by a literal `/`, rather than by `*` or `?` or\n`[...]`",1,null],[12,"require_literal_leading_dot","","If this is true then paths that contain components that start with a `.`\nwill not match unless the `.` appears literally in the pattern: `*`, `?`, `**`,\nor `[...]` will not match. This is useful because such files are\nconventionally considered hidden on Unix systems and it might be\ndesirable to skip them when listing files.",1,null],[5,"glob","","Return an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"glob_with","","Return an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"},{"name":"matchoptions"}],"output":{"name":"result"}}],[6,"GlobResult","","An alias for a glob iteration result.",null,null],[11,"fmt","","",2,null],[11,"path","","The Path that the error corresponds to.",2,null],[11,"error","","The error in question.",2,null],[11,"description","","",2,null],[11,"cause","","",2,null],[11,"fmt","","",2,null],[11,"next","","",3,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"pattern"}}],[11,"hash","","",4,null],[11,"cmp","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","This function compiles Unix shell style patterns.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"escape","","Escape metacharacters within the given string by surrounding them in\nbrackets. The resulting string will, when compiled into a `Pattern`,\nmatch the input string and nothing else.",4,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"matches","","Return if the given `str` matches this `Pattern` using the default\nmatch options (i.e. `MatchOptions::new()`).",4,null],[11,"matches_path","","Return if the given `Path`, when converted to a `str`, matches this\n`Pattern` using the default match options (i.e. `MatchOptions::new()`).",4,null],[11,"matches_with","","Return if the given `str` matches this `Pattern` using the specified\nmatch options.",4,null],[11,"matches_path_with","","Return if the given `Path`, when converted to a `str`, matches this\n`Pattern` using the specified match options.",4,null],[11,"as_str","","Access the original glob pattern.",4,null],[11,"default","","",1,{"inputs":[],"output":{"name":"matchoptions"}}],[11,"hash","","",1,null],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"new","","Constructs a new `MatchOptions` with default field values. This is used\nwhen calling functions that do not take an explicit `MatchOptions`\nparameter.",1,{"inputs":[],"output":{"name":"matchoptions"}}]],"paths":[[3,"PatternError"],[3,"MatchOptions"],[3,"GlobError"],[3,"Paths"],[3,"Pattern"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["gcc"] = {"doc":"A library for build scripts to compile custom C code","items":[[3,"Config","gcc","Extra configuration to pass to gcc.",null,null],[3,"Tool","","Configuration used to represent an invocation of a C compiler.",null,null],[5,"compile_library","","Compile a library from the given set of input C files.",null,null],[0,"windows_registry","","A helper module to probe the Windows Registry when looking for\nwindows-specific tools.",null,null],[5,"find","gcc::windows_registry","Attempts to find a tool within an MSVC installation using the Windows\nregistry as a point to search from.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[5,"find_tool","","Similar to the `find` function above, this function will attempt the same\noperation (finding a MSVC tool in a local install) but instead returns a\n`Tool` which may be introspected.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[11,"new","gcc","Construct a new instance of a blank set of configuration.",0,{"inputs":[],"output":{"name":"config"}}],[11,"include","","Add a directory to the `-I` or include path for headers",0,null],[11,"define","","Specify a `-D` variable with an optional value.",0,null],[11,"object","","Add an arbitrary object file to link in",0,null],[11,"flag","","Add an arbitrary flag to the invocation of the compiler",0,null],[11,"file","","Add a file which will be compiled",0,null],[11,"cpp","","Set C++ support.",0,null],[11,"cpp_link_stdlib","","Set the standard library to link against when compiling with C++\nsupport.",0,null],[11,"cpp_set_stdlib","","Force the C++ compiler to use the specified standard library.",0,null],[11,"target","","Configures the target this configuration will be compiling for.",0,null],[11,"host","","Configures the host assumed by this configuration.",0,null],[11,"opt_level","","Configures the optimization level of the generated object files.",0,null],[11,"debug","","Configures whether the compiler will emit debug information when\ngenerating object files.",0,null],[11,"out_dir","","Configures the output directory where all object files and static\nlibraries will be located.",0,null],[11,"compiler","","Configures the compiler to be used to produce output.",0,null],[11,"archiver","","Configures the tool used to assemble archives.",0,null],[11,"cargo_metadata","","Define whether metadata should be emitted for cargo allowing it to\nautomatically link the binary. Defaults to `true`.",0,null],[11,"pic","","Configures whether the compiler will emit position independent code.",0,null],[11,"compile","","Run the compiler, generating the file `output`",0,null],[11,"get_compiler","","Get the compiler that&#39;s in use for this configuration.",0,null],[11,"to_command","","Converts this compiler into a `Command` that&#39;s ready to be run.",1,null],[11,"path","","Returns the path for this compiler.",1,null],[11,"args","","Returns the default set of arguments to the compiler needed to produce\nexecutables for the target this compiler generates.",1,null],[11,"env","","Returns the set of environment variables needed for this compiler to\noperate.",1,null]],"paths":[[3,"Config"],[3,"Tool"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["strsim"] = {"doc":"This library implements string similarity metrics. Includes Hamming,\nLevenshtein, Jaro, and Jaro-Winkler.","items":[[4,"StrSimError","strsim","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_against_vec","","Calculates the Jaro distance between a string and each string in a vector.\nReturns a vector of corresponding values between 0.0 and 1.0 (higher value\nmeans more similar).",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_winkler_against_vec","","Calculates the Jaro-Winkler distances between a string and each string\nin a vector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"levenshtein_against_vec","","Calculates the Levenshtein distance between a string and each string in a\nvector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"damerau_levenshtein","","Same as Levenshtein but allows for adjacent transpositions.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"damerau_levenshtein_against_vec","","Calculates the Damerau-Levenshtein distance between a string and each string\nin a vector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[6,"HammingResult","","",null,null],[11,"eq","","",0,null],[11,"fmt","","",0,null]],"paths":[[4,"StrSimError"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to\n[Unicode Standard Annex #31](http://www.unicode.org/reports/tr31/) rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-derived-property is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the &#39;XID_Start&#39;\nUnicode property.",0,null],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the &#39;XID_Continue&#39;\nUnicode property.",0,null]],"paths":[[8,"UnicodeXID"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent\nranges of UTF-8 bytes. This is useful for constructing byte based automatons\nthat need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,null],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence\nof byte ranges.",1,null],[11,"fmt","","",1,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"matches","","Returns true if and only if the given byte is in this range.",0,null],[11,"fmt","","",0,null],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range\ngiven.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,null]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
initSearch(searchIndex);
